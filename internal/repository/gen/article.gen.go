// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newArticle(db *gorm.DB, opts ...gen.DOOption) article {
	_article := article{}

	_article.articleDo.UseDB(db, opts...)
	_article.articleDo.UseModel(&model.Article{})

	tableName := _article.articleDo.TableName()
	_article.ALL = field.NewAsterisk(tableName)
	_article.ID = field.NewInt64(tableName, "id")
	_article.Cid = field.NewString(tableName, "cid")
	_article.Title = field.NewString(tableName, "title")
	_article.Author = field.NewString(tableName, "author")
	_article.ImageInput = field.NewString(tableName, "image_input")
	_article.Synopsis = field.NewString(tableName, "synopsis")
	_article.ShareTitle = field.NewString(tableName, "share_title")
	_article.ShareSynopsis = field.NewString(tableName, "share_synopsis")
	_article.Visit = field.NewString(tableName, "visit")
	_article.Sort = field.NewInt64(tableName, "sort")
	_article.URL = field.NewString(tableName, "url")
	_article.MediaID = field.NewString(tableName, "media_id")
	_article.Status = field.NewInt64(tableName, "status")
	_article.Hide = field.NewInt64(tableName, "hide")
	_article.AdminID = field.NewInt64(tableName, "admin_id")
	_article.MerID = field.NewInt64(tableName, "mer_id")
	_article.ProductID = field.NewInt64(tableName, "product_id")
	_article.IsHot = field.NewInt64(tableName, "is_hot")
	_article.IsBanner = field.NewInt64(tableName, "is_banner")
	_article.Content = field.NewString(tableName, "content")
	_article.CreatedAt = field.NewInt64(tableName, "created_at")
	_article.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_article.DeletedAt = field.NewField(tableName, "deleted_at")

	_article.fillFieldMap()

	return _article
}

// article 文章管理表
type article struct {
	articleDo articleDo

	ALL           field.Asterisk
	ID            field.Int64  // 文章管理ID
	Cid           field.String // 分类id
	Title         field.String // 文章标题
	Author        field.String // 文章作者
	ImageInput    field.String // 文章图片
	Synopsis      field.String // 文章简介
	ShareTitle    field.String // 文章分享标题
	ShareSynopsis field.String // 文章分享简介
	Visit         field.String // 浏览次数
	Sort          field.Int64  // 排序
	URL           field.String // 原文链接
	MediaID       field.String // 微信素材id
	Status        field.Int64  // 状态
	Hide          field.Int64  // 是否隐藏
	AdminID       field.Int64  // 管理员id
	MerID         field.Int64  // 商户id
	ProductID     field.Int64  // 商品关联id
	IsHot         field.Int64  // 是否热门(小程序)
	IsBanner      field.Int64  // 是否轮播图(小程序)
	Content       field.String // 文章内容
	CreatedAt     field.Int64  // 创建时间
	UpdatedAt     field.Int64  // 修改时间
	DeletedAt     field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (a article) Table(newTableName string) *article {
	a.articleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a article) As(alias string) *article {
	a.articleDo.DO = *(a.articleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *article) updateTableName(table string) *article {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Cid = field.NewString(table, "cid")
	a.Title = field.NewString(table, "title")
	a.Author = field.NewString(table, "author")
	a.ImageInput = field.NewString(table, "image_input")
	a.Synopsis = field.NewString(table, "synopsis")
	a.ShareTitle = field.NewString(table, "share_title")
	a.ShareSynopsis = field.NewString(table, "share_synopsis")
	a.Visit = field.NewString(table, "visit")
	a.Sort = field.NewInt64(table, "sort")
	a.URL = field.NewString(table, "url")
	a.MediaID = field.NewString(table, "media_id")
	a.Status = field.NewInt64(table, "status")
	a.Hide = field.NewInt64(table, "hide")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.MerID = field.NewInt64(table, "mer_id")
	a.ProductID = field.NewInt64(table, "product_id")
	a.IsHot = field.NewInt64(table, "is_hot")
	a.IsBanner = field.NewInt64(table, "is_banner")
	a.Content = field.NewString(table, "content")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *article) WithContext(ctx context.Context) IArticleDo { return a.articleDo.WithContext(ctx) }

func (a article) TableName() string { return a.articleDo.TableName() }

func (a article) Alias() string { return a.articleDo.Alias() }

func (a article) Columns(cols ...field.Expr) gen.Columns { return a.articleDo.Columns(cols...) }

func (a *article) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *article) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 23)
	a.fieldMap["id"] = a.ID
	a.fieldMap["cid"] = a.Cid
	a.fieldMap["title"] = a.Title
	a.fieldMap["author"] = a.Author
	a.fieldMap["image_input"] = a.ImageInput
	a.fieldMap["synopsis"] = a.Synopsis
	a.fieldMap["share_title"] = a.ShareTitle
	a.fieldMap["share_synopsis"] = a.ShareSynopsis
	a.fieldMap["visit"] = a.Visit
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["url"] = a.URL
	a.fieldMap["media_id"] = a.MediaID
	a.fieldMap["status"] = a.Status
	a.fieldMap["hide"] = a.Hide
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["mer_id"] = a.MerID
	a.fieldMap["product_id"] = a.ProductID
	a.fieldMap["is_hot"] = a.IsHot
	a.fieldMap["is_banner"] = a.IsBanner
	a.fieldMap["content"] = a.Content
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a article) clone(db *gorm.DB) article {
	a.articleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a article) replaceDB(db *gorm.DB) article {
	a.articleDo.ReplaceDB(db)
	return a
}

type articleDo struct{ gen.DO }

type IArticleDo interface {
	gen.SubQuery
	Debug() IArticleDo
	WithContext(ctx context.Context) IArticleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IArticleDo
	WriteDB() IArticleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IArticleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IArticleDo
	Not(conds ...gen.Condition) IArticleDo
	Or(conds ...gen.Condition) IArticleDo
	Select(conds ...field.Expr) IArticleDo
	Where(conds ...gen.Condition) IArticleDo
	Order(conds ...field.Expr) IArticleDo
	Distinct(cols ...field.Expr) IArticleDo
	Omit(cols ...field.Expr) IArticleDo
	Join(table schema.Tabler, on ...field.Expr) IArticleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IArticleDo
	Group(cols ...field.Expr) IArticleDo
	Having(conds ...gen.Condition) IArticleDo
	Limit(limit int) IArticleDo
	Offset(offset int) IArticleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDo
	Unscoped() IArticleDo
	Create(values ...*model.Article) error
	CreateInBatches(values []*model.Article, batchSize int) error
	Save(values ...*model.Article) error
	First() (*model.Article, error)
	Take() (*model.Article, error)
	Last() (*model.Article, error)
	Find() ([]*model.Article, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Article, err error)
	FindInBatches(result *[]*model.Article, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Article) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IArticleDo
	Assign(attrs ...field.AssignExpr) IArticleDo
	Joins(fields ...field.RelationField) IArticleDo
	Preload(fields ...field.RelationField) IArticleDo
	FirstOrInit() (*model.Article, error)
	FirstOrCreate() (*model.Article, error)
	FindByPage(offset int, limit int) (result []*model.Article, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IArticleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a articleDo) Debug() IArticleDo {
	return a.withDO(a.DO.Debug())
}

func (a articleDo) WithContext(ctx context.Context) IArticleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a articleDo) ReadDB() IArticleDo {
	return a.Clauses(dbresolver.Read)
}

func (a articleDo) WriteDB() IArticleDo {
	return a.Clauses(dbresolver.Write)
}

func (a articleDo) Session(config *gorm.Session) IArticleDo {
	return a.withDO(a.DO.Session(config))
}

func (a articleDo) Clauses(conds ...clause.Expression) IArticleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a articleDo) Returning(value interface{}, columns ...string) IArticleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a articleDo) Not(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a articleDo) Or(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a articleDo) Select(conds ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a articleDo) Where(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a articleDo) Order(conds ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a articleDo) Distinct(cols ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a articleDo) Omit(cols ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a articleDo) Join(table schema.Tabler, on ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a articleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IArticleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a articleDo) RightJoin(table schema.Tabler, on ...field.Expr) IArticleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a articleDo) Group(cols ...field.Expr) IArticleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a articleDo) Having(conds ...gen.Condition) IArticleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a articleDo) Limit(limit int) IArticleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a articleDo) Offset(offset int) IArticleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a articleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IArticleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a articleDo) Unscoped() IArticleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a articleDo) Create(values ...*model.Article) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a articleDo) CreateInBatches(values []*model.Article, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a articleDo) Save(values ...*model.Article) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a articleDo) First() (*model.Article, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Article), nil
	}
}

func (a articleDo) Take() (*model.Article, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Article), nil
	}
}

func (a articleDo) Last() (*model.Article, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Article), nil
	}
}

func (a articleDo) Find() ([]*model.Article, error) {
	result, err := a.DO.Find()
	return result.([]*model.Article), err
}

func (a articleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Article, err error) {
	buf := make([]*model.Article, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a articleDo) FindInBatches(result *[]*model.Article, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a articleDo) Attrs(attrs ...field.AssignExpr) IArticleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a articleDo) Assign(attrs ...field.AssignExpr) IArticleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a articleDo) Joins(fields ...field.RelationField) IArticleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a articleDo) Preload(fields ...field.RelationField) IArticleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a articleDo) FirstOrInit() (*model.Article, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Article), nil
	}
}

func (a articleDo) FirstOrCreate() (*model.Article, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Article), nil
	}
}

func (a articleDo) FindByPage(offset int, limit int) (result []*model.Article, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a articleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a articleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a articleDo) Delete(models ...*model.Article) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *articleDo) withDO(do gen.Dao) *articleDo {
	a.DO = *do.(*gen.DO)
	return a
}
