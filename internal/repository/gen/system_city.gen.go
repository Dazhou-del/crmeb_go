// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSystemCity(db *gorm.DB, opts ...gen.DOOption) systemCity {
	_systemCity := systemCity{}

	_systemCity.systemCityDo.UseDB(db, opts...)
	_systemCity.systemCityDo.UseModel(&model.SystemCity{})

	tableName := _systemCity.systemCityDo.TableName()
	_systemCity.ALL = field.NewAsterisk(tableName)
	_systemCity.ID = field.NewInt64(tableName, "id")
	_systemCity.CityID = field.NewInt64(tableName, "city_id")
	_systemCity.Level = field.NewInt64(tableName, "level")
	_systemCity.ParentID = field.NewInt64(tableName, "parent_id")
	_systemCity.AreaCode = field.NewString(tableName, "area_code")
	_systemCity.Name = field.NewString(tableName, "name")
	_systemCity.MergerName = field.NewString(tableName, "merger_name")
	_systemCity.Lng = field.NewString(tableName, "lng")
	_systemCity.Lat = field.NewString(tableName, "lat")
	_systemCity.IsShow = field.NewInt64(tableName, "is_show")
	_systemCity.CreatedAt = field.NewInt64(tableName, "created_at")
	_systemCity.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_systemCity.DeletedAt = field.NewField(tableName, "deleted_at")

	_systemCity.fillFieldMap()

	return _systemCity
}

// systemCity 城市表
type systemCity struct {
	systemCityDo systemCityDo

	ALL        field.Asterisk
	ID         field.Int64
	CityID     field.Int64  // 城市id
	Level      field.Int64  // 省市级别
	ParentID   field.Int64  // 父级id
	AreaCode   field.String // 区号
	Name       field.String // 名称
	MergerName field.String // 合并名称
	Lng        field.String // 经度
	Lat        field.String // 纬度
	IsShow     field.Int64  // 是否展示
	CreatedAt  field.Int64
	UpdatedAt  field.Int64
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (s systemCity) Table(newTableName string) *systemCity {
	s.systemCityDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemCity) As(alias string) *systemCity {
	s.systemCityDo.DO = *(s.systemCityDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemCity) updateTableName(table string) *systemCity {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CityID = field.NewInt64(table, "city_id")
	s.Level = field.NewInt64(table, "level")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.AreaCode = field.NewString(table, "area_code")
	s.Name = field.NewString(table, "name")
	s.MergerName = field.NewString(table, "merger_name")
	s.Lng = field.NewString(table, "lng")
	s.Lat = field.NewString(table, "lat")
	s.IsShow = field.NewInt64(table, "is_show")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *systemCity) WithContext(ctx context.Context) ISystemCityDo {
	return s.systemCityDo.WithContext(ctx)
}

func (s systemCity) TableName() string { return s.systemCityDo.TableName() }

func (s systemCity) Alias() string { return s.systemCityDo.Alias() }

func (s systemCity) Columns(cols ...field.Expr) gen.Columns { return s.systemCityDo.Columns(cols...) }

func (s *systemCity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemCity) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["city_id"] = s.CityID
	s.fieldMap["level"] = s.Level
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["area_code"] = s.AreaCode
	s.fieldMap["name"] = s.Name
	s.fieldMap["merger_name"] = s.MergerName
	s.fieldMap["lng"] = s.Lng
	s.fieldMap["lat"] = s.Lat
	s.fieldMap["is_show"] = s.IsShow
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s systemCity) clone(db *gorm.DB) systemCity {
	s.systemCityDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemCity) replaceDB(db *gorm.DB) systemCity {
	s.systemCityDo.ReplaceDB(db)
	return s
}

type systemCityDo struct{ gen.DO }

type ISystemCityDo interface {
	gen.SubQuery
	Debug() ISystemCityDo
	WithContext(ctx context.Context) ISystemCityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemCityDo
	WriteDB() ISystemCityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemCityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemCityDo
	Not(conds ...gen.Condition) ISystemCityDo
	Or(conds ...gen.Condition) ISystemCityDo
	Select(conds ...field.Expr) ISystemCityDo
	Where(conds ...gen.Condition) ISystemCityDo
	Order(conds ...field.Expr) ISystemCityDo
	Distinct(cols ...field.Expr) ISystemCityDo
	Omit(cols ...field.Expr) ISystemCityDo
	Join(table schema.Tabler, on ...field.Expr) ISystemCityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemCityDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemCityDo
	Group(cols ...field.Expr) ISystemCityDo
	Having(conds ...gen.Condition) ISystemCityDo
	Limit(limit int) ISystemCityDo
	Offset(offset int) ISystemCityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemCityDo
	Unscoped() ISystemCityDo
	Create(values ...*model.SystemCity) error
	CreateInBatches(values []*model.SystemCity, batchSize int) error
	Save(values ...*model.SystemCity) error
	First() (*model.SystemCity, error)
	Take() (*model.SystemCity, error)
	Last() (*model.SystemCity, error)
	Find() ([]*model.SystemCity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemCity, err error)
	FindInBatches(result *[]*model.SystemCity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemCity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemCityDo
	Assign(attrs ...field.AssignExpr) ISystemCityDo
	Joins(fields ...field.RelationField) ISystemCityDo
	Preload(fields ...field.RelationField) ISystemCityDo
	FirstOrInit() (*model.SystemCity, error)
	FirstOrCreate() (*model.SystemCity, error)
	FindByPage(offset int, limit int) (result []*model.SystemCity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemCityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemCityDo) Debug() ISystemCityDo {
	return s.withDO(s.DO.Debug())
}

func (s systemCityDo) WithContext(ctx context.Context) ISystemCityDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemCityDo) ReadDB() ISystemCityDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemCityDo) WriteDB() ISystemCityDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemCityDo) Session(config *gorm.Session) ISystemCityDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemCityDo) Clauses(conds ...clause.Expression) ISystemCityDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemCityDo) Returning(value interface{}, columns ...string) ISystemCityDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemCityDo) Not(conds ...gen.Condition) ISystemCityDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemCityDo) Or(conds ...gen.Condition) ISystemCityDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemCityDo) Select(conds ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemCityDo) Where(conds ...gen.Condition) ISystemCityDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemCityDo) Order(conds ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemCityDo) Distinct(cols ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemCityDo) Omit(cols ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemCityDo) Join(table schema.Tabler, on ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemCityDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemCityDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemCityDo) Group(cols ...field.Expr) ISystemCityDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemCityDo) Having(conds ...gen.Condition) ISystemCityDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemCityDo) Limit(limit int) ISystemCityDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemCityDo) Offset(offset int) ISystemCityDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemCityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemCityDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemCityDo) Unscoped() ISystemCityDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemCityDo) Create(values ...*model.SystemCity) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemCityDo) CreateInBatches(values []*model.SystemCity, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemCityDo) Save(values ...*model.SystemCity) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemCityDo) First() (*model.SystemCity, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemCity), nil
	}
}

func (s systemCityDo) Take() (*model.SystemCity, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemCity), nil
	}
}

func (s systemCityDo) Last() (*model.SystemCity, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemCity), nil
	}
}

func (s systemCityDo) Find() ([]*model.SystemCity, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemCity), err
}

func (s systemCityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemCity, err error) {
	buf := make([]*model.SystemCity, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemCityDo) FindInBatches(result *[]*model.SystemCity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemCityDo) Attrs(attrs ...field.AssignExpr) ISystemCityDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemCityDo) Assign(attrs ...field.AssignExpr) ISystemCityDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemCityDo) Joins(fields ...field.RelationField) ISystemCityDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemCityDo) Preload(fields ...field.RelationField) ISystemCityDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemCityDo) FirstOrInit() (*model.SystemCity, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemCity), nil
	}
}

func (s systemCityDo) FirstOrCreate() (*model.SystemCity, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemCity), nil
	}
}

func (s systemCityDo) FindByPage(offset int, limit int) (result []*model.SystemCity, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemCityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemCityDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemCityDo) Delete(models ...*model.SystemCity) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemCityDo) withDO(do gen.Dao) *systemCityDo {
	s.DO = *do.(*gen.DO)
	return s
}
