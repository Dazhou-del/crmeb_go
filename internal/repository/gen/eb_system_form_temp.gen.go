// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemFormTemp(db *gorm.DB, opts ...gen.DOOption) ebSystemFormTemp {
	_ebSystemFormTemp := ebSystemFormTemp{}

	_ebSystemFormTemp.ebSystemFormTempDo.UseDB(db, opts...)
	_ebSystemFormTemp.ebSystemFormTempDo.UseModel(&model.EbSystemFormTemp{})

	tableName := _ebSystemFormTemp.ebSystemFormTempDo.TableName()
	_ebSystemFormTemp.ALL = field.NewAsterisk(tableName)
	_ebSystemFormTemp.ID = field.NewInt32(tableName, "id")
	_ebSystemFormTemp.Name = field.NewString(tableName, "name")
	_ebSystemFormTemp.Info = field.NewString(tableName, "info")
	_ebSystemFormTemp.Content = field.NewString(tableName, "content")
	_ebSystemFormTemp.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemFormTemp.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemFormTemp.fillFieldMap()

	return _ebSystemFormTemp
}

// ebSystemFormTemp 表单模板
type ebSystemFormTemp struct {
	ebSystemFormTempDo ebSystemFormTempDo

	ALL        field.Asterisk
	ID         field.Int32  // 表单模板id
	Name       field.String // 表单名称
	Info       field.String // 表单简介
	Content    field.String // 表单内容
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemFormTemp) Table(newTableName string) *ebSystemFormTemp {
	e.ebSystemFormTempDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemFormTemp) As(alias string) *ebSystemFormTemp {
	e.ebSystemFormTempDo.DO = *(e.ebSystemFormTempDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemFormTemp) updateTableName(table string) *ebSystemFormTemp {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Info = field.NewString(table, "info")
	e.Content = field.NewString(table, "content")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemFormTemp) WithContext(ctx context.Context) IEbSystemFormTempDo {
	return e.ebSystemFormTempDo.WithContext(ctx)
}

func (e ebSystemFormTemp) TableName() string { return e.ebSystemFormTempDo.TableName() }

func (e ebSystemFormTemp) Alias() string { return e.ebSystemFormTempDo.Alias() }

func (e ebSystemFormTemp) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemFormTempDo.Columns(cols...)
}

func (e *ebSystemFormTemp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemFormTemp) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["info"] = e.Info
	e.fieldMap["content"] = e.Content
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemFormTemp) clone(db *gorm.DB) ebSystemFormTemp {
	e.ebSystemFormTempDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemFormTemp) replaceDB(db *gorm.DB) ebSystemFormTemp {
	e.ebSystemFormTempDo.ReplaceDB(db)
	return e
}

type ebSystemFormTempDo struct{ gen.DO }

type IEbSystemFormTempDo interface {
	gen.SubQuery
	Debug() IEbSystemFormTempDo
	WithContext(ctx context.Context) IEbSystemFormTempDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemFormTempDo
	WriteDB() IEbSystemFormTempDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemFormTempDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemFormTempDo
	Not(conds ...gen.Condition) IEbSystemFormTempDo
	Or(conds ...gen.Condition) IEbSystemFormTempDo
	Select(conds ...field.Expr) IEbSystemFormTempDo
	Where(conds ...gen.Condition) IEbSystemFormTempDo
	Order(conds ...field.Expr) IEbSystemFormTempDo
	Distinct(cols ...field.Expr) IEbSystemFormTempDo
	Omit(cols ...field.Expr) IEbSystemFormTempDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemFormTempDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemFormTempDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemFormTempDo
	Group(cols ...field.Expr) IEbSystemFormTempDo
	Having(conds ...gen.Condition) IEbSystemFormTempDo
	Limit(limit int) IEbSystemFormTempDo
	Offset(offset int) IEbSystemFormTempDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemFormTempDo
	Unscoped() IEbSystemFormTempDo
	Create(values ...*model.EbSystemFormTemp) error
	CreateInBatches(values []*model.EbSystemFormTemp, batchSize int) error
	Save(values ...*model.EbSystemFormTemp) error
	First() (*model.EbSystemFormTemp, error)
	Take() (*model.EbSystemFormTemp, error)
	Last() (*model.EbSystemFormTemp, error)
	Find() ([]*model.EbSystemFormTemp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemFormTemp, err error)
	FindInBatches(result *[]*model.EbSystemFormTemp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemFormTemp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemFormTempDo
	Assign(attrs ...field.AssignExpr) IEbSystemFormTempDo
	Joins(fields ...field.RelationField) IEbSystemFormTempDo
	Preload(fields ...field.RelationField) IEbSystemFormTempDo
	FirstOrInit() (*model.EbSystemFormTemp, error)
	FirstOrCreate() (*model.EbSystemFormTemp, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemFormTemp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemFormTempDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemFormTempDo) Debug() IEbSystemFormTempDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemFormTempDo) WithContext(ctx context.Context) IEbSystemFormTempDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemFormTempDo) ReadDB() IEbSystemFormTempDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemFormTempDo) WriteDB() IEbSystemFormTempDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemFormTempDo) Session(config *gorm.Session) IEbSystemFormTempDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemFormTempDo) Clauses(conds ...clause.Expression) IEbSystemFormTempDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemFormTempDo) Returning(value interface{}, columns ...string) IEbSystemFormTempDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemFormTempDo) Not(conds ...gen.Condition) IEbSystemFormTempDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemFormTempDo) Or(conds ...gen.Condition) IEbSystemFormTempDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemFormTempDo) Select(conds ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemFormTempDo) Where(conds ...gen.Condition) IEbSystemFormTempDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemFormTempDo) Order(conds ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemFormTempDo) Distinct(cols ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemFormTempDo) Omit(cols ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemFormTempDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemFormTempDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemFormTempDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemFormTempDo) Group(cols ...field.Expr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemFormTempDo) Having(conds ...gen.Condition) IEbSystemFormTempDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemFormTempDo) Limit(limit int) IEbSystemFormTempDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemFormTempDo) Offset(offset int) IEbSystemFormTempDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemFormTempDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemFormTempDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemFormTempDo) Unscoped() IEbSystemFormTempDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemFormTempDo) Create(values ...*model.EbSystemFormTemp) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemFormTempDo) CreateInBatches(values []*model.EbSystemFormTemp, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemFormTempDo) Save(values ...*model.EbSystemFormTemp) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemFormTempDo) First() (*model.EbSystemFormTemp, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemFormTemp), nil
	}
}

func (e ebSystemFormTempDo) Take() (*model.EbSystemFormTemp, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemFormTemp), nil
	}
}

func (e ebSystemFormTempDo) Last() (*model.EbSystemFormTemp, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemFormTemp), nil
	}
}

func (e ebSystemFormTempDo) Find() ([]*model.EbSystemFormTemp, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemFormTemp), err
}

func (e ebSystemFormTempDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemFormTemp, err error) {
	buf := make([]*model.EbSystemFormTemp, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemFormTempDo) FindInBatches(result *[]*model.EbSystemFormTemp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemFormTempDo) Attrs(attrs ...field.AssignExpr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemFormTempDo) Assign(attrs ...field.AssignExpr) IEbSystemFormTempDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemFormTempDo) Joins(fields ...field.RelationField) IEbSystemFormTempDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemFormTempDo) Preload(fields ...field.RelationField) IEbSystemFormTempDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemFormTempDo) FirstOrInit() (*model.EbSystemFormTemp, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemFormTemp), nil
	}
}

func (e ebSystemFormTempDo) FirstOrCreate() (*model.EbSystemFormTemp, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemFormTemp), nil
	}
}

func (e ebSystemFormTempDo) FindByPage(offset int, limit int) (result []*model.EbSystemFormTemp, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemFormTempDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemFormTempDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemFormTempDo) Delete(models ...*model.EbSystemFormTemp) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemFormTempDo) withDO(do gen.Dao) *ebSystemFormTempDo {
	e.DO = *do.(*gen.DO)
	return e
}
