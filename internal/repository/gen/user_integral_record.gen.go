// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newUserIntegralRecord(db *gorm.DB, opts ...gen.DOOption) userIntegralRecord {
	_userIntegralRecord := userIntegralRecord{}

	_userIntegralRecord.userIntegralRecordDo.UseDB(db, opts...)
	_userIntegralRecord.userIntegralRecordDo.UseModel(&model.UserIntegralRecord{})

	tableName := _userIntegralRecord.userIntegralRecordDo.TableName()
	_userIntegralRecord.ALL = field.NewAsterisk(tableName)
	_userIntegralRecord.ID = field.NewInt64(tableName, "id")
	_userIntegralRecord.UID = field.NewInt64(tableName, "uid")
	_userIntegralRecord.LinkID = field.NewString(tableName, "link_id")
	_userIntegralRecord.LinkType = field.NewString(tableName, "link_type")
	_userIntegralRecord.Type = field.NewInt64(tableName, "type")
	_userIntegralRecord.Title = field.NewString(tableName, "title")
	_userIntegralRecord.Integral = field.NewInt64(tableName, "integral")
	_userIntegralRecord.Balance = field.NewInt64(tableName, "balance")
	_userIntegralRecord.Mark = field.NewString(tableName, "mark")
	_userIntegralRecord.Status = field.NewInt64(tableName, "status")
	_userIntegralRecord.FrozenTime = field.NewInt64(tableName, "frozen_time")
	_userIntegralRecord.ThawTime = field.NewInt64(tableName, "thaw_time")
	_userIntegralRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_userIntegralRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userIntegralRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_userIntegralRecord.fillFieldMap()

	return _userIntegralRecord
}

// userIntegralRecord 用户积分记录表
type userIntegralRecord struct {
	userIntegralRecordDo userIntegralRecordDo

	ALL        field.Asterisk
	ID         field.Int64  // 记录id
	UID        field.Int64  // 用户uid
	LinkID     field.String // 关联id-orderNo,(sign,system默认为0）
	LinkType   field.String // 关联类型（order,sign,system）
	Type       field.Int64  // 类型：1-增加，2-扣减
	Title      field.String // 标题
	Integral   field.Int64  // 积分
	Balance    field.Int64  // 剩余
	Mark       field.String // 备注
	Status     field.Int64  // 状态：1-订单创建，2-冻结期，3-完成，4-失效（订单退款）
	FrozenTime field.Int64  // 冻结期时间（天）
	ThawTime   field.Int64  // 解冻时间
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (u userIntegralRecord) Table(newTableName string) *userIntegralRecord {
	u.userIntegralRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userIntegralRecord) As(alias string) *userIntegralRecord {
	u.userIntegralRecordDo.DO = *(u.userIntegralRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userIntegralRecord) updateTableName(table string) *userIntegralRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.LinkID = field.NewString(table, "link_id")
	u.LinkType = field.NewString(table, "link_type")
	u.Type = field.NewInt64(table, "type")
	u.Title = field.NewString(table, "title")
	u.Integral = field.NewInt64(table, "integral")
	u.Balance = field.NewInt64(table, "balance")
	u.Mark = field.NewString(table, "mark")
	u.Status = field.NewInt64(table, "status")
	u.FrozenTime = field.NewInt64(table, "frozen_time")
	u.ThawTime = field.NewInt64(table, "thaw_time")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userIntegralRecord) WithContext(ctx context.Context) IUserIntegralRecordDo {
	return u.userIntegralRecordDo.WithContext(ctx)
}

func (u userIntegralRecord) TableName() string { return u.userIntegralRecordDo.TableName() }

func (u userIntegralRecord) Alias() string { return u.userIntegralRecordDo.Alias() }

func (u userIntegralRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userIntegralRecordDo.Columns(cols...)
}

func (u *userIntegralRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userIntegralRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 15)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["link_id"] = u.LinkID
	u.fieldMap["link_type"] = u.LinkType
	u.fieldMap["type"] = u.Type
	u.fieldMap["title"] = u.Title
	u.fieldMap["integral"] = u.Integral
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["mark"] = u.Mark
	u.fieldMap["status"] = u.Status
	u.fieldMap["frozen_time"] = u.FrozenTime
	u.fieldMap["thaw_time"] = u.ThawTime
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userIntegralRecord) clone(db *gorm.DB) userIntegralRecord {
	u.userIntegralRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userIntegralRecord) replaceDB(db *gorm.DB) userIntegralRecord {
	u.userIntegralRecordDo.ReplaceDB(db)
	return u
}

type userIntegralRecordDo struct{ gen.DO }

type IUserIntegralRecordDo interface {
	gen.SubQuery
	Debug() IUserIntegralRecordDo
	WithContext(ctx context.Context) IUserIntegralRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserIntegralRecordDo
	WriteDB() IUserIntegralRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserIntegralRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserIntegralRecordDo
	Not(conds ...gen.Condition) IUserIntegralRecordDo
	Or(conds ...gen.Condition) IUserIntegralRecordDo
	Select(conds ...field.Expr) IUserIntegralRecordDo
	Where(conds ...gen.Condition) IUserIntegralRecordDo
	Order(conds ...field.Expr) IUserIntegralRecordDo
	Distinct(cols ...field.Expr) IUserIntegralRecordDo
	Omit(cols ...field.Expr) IUserIntegralRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserIntegralRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserIntegralRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserIntegralRecordDo
	Group(cols ...field.Expr) IUserIntegralRecordDo
	Having(conds ...gen.Condition) IUserIntegralRecordDo
	Limit(limit int) IUserIntegralRecordDo
	Offset(offset int) IUserIntegralRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserIntegralRecordDo
	Unscoped() IUserIntegralRecordDo
	Create(values ...*model.UserIntegralRecord) error
	CreateInBatches(values []*model.UserIntegralRecord, batchSize int) error
	Save(values ...*model.UserIntegralRecord) error
	First() (*model.UserIntegralRecord, error)
	Take() (*model.UserIntegralRecord, error)
	Last() (*model.UserIntegralRecord, error)
	Find() ([]*model.UserIntegralRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserIntegralRecord, err error)
	FindInBatches(result *[]*model.UserIntegralRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserIntegralRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserIntegralRecordDo
	Assign(attrs ...field.AssignExpr) IUserIntegralRecordDo
	Joins(fields ...field.RelationField) IUserIntegralRecordDo
	Preload(fields ...field.RelationField) IUserIntegralRecordDo
	FirstOrInit() (*model.UserIntegralRecord, error)
	FirstOrCreate() (*model.UserIntegralRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserIntegralRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserIntegralRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userIntegralRecordDo) Debug() IUserIntegralRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userIntegralRecordDo) WithContext(ctx context.Context) IUserIntegralRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userIntegralRecordDo) ReadDB() IUserIntegralRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userIntegralRecordDo) WriteDB() IUserIntegralRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userIntegralRecordDo) Session(config *gorm.Session) IUserIntegralRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userIntegralRecordDo) Clauses(conds ...clause.Expression) IUserIntegralRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userIntegralRecordDo) Returning(value interface{}, columns ...string) IUserIntegralRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userIntegralRecordDo) Not(conds ...gen.Condition) IUserIntegralRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userIntegralRecordDo) Or(conds ...gen.Condition) IUserIntegralRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userIntegralRecordDo) Select(conds ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userIntegralRecordDo) Where(conds ...gen.Condition) IUserIntegralRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userIntegralRecordDo) Order(conds ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userIntegralRecordDo) Distinct(cols ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userIntegralRecordDo) Omit(cols ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userIntegralRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userIntegralRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userIntegralRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userIntegralRecordDo) Group(cols ...field.Expr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userIntegralRecordDo) Having(conds ...gen.Condition) IUserIntegralRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userIntegralRecordDo) Limit(limit int) IUserIntegralRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userIntegralRecordDo) Offset(offset int) IUserIntegralRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userIntegralRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserIntegralRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userIntegralRecordDo) Unscoped() IUserIntegralRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userIntegralRecordDo) Create(values ...*model.UserIntegralRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userIntegralRecordDo) CreateInBatches(values []*model.UserIntegralRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userIntegralRecordDo) Save(values ...*model.UserIntegralRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userIntegralRecordDo) First() (*model.UserIntegralRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIntegralRecord), nil
	}
}

func (u userIntegralRecordDo) Take() (*model.UserIntegralRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIntegralRecord), nil
	}
}

func (u userIntegralRecordDo) Last() (*model.UserIntegralRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIntegralRecord), nil
	}
}

func (u userIntegralRecordDo) Find() ([]*model.UserIntegralRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserIntegralRecord), err
}

func (u userIntegralRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserIntegralRecord, err error) {
	buf := make([]*model.UserIntegralRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userIntegralRecordDo) FindInBatches(result *[]*model.UserIntegralRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userIntegralRecordDo) Attrs(attrs ...field.AssignExpr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userIntegralRecordDo) Assign(attrs ...field.AssignExpr) IUserIntegralRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userIntegralRecordDo) Joins(fields ...field.RelationField) IUserIntegralRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userIntegralRecordDo) Preload(fields ...field.RelationField) IUserIntegralRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userIntegralRecordDo) FirstOrInit() (*model.UserIntegralRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIntegralRecord), nil
	}
}

func (u userIntegralRecordDo) FirstOrCreate() (*model.UserIntegralRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserIntegralRecord), nil
	}
}

func (u userIntegralRecordDo) FindByPage(offset int, limit int) (result []*model.UserIntegralRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userIntegralRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userIntegralRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userIntegralRecordDo) Delete(models ...*model.UserIntegralRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userIntegralRecordDo) withDO(do gen.Dao) *userIntegralRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
