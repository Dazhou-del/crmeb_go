// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newShippingTemplatesFree(db *gorm.DB, opts ...gen.DOOption) shippingTemplatesFree {
	_shippingTemplatesFree := shippingTemplatesFree{}

	_shippingTemplatesFree.shippingTemplatesFreeDo.UseDB(db, opts...)
	_shippingTemplatesFree.shippingTemplatesFreeDo.UseModel(&model.ShippingTemplatesFree{})

	tableName := _shippingTemplatesFree.shippingTemplatesFreeDo.TableName()
	_shippingTemplatesFree.ALL = field.NewAsterisk(tableName)
	_shippingTemplatesFree.ID = field.NewInt64(tableName, "id")
	_shippingTemplatesFree.TempID = field.NewInt64(tableName, "temp_id")
	_shippingTemplatesFree.CityID = field.NewInt64(tableName, "city_id")
	_shippingTemplatesFree.Title = field.NewString(tableName, "title")
	_shippingTemplatesFree.Number = field.NewField(tableName, "number")
	_shippingTemplatesFree.Price = field.NewField(tableName, "price")
	_shippingTemplatesFree.Type = field.NewInt64(tableName, "type")
	_shippingTemplatesFree.Uniqid = field.NewString(tableName, "uniqid")
	_shippingTemplatesFree.Status = field.NewInt64(tableName, "status")
	_shippingTemplatesFree.CreatedAt = field.NewInt64(tableName, "created_at")
	_shippingTemplatesFree.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_shippingTemplatesFree.DeletedAt = field.NewField(tableName, "deleted_at")

	_shippingTemplatesFree.fillFieldMap()

	return _shippingTemplatesFree
}

// shippingTemplatesFree 运费模板包邮
type shippingTemplatesFree struct {
	shippingTemplatesFreeDo shippingTemplatesFreeDo

	ALL       field.Asterisk
	ID        field.Int64  // 编号
	TempID    field.Int64  // 模板ID
	CityID    field.Int64  // 城市ID
	Title     field.String // 描述
	Number    field.Field  // 包邮件数
	Price     field.Field  // 包邮金额
	Type      field.Int64  // 计费方式
	Uniqid    field.String // 分组唯一值
	Status    field.Int64  // 是否无效
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s shippingTemplatesFree) Table(newTableName string) *shippingTemplatesFree {
	s.shippingTemplatesFreeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shippingTemplatesFree) As(alias string) *shippingTemplatesFree {
	s.shippingTemplatesFreeDo.DO = *(s.shippingTemplatesFreeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shippingTemplatesFree) updateTableName(table string) *shippingTemplatesFree {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TempID = field.NewInt64(table, "temp_id")
	s.CityID = field.NewInt64(table, "city_id")
	s.Title = field.NewString(table, "title")
	s.Number = field.NewField(table, "number")
	s.Price = field.NewField(table, "price")
	s.Type = field.NewInt64(table, "type")
	s.Uniqid = field.NewString(table, "uniqid")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *shippingTemplatesFree) WithContext(ctx context.Context) IShippingTemplatesFreeDo {
	return s.shippingTemplatesFreeDo.WithContext(ctx)
}

func (s shippingTemplatesFree) TableName() string { return s.shippingTemplatesFreeDo.TableName() }

func (s shippingTemplatesFree) Alias() string { return s.shippingTemplatesFreeDo.Alias() }

func (s shippingTemplatesFree) Columns(cols ...field.Expr) gen.Columns {
	return s.shippingTemplatesFreeDo.Columns(cols...)
}

func (s *shippingTemplatesFree) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shippingTemplatesFree) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["temp_id"] = s.TempID
	s.fieldMap["city_id"] = s.CityID
	s.fieldMap["title"] = s.Title
	s.fieldMap["number"] = s.Number
	s.fieldMap["price"] = s.Price
	s.fieldMap["type"] = s.Type
	s.fieldMap["uniqid"] = s.Uniqid
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s shippingTemplatesFree) clone(db *gorm.DB) shippingTemplatesFree {
	s.shippingTemplatesFreeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shippingTemplatesFree) replaceDB(db *gorm.DB) shippingTemplatesFree {
	s.shippingTemplatesFreeDo.ReplaceDB(db)
	return s
}

type shippingTemplatesFreeDo struct{ gen.DO }

type IShippingTemplatesFreeDo interface {
	gen.SubQuery
	Debug() IShippingTemplatesFreeDo
	WithContext(ctx context.Context) IShippingTemplatesFreeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShippingTemplatesFreeDo
	WriteDB() IShippingTemplatesFreeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShippingTemplatesFreeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShippingTemplatesFreeDo
	Not(conds ...gen.Condition) IShippingTemplatesFreeDo
	Or(conds ...gen.Condition) IShippingTemplatesFreeDo
	Select(conds ...field.Expr) IShippingTemplatesFreeDo
	Where(conds ...gen.Condition) IShippingTemplatesFreeDo
	Order(conds ...field.Expr) IShippingTemplatesFreeDo
	Distinct(cols ...field.Expr) IShippingTemplatesFreeDo
	Omit(cols ...field.Expr) IShippingTemplatesFreeDo
	Join(table schema.Tabler, on ...field.Expr) IShippingTemplatesFreeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesFreeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesFreeDo
	Group(cols ...field.Expr) IShippingTemplatesFreeDo
	Having(conds ...gen.Condition) IShippingTemplatesFreeDo
	Limit(limit int) IShippingTemplatesFreeDo
	Offset(offset int) IShippingTemplatesFreeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShippingTemplatesFreeDo
	Unscoped() IShippingTemplatesFreeDo
	Create(values ...*model.ShippingTemplatesFree) error
	CreateInBatches(values []*model.ShippingTemplatesFree, batchSize int) error
	Save(values ...*model.ShippingTemplatesFree) error
	First() (*model.ShippingTemplatesFree, error)
	Take() (*model.ShippingTemplatesFree, error)
	Last() (*model.ShippingTemplatesFree, error)
	Find() ([]*model.ShippingTemplatesFree, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingTemplatesFree, err error)
	FindInBatches(result *[]*model.ShippingTemplatesFree, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ShippingTemplatesFree) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShippingTemplatesFreeDo
	Assign(attrs ...field.AssignExpr) IShippingTemplatesFreeDo
	Joins(fields ...field.RelationField) IShippingTemplatesFreeDo
	Preload(fields ...field.RelationField) IShippingTemplatesFreeDo
	FirstOrInit() (*model.ShippingTemplatesFree, error)
	FirstOrCreate() (*model.ShippingTemplatesFree, error)
	FindByPage(offset int, limit int) (result []*model.ShippingTemplatesFree, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShippingTemplatesFreeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shippingTemplatesFreeDo) Debug() IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Debug())
}

func (s shippingTemplatesFreeDo) WithContext(ctx context.Context) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shippingTemplatesFreeDo) ReadDB() IShippingTemplatesFreeDo {
	return s.Clauses(dbresolver.Read)
}

func (s shippingTemplatesFreeDo) WriteDB() IShippingTemplatesFreeDo {
	return s.Clauses(dbresolver.Write)
}

func (s shippingTemplatesFreeDo) Session(config *gorm.Session) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Session(config))
}

func (s shippingTemplatesFreeDo) Clauses(conds ...clause.Expression) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shippingTemplatesFreeDo) Returning(value interface{}, columns ...string) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shippingTemplatesFreeDo) Not(conds ...gen.Condition) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shippingTemplatesFreeDo) Or(conds ...gen.Condition) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shippingTemplatesFreeDo) Select(conds ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shippingTemplatesFreeDo) Where(conds ...gen.Condition) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shippingTemplatesFreeDo) Order(conds ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shippingTemplatesFreeDo) Distinct(cols ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shippingTemplatesFreeDo) Omit(cols ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shippingTemplatesFreeDo) Join(table schema.Tabler, on ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shippingTemplatesFreeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shippingTemplatesFreeDo) RightJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shippingTemplatesFreeDo) Group(cols ...field.Expr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shippingTemplatesFreeDo) Having(conds ...gen.Condition) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shippingTemplatesFreeDo) Limit(limit int) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shippingTemplatesFreeDo) Offset(offset int) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shippingTemplatesFreeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shippingTemplatesFreeDo) Unscoped() IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shippingTemplatesFreeDo) Create(values ...*model.ShippingTemplatesFree) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shippingTemplatesFreeDo) CreateInBatches(values []*model.ShippingTemplatesFree, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shippingTemplatesFreeDo) Save(values ...*model.ShippingTemplatesFree) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shippingTemplatesFreeDo) First() (*model.ShippingTemplatesFree, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplatesFree), nil
	}
}

func (s shippingTemplatesFreeDo) Take() (*model.ShippingTemplatesFree, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplatesFree), nil
	}
}

func (s shippingTemplatesFreeDo) Last() (*model.ShippingTemplatesFree, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplatesFree), nil
	}
}

func (s shippingTemplatesFreeDo) Find() ([]*model.ShippingTemplatesFree, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShippingTemplatesFree), err
}

func (s shippingTemplatesFreeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingTemplatesFree, err error) {
	buf := make([]*model.ShippingTemplatesFree, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shippingTemplatesFreeDo) FindInBatches(result *[]*model.ShippingTemplatesFree, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shippingTemplatesFreeDo) Attrs(attrs ...field.AssignExpr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shippingTemplatesFreeDo) Assign(attrs ...field.AssignExpr) IShippingTemplatesFreeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shippingTemplatesFreeDo) Joins(fields ...field.RelationField) IShippingTemplatesFreeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shippingTemplatesFreeDo) Preload(fields ...field.RelationField) IShippingTemplatesFreeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shippingTemplatesFreeDo) FirstOrInit() (*model.ShippingTemplatesFree, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplatesFree), nil
	}
}

func (s shippingTemplatesFreeDo) FirstOrCreate() (*model.ShippingTemplatesFree, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplatesFree), nil
	}
}

func (s shippingTemplatesFreeDo) FindByPage(offset int, limit int) (result []*model.ShippingTemplatesFree, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shippingTemplatesFreeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shippingTemplatesFreeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shippingTemplatesFreeDo) Delete(models ...*model.ShippingTemplatesFree) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shippingTemplatesFreeDo) withDO(do gen.Dao) *shippingTemplatesFreeDo {
	s.DO = *do.(*gen.DO)
	return s
}
