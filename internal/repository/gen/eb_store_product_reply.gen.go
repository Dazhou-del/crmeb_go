// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreProductReply(db *gorm.DB, opts ...gen.DOOption) ebStoreProductReply {
	_ebStoreProductReply := ebStoreProductReply{}

	_ebStoreProductReply.ebStoreProductReplyDo.UseDB(db, opts...)
	_ebStoreProductReply.ebStoreProductReplyDo.UseModel(&model.EbStoreProductReply{})

	tableName := _ebStoreProductReply.ebStoreProductReplyDo.TableName()
	_ebStoreProductReply.ALL = field.NewAsterisk(tableName)
	_ebStoreProductReply.ID = field.NewInt32(tableName, "id")
	_ebStoreProductReply.UID = field.NewInt32(tableName, "uid")
	_ebStoreProductReply.Oid = field.NewInt32(tableName, "oid")
	_ebStoreProductReply.Unique = field.NewString(tableName, "unique")
	_ebStoreProductReply.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreProductReply.ReplyType = field.NewString(tableName, "reply_type")
	_ebStoreProductReply.ProductScore = field.NewBool(tableName, "product_score")
	_ebStoreProductReply.ServiceScore = field.NewBool(tableName, "service_score")
	_ebStoreProductReply.Comment = field.NewString(tableName, "comment")
	_ebStoreProductReply.Pics = field.NewString(tableName, "pics")
	_ebStoreProductReply.MerchantReplyContent = field.NewString(tableName, "merchant_reply_content")
	_ebStoreProductReply.MerchantReplyTime = field.NewInt32(tableName, "merchant_reply_time")
	_ebStoreProductReply.IsDel = field.NewInt32(tableName, "is_del")
	_ebStoreProductReply.IsReply = field.NewBool(tableName, "is_reply")
	_ebStoreProductReply.Nickname = field.NewString(tableName, "nickname")
	_ebStoreProductReply.Avatar = field.NewString(tableName, "avatar")
	_ebStoreProductReply.CreateTime = field.NewTime(tableName, "create_time")
	_ebStoreProductReply.UpdateTime = field.NewTime(tableName, "update_time")
	_ebStoreProductReply.Sku = field.NewString(tableName, "sku")

	_ebStoreProductReply.fillFieldMap()

	return _ebStoreProductReply
}

// ebStoreProductReply 评论表
type ebStoreProductReply struct {
	ebStoreProductReplyDo ebStoreProductReplyDo

	ALL                  field.Asterisk
	ID                   field.Int32  // 评论ID
	UID                  field.Int32  // 用户ID
	Oid                  field.Int32  // 订单ID
	Unique               field.String // 商品唯一id
	ProductID            field.Int32  // 商品id
	ReplyType            field.String // 某种商品类型(普通商品、秒杀商品）
	ProductScore         field.Bool   // 商品分数
	ServiceScore         field.Bool   // 服务分数
	Comment              field.String // 评论内容
	Pics                 field.String // 评论图片
	MerchantReplyContent field.String // 管理员回复内容
	MerchantReplyTime    field.Int32  // 管理员回复时间
	IsDel                field.Int32  // 0未删除1已删除
	IsReply              field.Bool   // 0未回复1已回复
	Nickname             field.String // 用户名称
	Avatar               field.String // 用户头像
	CreateTime           field.Time   // 创建时间
	UpdateTime           field.Time   // 更新时间
	Sku                  field.String // 商品规格属性值,多个,号隔开

	fieldMap map[string]field.Expr
}

func (e ebStoreProductReply) Table(newTableName string) *ebStoreProductReply {
	e.ebStoreProductReplyDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreProductReply) As(alias string) *ebStoreProductReply {
	e.ebStoreProductReplyDo.DO = *(e.ebStoreProductReplyDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreProductReply) updateTableName(table string) *ebStoreProductReply {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.Oid = field.NewInt32(table, "oid")
	e.Unique = field.NewString(table, "unique")
	e.ProductID = field.NewInt32(table, "product_id")
	e.ReplyType = field.NewString(table, "reply_type")
	e.ProductScore = field.NewBool(table, "product_score")
	e.ServiceScore = field.NewBool(table, "service_score")
	e.Comment = field.NewString(table, "comment")
	e.Pics = field.NewString(table, "pics")
	e.MerchantReplyContent = field.NewString(table, "merchant_reply_content")
	e.MerchantReplyTime = field.NewInt32(table, "merchant_reply_time")
	e.IsDel = field.NewInt32(table, "is_del")
	e.IsReply = field.NewBool(table, "is_reply")
	e.Nickname = field.NewString(table, "nickname")
	e.Avatar = field.NewString(table, "avatar")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.Sku = field.NewString(table, "sku")

	e.fillFieldMap()

	return e
}

func (e *ebStoreProductReply) WithContext(ctx context.Context) IEbStoreProductReplyDo {
	return e.ebStoreProductReplyDo.WithContext(ctx)
}

func (e ebStoreProductReply) TableName() string { return e.ebStoreProductReplyDo.TableName() }

func (e ebStoreProductReply) Alias() string { return e.ebStoreProductReplyDo.Alias() }

func (e ebStoreProductReply) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreProductReplyDo.Columns(cols...)
}

func (e *ebStoreProductReply) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreProductReply) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 19)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["oid"] = e.Oid
	e.fieldMap["unique"] = e.Unique
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["reply_type"] = e.ReplyType
	e.fieldMap["product_score"] = e.ProductScore
	e.fieldMap["service_score"] = e.ServiceScore
	e.fieldMap["comment"] = e.Comment
	e.fieldMap["pics"] = e.Pics
	e.fieldMap["merchant_reply_content"] = e.MerchantReplyContent
	e.fieldMap["merchant_reply_time"] = e.MerchantReplyTime
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["is_reply"] = e.IsReply
	e.fieldMap["nickname"] = e.Nickname
	e.fieldMap["avatar"] = e.Avatar
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["sku"] = e.Sku
}

func (e ebStoreProductReply) clone(db *gorm.DB) ebStoreProductReply {
	e.ebStoreProductReplyDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreProductReply) replaceDB(db *gorm.DB) ebStoreProductReply {
	e.ebStoreProductReplyDo.ReplaceDB(db)
	return e
}

type ebStoreProductReplyDo struct{ gen.DO }

type IEbStoreProductReplyDo interface {
	gen.SubQuery
	Debug() IEbStoreProductReplyDo
	WithContext(ctx context.Context) IEbStoreProductReplyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreProductReplyDo
	WriteDB() IEbStoreProductReplyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreProductReplyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreProductReplyDo
	Not(conds ...gen.Condition) IEbStoreProductReplyDo
	Or(conds ...gen.Condition) IEbStoreProductReplyDo
	Select(conds ...field.Expr) IEbStoreProductReplyDo
	Where(conds ...gen.Condition) IEbStoreProductReplyDo
	Order(conds ...field.Expr) IEbStoreProductReplyDo
	Distinct(cols ...field.Expr) IEbStoreProductReplyDo
	Omit(cols ...field.Expr) IEbStoreProductReplyDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreProductReplyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductReplyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductReplyDo
	Group(cols ...field.Expr) IEbStoreProductReplyDo
	Having(conds ...gen.Condition) IEbStoreProductReplyDo
	Limit(limit int) IEbStoreProductReplyDo
	Offset(offset int) IEbStoreProductReplyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductReplyDo
	Unscoped() IEbStoreProductReplyDo
	Create(values ...*model.EbStoreProductReply) error
	CreateInBatches(values []*model.EbStoreProductReply, batchSize int) error
	Save(values ...*model.EbStoreProductReply) error
	First() (*model.EbStoreProductReply, error)
	Take() (*model.EbStoreProductReply, error)
	Last() (*model.EbStoreProductReply, error)
	Find() ([]*model.EbStoreProductReply, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductReply, err error)
	FindInBatches(result *[]*model.EbStoreProductReply, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreProductReply) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreProductReplyDo
	Assign(attrs ...field.AssignExpr) IEbStoreProductReplyDo
	Joins(fields ...field.RelationField) IEbStoreProductReplyDo
	Preload(fields ...field.RelationField) IEbStoreProductReplyDo
	FirstOrInit() (*model.EbStoreProductReply, error)
	FirstOrCreate() (*model.EbStoreProductReply, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreProductReply, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreProductReplyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreProductReplyDo) Debug() IEbStoreProductReplyDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreProductReplyDo) WithContext(ctx context.Context) IEbStoreProductReplyDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreProductReplyDo) ReadDB() IEbStoreProductReplyDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreProductReplyDo) WriteDB() IEbStoreProductReplyDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreProductReplyDo) Session(config *gorm.Session) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreProductReplyDo) Clauses(conds ...clause.Expression) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreProductReplyDo) Returning(value interface{}, columns ...string) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreProductReplyDo) Not(conds ...gen.Condition) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreProductReplyDo) Or(conds ...gen.Condition) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreProductReplyDo) Select(conds ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreProductReplyDo) Where(conds ...gen.Condition) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreProductReplyDo) Order(conds ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreProductReplyDo) Distinct(cols ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreProductReplyDo) Omit(cols ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreProductReplyDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreProductReplyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreProductReplyDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreProductReplyDo) Group(cols ...field.Expr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreProductReplyDo) Having(conds ...gen.Condition) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreProductReplyDo) Limit(limit int) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreProductReplyDo) Offset(offset int) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreProductReplyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreProductReplyDo) Unscoped() IEbStoreProductReplyDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreProductReplyDo) Create(values ...*model.EbStoreProductReply) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreProductReplyDo) CreateInBatches(values []*model.EbStoreProductReply, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreProductReplyDo) Save(values ...*model.EbStoreProductReply) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreProductReplyDo) First() (*model.EbStoreProductReply, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductReply), nil
	}
}

func (e ebStoreProductReplyDo) Take() (*model.EbStoreProductReply, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductReply), nil
	}
}

func (e ebStoreProductReplyDo) Last() (*model.EbStoreProductReply, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductReply), nil
	}
}

func (e ebStoreProductReplyDo) Find() ([]*model.EbStoreProductReply, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreProductReply), err
}

func (e ebStoreProductReplyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductReply, err error) {
	buf := make([]*model.EbStoreProductReply, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreProductReplyDo) FindInBatches(result *[]*model.EbStoreProductReply, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreProductReplyDo) Attrs(attrs ...field.AssignExpr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreProductReplyDo) Assign(attrs ...field.AssignExpr) IEbStoreProductReplyDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreProductReplyDo) Joins(fields ...field.RelationField) IEbStoreProductReplyDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreProductReplyDo) Preload(fields ...field.RelationField) IEbStoreProductReplyDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreProductReplyDo) FirstOrInit() (*model.EbStoreProductReply, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductReply), nil
	}
}

func (e ebStoreProductReplyDo) FirstOrCreate() (*model.EbStoreProductReply, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductReply), nil
	}
}

func (e ebStoreProductReplyDo) FindByPage(offset int, limit int) (result []*model.EbStoreProductReply, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreProductReplyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreProductReplyDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreProductReplyDo) Delete(models ...*model.EbStoreProductReply) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreProductReplyDo) withDO(do gen.Dao) *ebStoreProductReplyDo {
	e.DO = *do.(*gen.DO)
	return e
}
