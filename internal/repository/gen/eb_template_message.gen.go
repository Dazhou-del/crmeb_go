// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbTemplateMessage(db *gorm.DB, opts ...gen.DOOption) ebTemplateMessage {
	_ebTemplateMessage := ebTemplateMessage{}

	_ebTemplateMessage.ebTemplateMessageDo.UseDB(db, opts...)
	_ebTemplateMessage.ebTemplateMessageDo.UseModel(&model.EbTemplateMessage{})

	tableName := _ebTemplateMessage.ebTemplateMessageDo.TableName()
	_ebTemplateMessage.ALL = field.NewAsterisk(tableName)
	_ebTemplateMessage.ID = field.NewInt32(tableName, "id")
	_ebTemplateMessage.Type = field.NewBool(tableName, "type")
	_ebTemplateMessage.TempKey = field.NewString(tableName, "temp_key")
	_ebTemplateMessage.Name = field.NewString(tableName, "name")
	_ebTemplateMessage.Content = field.NewString(tableName, "content")
	_ebTemplateMessage.TempID = field.NewString(tableName, "temp_id")
	_ebTemplateMessage.Status = field.NewInt32(tableName, "status")
	_ebTemplateMessage.CreateTime = field.NewTime(tableName, "create_time")
	_ebTemplateMessage.UpdateTime = field.NewTime(tableName, "update_time")

	_ebTemplateMessage.fillFieldMap()

	return _ebTemplateMessage
}

// ebTemplateMessage 微信模板
type ebTemplateMessage struct {
	ebTemplateMessageDo ebTemplateMessageDo

	ALL        field.Asterisk
	ID         field.Int32  // 模板id
	Type       field.Bool   // 0=订阅消息,1=微信模板消息
	TempKey    field.String // 模板编号
	Name       field.String // 模板名
	Content    field.String // 回复内容
	TempID     field.String // 模板ID
	Status     field.Int32  // 状态
	CreateTime field.Time   // 添加时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebTemplateMessage) Table(newTableName string) *ebTemplateMessage {
	e.ebTemplateMessageDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebTemplateMessage) As(alias string) *ebTemplateMessage {
	e.ebTemplateMessageDo.DO = *(e.ebTemplateMessageDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebTemplateMessage) updateTableName(table string) *ebTemplateMessage {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Type = field.NewBool(table, "type")
	e.TempKey = field.NewString(table, "temp_key")
	e.Name = field.NewString(table, "name")
	e.Content = field.NewString(table, "content")
	e.TempID = field.NewString(table, "temp_id")
	e.Status = field.NewInt32(table, "status")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebTemplateMessage) WithContext(ctx context.Context) IEbTemplateMessageDo {
	return e.ebTemplateMessageDo.WithContext(ctx)
}

func (e ebTemplateMessage) TableName() string { return e.ebTemplateMessageDo.TableName() }

func (e ebTemplateMessage) Alias() string { return e.ebTemplateMessageDo.Alias() }

func (e ebTemplateMessage) Columns(cols ...field.Expr) gen.Columns {
	return e.ebTemplateMessageDo.Columns(cols...)
}

func (e *ebTemplateMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebTemplateMessage) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["type"] = e.Type
	e.fieldMap["temp_key"] = e.TempKey
	e.fieldMap["name"] = e.Name
	e.fieldMap["content"] = e.Content
	e.fieldMap["temp_id"] = e.TempID
	e.fieldMap["status"] = e.Status
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebTemplateMessage) clone(db *gorm.DB) ebTemplateMessage {
	e.ebTemplateMessageDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebTemplateMessage) replaceDB(db *gorm.DB) ebTemplateMessage {
	e.ebTemplateMessageDo.ReplaceDB(db)
	return e
}

type ebTemplateMessageDo struct{ gen.DO }

type IEbTemplateMessageDo interface {
	gen.SubQuery
	Debug() IEbTemplateMessageDo
	WithContext(ctx context.Context) IEbTemplateMessageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbTemplateMessageDo
	WriteDB() IEbTemplateMessageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbTemplateMessageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbTemplateMessageDo
	Not(conds ...gen.Condition) IEbTemplateMessageDo
	Or(conds ...gen.Condition) IEbTemplateMessageDo
	Select(conds ...field.Expr) IEbTemplateMessageDo
	Where(conds ...gen.Condition) IEbTemplateMessageDo
	Order(conds ...field.Expr) IEbTemplateMessageDo
	Distinct(cols ...field.Expr) IEbTemplateMessageDo
	Omit(cols ...field.Expr) IEbTemplateMessageDo
	Join(table schema.Tabler, on ...field.Expr) IEbTemplateMessageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbTemplateMessageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbTemplateMessageDo
	Group(cols ...field.Expr) IEbTemplateMessageDo
	Having(conds ...gen.Condition) IEbTemplateMessageDo
	Limit(limit int) IEbTemplateMessageDo
	Offset(offset int) IEbTemplateMessageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbTemplateMessageDo
	Unscoped() IEbTemplateMessageDo
	Create(values ...*model.EbTemplateMessage) error
	CreateInBatches(values []*model.EbTemplateMessage, batchSize int) error
	Save(values ...*model.EbTemplateMessage) error
	First() (*model.EbTemplateMessage, error)
	Take() (*model.EbTemplateMessage, error)
	Last() (*model.EbTemplateMessage, error)
	Find() ([]*model.EbTemplateMessage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbTemplateMessage, err error)
	FindInBatches(result *[]*model.EbTemplateMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbTemplateMessage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbTemplateMessageDo
	Assign(attrs ...field.AssignExpr) IEbTemplateMessageDo
	Joins(fields ...field.RelationField) IEbTemplateMessageDo
	Preload(fields ...field.RelationField) IEbTemplateMessageDo
	FirstOrInit() (*model.EbTemplateMessage, error)
	FirstOrCreate() (*model.EbTemplateMessage, error)
	FindByPage(offset int, limit int) (result []*model.EbTemplateMessage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbTemplateMessageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebTemplateMessageDo) Debug() IEbTemplateMessageDo {
	return e.withDO(e.DO.Debug())
}

func (e ebTemplateMessageDo) WithContext(ctx context.Context) IEbTemplateMessageDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebTemplateMessageDo) ReadDB() IEbTemplateMessageDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebTemplateMessageDo) WriteDB() IEbTemplateMessageDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebTemplateMessageDo) Session(config *gorm.Session) IEbTemplateMessageDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebTemplateMessageDo) Clauses(conds ...clause.Expression) IEbTemplateMessageDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebTemplateMessageDo) Returning(value interface{}, columns ...string) IEbTemplateMessageDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebTemplateMessageDo) Not(conds ...gen.Condition) IEbTemplateMessageDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebTemplateMessageDo) Or(conds ...gen.Condition) IEbTemplateMessageDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebTemplateMessageDo) Select(conds ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebTemplateMessageDo) Where(conds ...gen.Condition) IEbTemplateMessageDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebTemplateMessageDo) Order(conds ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebTemplateMessageDo) Distinct(cols ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebTemplateMessageDo) Omit(cols ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebTemplateMessageDo) Join(table schema.Tabler, on ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebTemplateMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebTemplateMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebTemplateMessageDo) Group(cols ...field.Expr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebTemplateMessageDo) Having(conds ...gen.Condition) IEbTemplateMessageDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebTemplateMessageDo) Limit(limit int) IEbTemplateMessageDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebTemplateMessageDo) Offset(offset int) IEbTemplateMessageDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebTemplateMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbTemplateMessageDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebTemplateMessageDo) Unscoped() IEbTemplateMessageDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebTemplateMessageDo) Create(values ...*model.EbTemplateMessage) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebTemplateMessageDo) CreateInBatches(values []*model.EbTemplateMessage, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebTemplateMessageDo) Save(values ...*model.EbTemplateMessage) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebTemplateMessageDo) First() (*model.EbTemplateMessage, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbTemplateMessage), nil
	}
}

func (e ebTemplateMessageDo) Take() (*model.EbTemplateMessage, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbTemplateMessage), nil
	}
}

func (e ebTemplateMessageDo) Last() (*model.EbTemplateMessage, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbTemplateMessage), nil
	}
}

func (e ebTemplateMessageDo) Find() ([]*model.EbTemplateMessage, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbTemplateMessage), err
}

func (e ebTemplateMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbTemplateMessage, err error) {
	buf := make([]*model.EbTemplateMessage, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebTemplateMessageDo) FindInBatches(result *[]*model.EbTemplateMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebTemplateMessageDo) Attrs(attrs ...field.AssignExpr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebTemplateMessageDo) Assign(attrs ...field.AssignExpr) IEbTemplateMessageDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebTemplateMessageDo) Joins(fields ...field.RelationField) IEbTemplateMessageDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebTemplateMessageDo) Preload(fields ...field.RelationField) IEbTemplateMessageDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebTemplateMessageDo) FirstOrInit() (*model.EbTemplateMessage, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbTemplateMessage), nil
	}
}

func (e ebTemplateMessageDo) FirstOrCreate() (*model.EbTemplateMessage, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbTemplateMessage), nil
	}
}

func (e ebTemplateMessageDo) FindByPage(offset int, limit int) (result []*model.EbTemplateMessage, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebTemplateMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebTemplateMessageDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebTemplateMessageDo) Delete(models ...*model.EbTemplateMessage) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebTemplateMessageDo) withDO(do gen.Dao) *ebTemplateMessageDo {
	e.DO = *do.(*gen.DO)
	return e
}
