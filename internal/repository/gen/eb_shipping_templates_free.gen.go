// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbShippingTemplatesFree(db *gorm.DB, opts ...gen.DOOption) ebShippingTemplatesFree {
	_ebShippingTemplatesFree := ebShippingTemplatesFree{}

	_ebShippingTemplatesFree.ebShippingTemplatesFreeDo.UseDB(db, opts...)
	_ebShippingTemplatesFree.ebShippingTemplatesFreeDo.UseModel(&model.EbShippingTemplatesFree{})

	tableName := _ebShippingTemplatesFree.ebShippingTemplatesFreeDo.TableName()
	_ebShippingTemplatesFree.ALL = field.NewAsterisk(tableName)
	_ebShippingTemplatesFree.ID = field.NewInt32(tableName, "id")
	_ebShippingTemplatesFree.TempID = field.NewInt32(tableName, "temp_id")
	_ebShippingTemplatesFree.CityID = field.NewInt32(tableName, "city_id")
	_ebShippingTemplatesFree.Title = field.NewString(tableName, "title")
	_ebShippingTemplatesFree.Number = field.NewFloat64(tableName, "number")
	_ebShippingTemplatesFree.Price = field.NewFloat64(tableName, "price")
	_ebShippingTemplatesFree.Type = field.NewBool(tableName, "type")
	_ebShippingTemplatesFree.Uniqid = field.NewString(tableName, "uniqid")
	_ebShippingTemplatesFree.Status = field.NewBool(tableName, "status")
	_ebShippingTemplatesFree.CreateTime = field.NewTime(tableName, "create_time")
	_ebShippingTemplatesFree.UpdateTime = field.NewTime(tableName, "update_time")

	_ebShippingTemplatesFree.fillFieldMap()

	return _ebShippingTemplatesFree
}

// ebShippingTemplatesFree 运费模板包邮
type ebShippingTemplatesFree struct {
	ebShippingTemplatesFreeDo ebShippingTemplatesFreeDo

	ALL        field.Asterisk
	ID         field.Int32   // 编号
	TempID     field.Int32   // 模板ID
	CityID     field.Int32   // 城市ID
	Title      field.String  // 描述
	Number     field.Float64 // 包邮件数
	Price      field.Float64 // 包邮金额
	Type       field.Bool    // 计费方式
	Uniqid     field.String  // 分组唯一值
	Status     field.Bool    // 是否无效
	CreateTime field.Time    // 创建时间
	UpdateTime field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebShippingTemplatesFree) Table(newTableName string) *ebShippingTemplatesFree {
	e.ebShippingTemplatesFreeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebShippingTemplatesFree) As(alias string) *ebShippingTemplatesFree {
	e.ebShippingTemplatesFreeDo.DO = *(e.ebShippingTemplatesFreeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebShippingTemplatesFree) updateTableName(table string) *ebShippingTemplatesFree {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.TempID = field.NewInt32(table, "temp_id")
	e.CityID = field.NewInt32(table, "city_id")
	e.Title = field.NewString(table, "title")
	e.Number = field.NewFloat64(table, "number")
	e.Price = field.NewFloat64(table, "price")
	e.Type = field.NewBool(table, "type")
	e.Uniqid = field.NewString(table, "uniqid")
	e.Status = field.NewBool(table, "status")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebShippingTemplatesFree) WithContext(ctx context.Context) IEbShippingTemplatesFreeDo {
	return e.ebShippingTemplatesFreeDo.WithContext(ctx)
}

func (e ebShippingTemplatesFree) TableName() string { return e.ebShippingTemplatesFreeDo.TableName() }

func (e ebShippingTemplatesFree) Alias() string { return e.ebShippingTemplatesFreeDo.Alias() }

func (e ebShippingTemplatesFree) Columns(cols ...field.Expr) gen.Columns {
	return e.ebShippingTemplatesFreeDo.Columns(cols...)
}

func (e *ebShippingTemplatesFree) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebShippingTemplatesFree) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["temp_id"] = e.TempID
	e.fieldMap["city_id"] = e.CityID
	e.fieldMap["title"] = e.Title
	e.fieldMap["number"] = e.Number
	e.fieldMap["price"] = e.Price
	e.fieldMap["type"] = e.Type
	e.fieldMap["uniqid"] = e.Uniqid
	e.fieldMap["status"] = e.Status
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebShippingTemplatesFree) clone(db *gorm.DB) ebShippingTemplatesFree {
	e.ebShippingTemplatesFreeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebShippingTemplatesFree) replaceDB(db *gorm.DB) ebShippingTemplatesFree {
	e.ebShippingTemplatesFreeDo.ReplaceDB(db)
	return e
}

type ebShippingTemplatesFreeDo struct{ gen.DO }

type IEbShippingTemplatesFreeDo interface {
	gen.SubQuery
	Debug() IEbShippingTemplatesFreeDo
	WithContext(ctx context.Context) IEbShippingTemplatesFreeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbShippingTemplatesFreeDo
	WriteDB() IEbShippingTemplatesFreeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbShippingTemplatesFreeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbShippingTemplatesFreeDo
	Not(conds ...gen.Condition) IEbShippingTemplatesFreeDo
	Or(conds ...gen.Condition) IEbShippingTemplatesFreeDo
	Select(conds ...field.Expr) IEbShippingTemplatesFreeDo
	Where(conds ...gen.Condition) IEbShippingTemplatesFreeDo
	Order(conds ...field.Expr) IEbShippingTemplatesFreeDo
	Distinct(cols ...field.Expr) IEbShippingTemplatesFreeDo
	Omit(cols ...field.Expr) IEbShippingTemplatesFreeDo
	Join(table schema.Tabler, on ...field.Expr) IEbShippingTemplatesFreeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplatesFreeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplatesFreeDo
	Group(cols ...field.Expr) IEbShippingTemplatesFreeDo
	Having(conds ...gen.Condition) IEbShippingTemplatesFreeDo
	Limit(limit int) IEbShippingTemplatesFreeDo
	Offset(offset int) IEbShippingTemplatesFreeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbShippingTemplatesFreeDo
	Unscoped() IEbShippingTemplatesFreeDo
	Create(values ...*model.EbShippingTemplatesFree) error
	CreateInBatches(values []*model.EbShippingTemplatesFree, batchSize int) error
	Save(values ...*model.EbShippingTemplatesFree) error
	First() (*model.EbShippingTemplatesFree, error)
	Take() (*model.EbShippingTemplatesFree, error)
	Last() (*model.EbShippingTemplatesFree, error)
	Find() ([]*model.EbShippingTemplatesFree, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbShippingTemplatesFree, err error)
	FindInBatches(result *[]*model.EbShippingTemplatesFree, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbShippingTemplatesFree) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbShippingTemplatesFreeDo
	Assign(attrs ...field.AssignExpr) IEbShippingTemplatesFreeDo
	Joins(fields ...field.RelationField) IEbShippingTemplatesFreeDo
	Preload(fields ...field.RelationField) IEbShippingTemplatesFreeDo
	FirstOrInit() (*model.EbShippingTemplatesFree, error)
	FirstOrCreate() (*model.EbShippingTemplatesFree, error)
	FindByPage(offset int, limit int) (result []*model.EbShippingTemplatesFree, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbShippingTemplatesFreeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebShippingTemplatesFreeDo) Debug() IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Debug())
}

func (e ebShippingTemplatesFreeDo) WithContext(ctx context.Context) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebShippingTemplatesFreeDo) ReadDB() IEbShippingTemplatesFreeDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebShippingTemplatesFreeDo) WriteDB() IEbShippingTemplatesFreeDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebShippingTemplatesFreeDo) Session(config *gorm.Session) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebShippingTemplatesFreeDo) Clauses(conds ...clause.Expression) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebShippingTemplatesFreeDo) Returning(value interface{}, columns ...string) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebShippingTemplatesFreeDo) Not(conds ...gen.Condition) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebShippingTemplatesFreeDo) Or(conds ...gen.Condition) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebShippingTemplatesFreeDo) Select(conds ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebShippingTemplatesFreeDo) Where(conds ...gen.Condition) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebShippingTemplatesFreeDo) Order(conds ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebShippingTemplatesFreeDo) Distinct(cols ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebShippingTemplatesFreeDo) Omit(cols ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebShippingTemplatesFreeDo) Join(table schema.Tabler, on ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebShippingTemplatesFreeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebShippingTemplatesFreeDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebShippingTemplatesFreeDo) Group(cols ...field.Expr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebShippingTemplatesFreeDo) Having(conds ...gen.Condition) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebShippingTemplatesFreeDo) Limit(limit int) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebShippingTemplatesFreeDo) Offset(offset int) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebShippingTemplatesFreeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebShippingTemplatesFreeDo) Unscoped() IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebShippingTemplatesFreeDo) Create(values ...*model.EbShippingTemplatesFree) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebShippingTemplatesFreeDo) CreateInBatches(values []*model.EbShippingTemplatesFree, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebShippingTemplatesFreeDo) Save(values ...*model.EbShippingTemplatesFree) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebShippingTemplatesFreeDo) First() (*model.EbShippingTemplatesFree, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplatesFree), nil
	}
}

func (e ebShippingTemplatesFreeDo) Take() (*model.EbShippingTemplatesFree, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplatesFree), nil
	}
}

func (e ebShippingTemplatesFreeDo) Last() (*model.EbShippingTemplatesFree, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplatesFree), nil
	}
}

func (e ebShippingTemplatesFreeDo) Find() ([]*model.EbShippingTemplatesFree, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbShippingTemplatesFree), err
}

func (e ebShippingTemplatesFreeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbShippingTemplatesFree, err error) {
	buf := make([]*model.EbShippingTemplatesFree, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebShippingTemplatesFreeDo) FindInBatches(result *[]*model.EbShippingTemplatesFree, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebShippingTemplatesFreeDo) Attrs(attrs ...field.AssignExpr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebShippingTemplatesFreeDo) Assign(attrs ...field.AssignExpr) IEbShippingTemplatesFreeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebShippingTemplatesFreeDo) Joins(fields ...field.RelationField) IEbShippingTemplatesFreeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebShippingTemplatesFreeDo) Preload(fields ...field.RelationField) IEbShippingTemplatesFreeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebShippingTemplatesFreeDo) FirstOrInit() (*model.EbShippingTemplatesFree, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplatesFree), nil
	}
}

func (e ebShippingTemplatesFreeDo) FirstOrCreate() (*model.EbShippingTemplatesFree, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplatesFree), nil
	}
}

func (e ebShippingTemplatesFreeDo) FindByPage(offset int, limit int) (result []*model.EbShippingTemplatesFree, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebShippingTemplatesFreeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebShippingTemplatesFreeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebShippingTemplatesFreeDo) Delete(models ...*model.EbShippingTemplatesFree) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebShippingTemplatesFreeDo) withDO(do gen.Dao) *ebShippingTemplatesFreeDo {
	e.DO = *do.(*gen.DO)
	return e
}
