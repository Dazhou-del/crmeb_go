// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemUserLevel(db *gorm.DB, opts ...gen.DOOption) ebSystemUserLevel {
	_ebSystemUserLevel := ebSystemUserLevel{}

	_ebSystemUserLevel.ebSystemUserLevelDo.UseDB(db, opts...)
	_ebSystemUserLevel.ebSystemUserLevelDo.UseModel(&model.EbSystemUserLevel{})

	tableName := _ebSystemUserLevel.ebSystemUserLevelDo.TableName()
	_ebSystemUserLevel.ALL = field.NewAsterisk(tableName)
	_ebSystemUserLevel.ID = field.NewInt32(tableName, "id")
	_ebSystemUserLevel.Name = field.NewString(tableName, "name")
	_ebSystemUserLevel.Experience = field.NewInt32(tableName, "experience")
	_ebSystemUserLevel.IsShow = field.NewBool(tableName, "is_show")
	_ebSystemUserLevel.Grade = field.NewInt32(tableName, "grade")
	_ebSystemUserLevel.Discount = field.NewInt32(tableName, "discount")
	_ebSystemUserLevel.Icon = field.NewString(tableName, "icon")
	_ebSystemUserLevel.IsDel = field.NewBool(tableName, "is_del")
	_ebSystemUserLevel.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemUserLevel.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemUserLevel.fillFieldMap()

	return _ebSystemUserLevel
}

// ebSystemUserLevel 普通会员等级
type ebSystemUserLevel struct {
	ebSystemUserLevelDo ebSystemUserLevelDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String // 会员名称
	Experience field.Int32  // 达到多少升级经验
	IsShow     field.Bool   // 是否显示 1=显示,0=隐藏
	Grade      field.Int32  // 会员等级
	Discount   field.Int32  // 享受折扣
	Icon       field.String // 会员图标
	IsDel      field.Bool   // 是否删除.1=删除,0=未删除
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemUserLevel) Table(newTableName string) *ebSystemUserLevel {
	e.ebSystemUserLevelDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemUserLevel) As(alias string) *ebSystemUserLevel {
	e.ebSystemUserLevelDo.DO = *(e.ebSystemUserLevelDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemUserLevel) updateTableName(table string) *ebSystemUserLevel {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Experience = field.NewInt32(table, "experience")
	e.IsShow = field.NewBool(table, "is_show")
	e.Grade = field.NewInt32(table, "grade")
	e.Discount = field.NewInt32(table, "discount")
	e.Icon = field.NewString(table, "icon")
	e.IsDel = field.NewBool(table, "is_del")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemUserLevel) WithContext(ctx context.Context) IEbSystemUserLevelDo {
	return e.ebSystemUserLevelDo.WithContext(ctx)
}

func (e ebSystemUserLevel) TableName() string { return e.ebSystemUserLevelDo.TableName() }

func (e ebSystemUserLevel) Alias() string { return e.ebSystemUserLevelDo.Alias() }

func (e ebSystemUserLevel) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemUserLevelDo.Columns(cols...)
}

func (e *ebSystemUserLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemUserLevel) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["experience"] = e.Experience
	e.fieldMap["is_show"] = e.IsShow
	e.fieldMap["grade"] = e.Grade
	e.fieldMap["discount"] = e.Discount
	e.fieldMap["icon"] = e.Icon
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemUserLevel) clone(db *gorm.DB) ebSystemUserLevel {
	e.ebSystemUserLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemUserLevel) replaceDB(db *gorm.DB) ebSystemUserLevel {
	e.ebSystemUserLevelDo.ReplaceDB(db)
	return e
}

type ebSystemUserLevelDo struct{ gen.DO }

type IEbSystemUserLevelDo interface {
	gen.SubQuery
	Debug() IEbSystemUserLevelDo
	WithContext(ctx context.Context) IEbSystemUserLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemUserLevelDo
	WriteDB() IEbSystemUserLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemUserLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemUserLevelDo
	Not(conds ...gen.Condition) IEbSystemUserLevelDo
	Or(conds ...gen.Condition) IEbSystemUserLevelDo
	Select(conds ...field.Expr) IEbSystemUserLevelDo
	Where(conds ...gen.Condition) IEbSystemUserLevelDo
	Order(conds ...field.Expr) IEbSystemUserLevelDo
	Distinct(cols ...field.Expr) IEbSystemUserLevelDo
	Omit(cols ...field.Expr) IEbSystemUserLevelDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemUserLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemUserLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemUserLevelDo
	Group(cols ...field.Expr) IEbSystemUserLevelDo
	Having(conds ...gen.Condition) IEbSystemUserLevelDo
	Limit(limit int) IEbSystemUserLevelDo
	Offset(offset int) IEbSystemUserLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemUserLevelDo
	Unscoped() IEbSystemUserLevelDo
	Create(values ...*model.EbSystemUserLevel) error
	CreateInBatches(values []*model.EbSystemUserLevel, batchSize int) error
	Save(values ...*model.EbSystemUserLevel) error
	First() (*model.EbSystemUserLevel, error)
	Take() (*model.EbSystemUserLevel, error)
	Last() (*model.EbSystemUserLevel, error)
	Find() ([]*model.EbSystemUserLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemUserLevel, err error)
	FindInBatches(result *[]*model.EbSystemUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemUserLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemUserLevelDo
	Assign(attrs ...field.AssignExpr) IEbSystemUserLevelDo
	Joins(fields ...field.RelationField) IEbSystemUserLevelDo
	Preload(fields ...field.RelationField) IEbSystemUserLevelDo
	FirstOrInit() (*model.EbSystemUserLevel, error)
	FirstOrCreate() (*model.EbSystemUserLevel, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemUserLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemUserLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemUserLevelDo) Debug() IEbSystemUserLevelDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemUserLevelDo) WithContext(ctx context.Context) IEbSystemUserLevelDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemUserLevelDo) ReadDB() IEbSystemUserLevelDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemUserLevelDo) WriteDB() IEbSystemUserLevelDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemUserLevelDo) Session(config *gorm.Session) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemUserLevelDo) Clauses(conds ...clause.Expression) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemUserLevelDo) Returning(value interface{}, columns ...string) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemUserLevelDo) Not(conds ...gen.Condition) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemUserLevelDo) Or(conds ...gen.Condition) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemUserLevelDo) Select(conds ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemUserLevelDo) Where(conds ...gen.Condition) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemUserLevelDo) Order(conds ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemUserLevelDo) Distinct(cols ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemUserLevelDo) Omit(cols ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemUserLevelDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemUserLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemUserLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemUserLevelDo) Group(cols ...field.Expr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemUserLevelDo) Having(conds ...gen.Condition) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemUserLevelDo) Limit(limit int) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemUserLevelDo) Offset(offset int) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemUserLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemUserLevelDo) Unscoped() IEbSystemUserLevelDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemUserLevelDo) Create(values ...*model.EbSystemUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemUserLevelDo) CreateInBatches(values []*model.EbSystemUserLevel, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemUserLevelDo) Save(values ...*model.EbSystemUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemUserLevelDo) First() (*model.EbSystemUserLevel, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemUserLevel), nil
	}
}

func (e ebSystemUserLevelDo) Take() (*model.EbSystemUserLevel, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemUserLevel), nil
	}
}

func (e ebSystemUserLevelDo) Last() (*model.EbSystemUserLevel, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemUserLevel), nil
	}
}

func (e ebSystemUserLevelDo) Find() ([]*model.EbSystemUserLevel, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemUserLevel), err
}

func (e ebSystemUserLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemUserLevel, err error) {
	buf := make([]*model.EbSystemUserLevel, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemUserLevelDo) FindInBatches(result *[]*model.EbSystemUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemUserLevelDo) Attrs(attrs ...field.AssignExpr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemUserLevelDo) Assign(attrs ...field.AssignExpr) IEbSystemUserLevelDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemUserLevelDo) Joins(fields ...field.RelationField) IEbSystemUserLevelDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemUserLevelDo) Preload(fields ...field.RelationField) IEbSystemUserLevelDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemUserLevelDo) FirstOrInit() (*model.EbSystemUserLevel, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemUserLevel), nil
	}
}

func (e ebSystemUserLevelDo) FirstOrCreate() (*model.EbSystemUserLevel, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemUserLevel), nil
	}
}

func (e ebSystemUserLevelDo) FindByPage(offset int, limit int) (result []*model.EbSystemUserLevel, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemUserLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemUserLevelDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemUserLevelDo) Delete(models ...*model.EbSystemUserLevel) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemUserLevelDo) withDO(do gen.Dao) *ebSystemUserLevelDo {
	e.DO = *do.(*gen.DO)
	return e
}
