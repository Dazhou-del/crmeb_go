// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newStoreOrderStatus(db *gorm.DB, opts ...gen.DOOption) storeOrderStatus {
	_storeOrderStatus := storeOrderStatus{}

	_storeOrderStatus.storeOrderStatusDo.UseDB(db, opts...)
	_storeOrderStatus.storeOrderStatusDo.UseModel(&model.StoreOrderStatus{})

	tableName := _storeOrderStatus.storeOrderStatusDo.TableName()
	_storeOrderStatus.ALL = field.NewAsterisk(tableName)
	_storeOrderStatus.Oid = field.NewInt64(tableName, "oid")
	_storeOrderStatus.ChangeType = field.NewString(tableName, "change_type")
	_storeOrderStatus.ChangeMessage = field.NewString(tableName, "change_message")
	_storeOrderStatus.CreatedAt = field.NewInt64(tableName, "created_at")
	_storeOrderStatus.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_storeOrderStatus.DeletedAt = field.NewField(tableName, "deleted_at")

	_storeOrderStatus.fillFieldMap()

	return _storeOrderStatus
}

// storeOrderStatus 订单操作记录表
type storeOrderStatus struct {
	storeOrderStatusDo storeOrderStatusDo

	ALL           field.Asterisk
	Oid           field.Int64  // 订单id
	ChangeType    field.String // 操作类型
	ChangeMessage field.String // 操作备注
	CreatedAt     field.Int64  // 创建时间
	UpdatedAt     field.Int64  // 修改时间
	DeletedAt     field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s storeOrderStatus) Table(newTableName string) *storeOrderStatus {
	s.storeOrderStatusDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storeOrderStatus) As(alias string) *storeOrderStatus {
	s.storeOrderStatusDo.DO = *(s.storeOrderStatusDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storeOrderStatus) updateTableName(table string) *storeOrderStatus {
	s.ALL = field.NewAsterisk(table)
	s.Oid = field.NewInt64(table, "oid")
	s.ChangeType = field.NewString(table, "change_type")
	s.ChangeMessage = field.NewString(table, "change_message")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *storeOrderStatus) WithContext(ctx context.Context) IStoreOrderStatusDo {
	return s.storeOrderStatusDo.WithContext(ctx)
}

func (s storeOrderStatus) TableName() string { return s.storeOrderStatusDo.TableName() }

func (s storeOrderStatus) Alias() string { return s.storeOrderStatusDo.Alias() }

func (s storeOrderStatus) Columns(cols ...field.Expr) gen.Columns {
	return s.storeOrderStatusDo.Columns(cols...)
}

func (s *storeOrderStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storeOrderStatus) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["oid"] = s.Oid
	s.fieldMap["change_type"] = s.ChangeType
	s.fieldMap["change_message"] = s.ChangeMessage
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s storeOrderStatus) clone(db *gorm.DB) storeOrderStatus {
	s.storeOrderStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storeOrderStatus) replaceDB(db *gorm.DB) storeOrderStatus {
	s.storeOrderStatusDo.ReplaceDB(db)
	return s
}

type storeOrderStatusDo struct{ gen.DO }

type IStoreOrderStatusDo interface {
	gen.SubQuery
	Debug() IStoreOrderStatusDo
	WithContext(ctx context.Context) IStoreOrderStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreOrderStatusDo
	WriteDB() IStoreOrderStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreOrderStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreOrderStatusDo
	Not(conds ...gen.Condition) IStoreOrderStatusDo
	Or(conds ...gen.Condition) IStoreOrderStatusDo
	Select(conds ...field.Expr) IStoreOrderStatusDo
	Where(conds ...gen.Condition) IStoreOrderStatusDo
	Order(conds ...field.Expr) IStoreOrderStatusDo
	Distinct(cols ...field.Expr) IStoreOrderStatusDo
	Omit(cols ...field.Expr) IStoreOrderStatusDo
	Join(table schema.Tabler, on ...field.Expr) IStoreOrderStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreOrderStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreOrderStatusDo
	Group(cols ...field.Expr) IStoreOrderStatusDo
	Having(conds ...gen.Condition) IStoreOrderStatusDo
	Limit(limit int) IStoreOrderStatusDo
	Offset(offset int) IStoreOrderStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreOrderStatusDo
	Unscoped() IStoreOrderStatusDo
	Create(values ...*model.StoreOrderStatus) error
	CreateInBatches(values []*model.StoreOrderStatus, batchSize int) error
	Save(values ...*model.StoreOrderStatus) error
	First() (*model.StoreOrderStatus, error)
	Take() (*model.StoreOrderStatus, error)
	Last() (*model.StoreOrderStatus, error)
	Find() ([]*model.StoreOrderStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreOrderStatus, err error)
	FindInBatches(result *[]*model.StoreOrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StoreOrderStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreOrderStatusDo
	Assign(attrs ...field.AssignExpr) IStoreOrderStatusDo
	Joins(fields ...field.RelationField) IStoreOrderStatusDo
	Preload(fields ...field.RelationField) IStoreOrderStatusDo
	FirstOrInit() (*model.StoreOrderStatus, error)
	FirstOrCreate() (*model.StoreOrderStatus, error)
	FindByPage(offset int, limit int) (result []*model.StoreOrderStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreOrderStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeOrderStatusDo) Debug() IStoreOrderStatusDo {
	return s.withDO(s.DO.Debug())
}

func (s storeOrderStatusDo) WithContext(ctx context.Context) IStoreOrderStatusDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeOrderStatusDo) ReadDB() IStoreOrderStatusDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeOrderStatusDo) WriteDB() IStoreOrderStatusDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeOrderStatusDo) Session(config *gorm.Session) IStoreOrderStatusDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeOrderStatusDo) Clauses(conds ...clause.Expression) IStoreOrderStatusDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeOrderStatusDo) Returning(value interface{}, columns ...string) IStoreOrderStatusDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeOrderStatusDo) Not(conds ...gen.Condition) IStoreOrderStatusDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeOrderStatusDo) Or(conds ...gen.Condition) IStoreOrderStatusDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeOrderStatusDo) Select(conds ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeOrderStatusDo) Where(conds ...gen.Condition) IStoreOrderStatusDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeOrderStatusDo) Order(conds ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeOrderStatusDo) Distinct(cols ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeOrderStatusDo) Omit(cols ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeOrderStatusDo) Join(table schema.Tabler, on ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeOrderStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeOrderStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeOrderStatusDo) Group(cols ...field.Expr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeOrderStatusDo) Having(conds ...gen.Condition) IStoreOrderStatusDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeOrderStatusDo) Limit(limit int) IStoreOrderStatusDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeOrderStatusDo) Offset(offset int) IStoreOrderStatusDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeOrderStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreOrderStatusDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeOrderStatusDo) Unscoped() IStoreOrderStatusDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeOrderStatusDo) Create(values ...*model.StoreOrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeOrderStatusDo) CreateInBatches(values []*model.StoreOrderStatus, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeOrderStatusDo) Save(values ...*model.StoreOrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeOrderStatusDo) First() (*model.StoreOrderStatus, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreOrderStatus), nil
	}
}

func (s storeOrderStatusDo) Take() (*model.StoreOrderStatus, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreOrderStatus), nil
	}
}

func (s storeOrderStatusDo) Last() (*model.StoreOrderStatus, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreOrderStatus), nil
	}
}

func (s storeOrderStatusDo) Find() ([]*model.StoreOrderStatus, error) {
	result, err := s.DO.Find()
	return result.([]*model.StoreOrderStatus), err
}

func (s storeOrderStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreOrderStatus, err error) {
	buf := make([]*model.StoreOrderStatus, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeOrderStatusDo) FindInBatches(result *[]*model.StoreOrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeOrderStatusDo) Attrs(attrs ...field.AssignExpr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeOrderStatusDo) Assign(attrs ...field.AssignExpr) IStoreOrderStatusDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeOrderStatusDo) Joins(fields ...field.RelationField) IStoreOrderStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeOrderStatusDo) Preload(fields ...field.RelationField) IStoreOrderStatusDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeOrderStatusDo) FirstOrInit() (*model.StoreOrderStatus, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreOrderStatus), nil
	}
}

func (s storeOrderStatusDo) FirstOrCreate() (*model.StoreOrderStatus, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreOrderStatus), nil
	}
}

func (s storeOrderStatusDo) FindByPage(offset int, limit int) (result []*model.StoreOrderStatus, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeOrderStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeOrderStatusDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeOrderStatusDo) Delete(models ...*model.StoreOrderStatus) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeOrderStatusDo) withDO(do gen.Dao) *storeOrderStatusDo {
	s.DO = *do.(*gen.DO)
	return s
}
