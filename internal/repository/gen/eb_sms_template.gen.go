// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSmsTemplate(db *gorm.DB, opts ...gen.DOOption) ebSmsTemplate {
	_ebSmsTemplate := ebSmsTemplate{}

	_ebSmsTemplate.ebSmsTemplateDo.UseDB(db, opts...)
	_ebSmsTemplate.ebSmsTemplateDo.UseModel(&model.EbSmsTemplate{})

	tableName := _ebSmsTemplate.ebSmsTemplateDo.TableName()
	_ebSmsTemplate.ALL = field.NewAsterisk(tableName)
	_ebSmsTemplate.ID = field.NewInt32(tableName, "id")
	_ebSmsTemplate.TempID = field.NewString(tableName, "temp_id")
	_ebSmsTemplate.TempType = field.NewInt32(tableName, "temp_type")
	_ebSmsTemplate.Title = field.NewString(tableName, "title")
	_ebSmsTemplate.Type = field.NewString(tableName, "type")
	_ebSmsTemplate.TempKey = field.NewString(tableName, "temp_key")
	_ebSmsTemplate.Status = field.NewInt32(tableName, "status")
	_ebSmsTemplate.Content = field.NewString(tableName, "content")
	_ebSmsTemplate.CreateTime = field.NewTime(tableName, "create_time")

	_ebSmsTemplate.fillFieldMap()

	return _ebSmsTemplate
}

// ebSmsTemplate 短信模板表
type ebSmsTemplate struct {
	ebSmsTemplateDo ebSmsTemplateDo

	ALL        field.Asterisk
	ID         field.Int32  // id
	TempID     field.String // 短信模板id
	TempType   field.Int32  // 模板类型
	Title      field.String // 模板说明
	Type       field.String // 类型
	TempKey    field.String // 模板编号
	Status     field.Int32  // 状态
	Content    field.String // 短息内容
	CreateTime field.Time   // 添加时间

	fieldMap map[string]field.Expr
}

func (e ebSmsTemplate) Table(newTableName string) *ebSmsTemplate {
	e.ebSmsTemplateDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSmsTemplate) As(alias string) *ebSmsTemplate {
	e.ebSmsTemplateDo.DO = *(e.ebSmsTemplateDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSmsTemplate) updateTableName(table string) *ebSmsTemplate {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.TempID = field.NewString(table, "temp_id")
	e.TempType = field.NewInt32(table, "temp_type")
	e.Title = field.NewString(table, "title")
	e.Type = field.NewString(table, "type")
	e.TempKey = field.NewString(table, "temp_key")
	e.Status = field.NewInt32(table, "status")
	e.Content = field.NewString(table, "content")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *ebSmsTemplate) WithContext(ctx context.Context) IEbSmsTemplateDo {
	return e.ebSmsTemplateDo.WithContext(ctx)
}

func (e ebSmsTemplate) TableName() string { return e.ebSmsTemplateDo.TableName() }

func (e ebSmsTemplate) Alias() string { return e.ebSmsTemplateDo.Alias() }

func (e ebSmsTemplate) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSmsTemplateDo.Columns(cols...)
}

func (e *ebSmsTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSmsTemplate) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["temp_id"] = e.TempID
	e.fieldMap["temp_type"] = e.TempType
	e.fieldMap["title"] = e.Title
	e.fieldMap["type"] = e.Type
	e.fieldMap["temp_key"] = e.TempKey
	e.fieldMap["status"] = e.Status
	e.fieldMap["content"] = e.Content
	e.fieldMap["create_time"] = e.CreateTime
}

func (e ebSmsTemplate) clone(db *gorm.DB) ebSmsTemplate {
	e.ebSmsTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSmsTemplate) replaceDB(db *gorm.DB) ebSmsTemplate {
	e.ebSmsTemplateDo.ReplaceDB(db)
	return e
}

type ebSmsTemplateDo struct{ gen.DO }

type IEbSmsTemplateDo interface {
	gen.SubQuery
	Debug() IEbSmsTemplateDo
	WithContext(ctx context.Context) IEbSmsTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSmsTemplateDo
	WriteDB() IEbSmsTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSmsTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSmsTemplateDo
	Not(conds ...gen.Condition) IEbSmsTemplateDo
	Or(conds ...gen.Condition) IEbSmsTemplateDo
	Select(conds ...field.Expr) IEbSmsTemplateDo
	Where(conds ...gen.Condition) IEbSmsTemplateDo
	Order(conds ...field.Expr) IEbSmsTemplateDo
	Distinct(cols ...field.Expr) IEbSmsTemplateDo
	Omit(cols ...field.Expr) IEbSmsTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IEbSmsTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSmsTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSmsTemplateDo
	Group(cols ...field.Expr) IEbSmsTemplateDo
	Having(conds ...gen.Condition) IEbSmsTemplateDo
	Limit(limit int) IEbSmsTemplateDo
	Offset(offset int) IEbSmsTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSmsTemplateDo
	Unscoped() IEbSmsTemplateDo
	Create(values ...*model.EbSmsTemplate) error
	CreateInBatches(values []*model.EbSmsTemplate, batchSize int) error
	Save(values ...*model.EbSmsTemplate) error
	First() (*model.EbSmsTemplate, error)
	Take() (*model.EbSmsTemplate, error)
	Last() (*model.EbSmsTemplate, error)
	Find() ([]*model.EbSmsTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSmsTemplate, err error)
	FindInBatches(result *[]*model.EbSmsTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSmsTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSmsTemplateDo
	Assign(attrs ...field.AssignExpr) IEbSmsTemplateDo
	Joins(fields ...field.RelationField) IEbSmsTemplateDo
	Preload(fields ...field.RelationField) IEbSmsTemplateDo
	FirstOrInit() (*model.EbSmsTemplate, error)
	FirstOrCreate() (*model.EbSmsTemplate, error)
	FindByPage(offset int, limit int) (result []*model.EbSmsTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSmsTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSmsTemplateDo) Debug() IEbSmsTemplateDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSmsTemplateDo) WithContext(ctx context.Context) IEbSmsTemplateDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSmsTemplateDo) ReadDB() IEbSmsTemplateDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSmsTemplateDo) WriteDB() IEbSmsTemplateDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSmsTemplateDo) Session(config *gorm.Session) IEbSmsTemplateDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSmsTemplateDo) Clauses(conds ...clause.Expression) IEbSmsTemplateDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSmsTemplateDo) Returning(value interface{}, columns ...string) IEbSmsTemplateDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSmsTemplateDo) Not(conds ...gen.Condition) IEbSmsTemplateDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSmsTemplateDo) Or(conds ...gen.Condition) IEbSmsTemplateDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSmsTemplateDo) Select(conds ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSmsTemplateDo) Where(conds ...gen.Condition) IEbSmsTemplateDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSmsTemplateDo) Order(conds ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSmsTemplateDo) Distinct(cols ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSmsTemplateDo) Omit(cols ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSmsTemplateDo) Join(table schema.Tabler, on ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSmsTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSmsTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSmsTemplateDo) Group(cols ...field.Expr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSmsTemplateDo) Having(conds ...gen.Condition) IEbSmsTemplateDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSmsTemplateDo) Limit(limit int) IEbSmsTemplateDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSmsTemplateDo) Offset(offset int) IEbSmsTemplateDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSmsTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSmsTemplateDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSmsTemplateDo) Unscoped() IEbSmsTemplateDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSmsTemplateDo) Create(values ...*model.EbSmsTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSmsTemplateDo) CreateInBatches(values []*model.EbSmsTemplate, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSmsTemplateDo) Save(values ...*model.EbSmsTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSmsTemplateDo) First() (*model.EbSmsTemplate, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsTemplate), nil
	}
}

func (e ebSmsTemplateDo) Take() (*model.EbSmsTemplate, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsTemplate), nil
	}
}

func (e ebSmsTemplateDo) Last() (*model.EbSmsTemplate, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsTemplate), nil
	}
}

func (e ebSmsTemplateDo) Find() ([]*model.EbSmsTemplate, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSmsTemplate), err
}

func (e ebSmsTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSmsTemplate, err error) {
	buf := make([]*model.EbSmsTemplate, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSmsTemplateDo) FindInBatches(result *[]*model.EbSmsTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSmsTemplateDo) Attrs(attrs ...field.AssignExpr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSmsTemplateDo) Assign(attrs ...field.AssignExpr) IEbSmsTemplateDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSmsTemplateDo) Joins(fields ...field.RelationField) IEbSmsTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSmsTemplateDo) Preload(fields ...field.RelationField) IEbSmsTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSmsTemplateDo) FirstOrInit() (*model.EbSmsTemplate, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsTemplate), nil
	}
}

func (e ebSmsTemplateDo) FirstOrCreate() (*model.EbSmsTemplate, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsTemplate), nil
	}
}

func (e ebSmsTemplateDo) FindByPage(offset int, limit int) (result []*model.EbSmsTemplate, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSmsTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSmsTemplateDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSmsTemplateDo) Delete(models ...*model.EbSmsTemplate) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSmsTemplateDo) withDO(do gen.Dao) *ebSmsTemplateDo {
	e.DO = *do.(*gen.DO)
	return e
}
