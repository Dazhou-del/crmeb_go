// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSystemGroupData(db *gorm.DB, opts ...gen.DOOption) systemGroupData {
	_systemGroupData := systemGroupData{}

	_systemGroupData.systemGroupDataDo.UseDB(db, opts...)
	_systemGroupData.systemGroupDataDo.UseModel(&model.SystemGroupData{})

	tableName := _systemGroupData.systemGroupDataDo.TableName()
	_systemGroupData.ALL = field.NewAsterisk(tableName)
	_systemGroupData.ID = field.NewInt64(tableName, "id")
	_systemGroupData.Gid = field.NewInt64(tableName, "gid")
	_systemGroupData.Value = field.NewString(tableName, "value")
	_systemGroupData.Sort = field.NewInt64(tableName, "sort")
	_systemGroupData.Status = field.NewInt64(tableName, "status")
	_systemGroupData.CreatedAt = field.NewInt64(tableName, "created_at")
	_systemGroupData.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_systemGroupData.DeletedAt = field.NewField(tableName, "deleted_at")

	_systemGroupData.fillFieldMap()

	return _systemGroupData
}

// systemGroupData 组合数据详情表
type systemGroupData struct {
	systemGroupDataDo systemGroupDataDo

	ALL       field.Asterisk
	ID        field.Int64  // 组合数据详情ID
	Gid       field.Int64  // 对应的数据组id
	Value     field.String // 数据组对应的数据值（json数据）
	Sort      field.Int64  // 数据排序
	Status    field.Int64  // 状态（1：开启；2：关闭；）
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s systemGroupData) Table(newTableName string) *systemGroupData {
	s.systemGroupDataDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemGroupData) As(alias string) *systemGroupData {
	s.systemGroupDataDo.DO = *(s.systemGroupDataDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemGroupData) updateTableName(table string) *systemGroupData {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Gid = field.NewInt64(table, "gid")
	s.Value = field.NewString(table, "value")
	s.Sort = field.NewInt64(table, "sort")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *systemGroupData) WithContext(ctx context.Context) ISystemGroupDataDo {
	return s.systemGroupDataDo.WithContext(ctx)
}

func (s systemGroupData) TableName() string { return s.systemGroupDataDo.TableName() }

func (s systemGroupData) Alias() string { return s.systemGroupDataDo.Alias() }

func (s systemGroupData) Columns(cols ...field.Expr) gen.Columns {
	return s.systemGroupDataDo.Columns(cols...)
}

func (s *systemGroupData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemGroupData) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["gid"] = s.Gid
	s.fieldMap["value"] = s.Value
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s systemGroupData) clone(db *gorm.DB) systemGroupData {
	s.systemGroupDataDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemGroupData) replaceDB(db *gorm.DB) systemGroupData {
	s.systemGroupDataDo.ReplaceDB(db)
	return s
}

type systemGroupDataDo struct{ gen.DO }

type ISystemGroupDataDo interface {
	gen.SubQuery
	Debug() ISystemGroupDataDo
	WithContext(ctx context.Context) ISystemGroupDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemGroupDataDo
	WriteDB() ISystemGroupDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemGroupDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemGroupDataDo
	Not(conds ...gen.Condition) ISystemGroupDataDo
	Or(conds ...gen.Condition) ISystemGroupDataDo
	Select(conds ...field.Expr) ISystemGroupDataDo
	Where(conds ...gen.Condition) ISystemGroupDataDo
	Order(conds ...field.Expr) ISystemGroupDataDo
	Distinct(cols ...field.Expr) ISystemGroupDataDo
	Omit(cols ...field.Expr) ISystemGroupDataDo
	Join(table schema.Tabler, on ...field.Expr) ISystemGroupDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemGroupDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemGroupDataDo
	Group(cols ...field.Expr) ISystemGroupDataDo
	Having(conds ...gen.Condition) ISystemGroupDataDo
	Limit(limit int) ISystemGroupDataDo
	Offset(offset int) ISystemGroupDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemGroupDataDo
	Unscoped() ISystemGroupDataDo
	Create(values ...*model.SystemGroupData) error
	CreateInBatches(values []*model.SystemGroupData, batchSize int) error
	Save(values ...*model.SystemGroupData) error
	First() (*model.SystemGroupData, error)
	Take() (*model.SystemGroupData, error)
	Last() (*model.SystemGroupData, error)
	Find() ([]*model.SystemGroupData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemGroupData, err error)
	FindInBatches(result *[]*model.SystemGroupData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemGroupData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemGroupDataDo
	Assign(attrs ...field.AssignExpr) ISystemGroupDataDo
	Joins(fields ...field.RelationField) ISystemGroupDataDo
	Preload(fields ...field.RelationField) ISystemGroupDataDo
	FirstOrInit() (*model.SystemGroupData, error)
	FirstOrCreate() (*model.SystemGroupData, error)
	FindByPage(offset int, limit int) (result []*model.SystemGroupData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemGroupDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemGroupDataDo) Debug() ISystemGroupDataDo {
	return s.withDO(s.DO.Debug())
}

func (s systemGroupDataDo) WithContext(ctx context.Context) ISystemGroupDataDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemGroupDataDo) ReadDB() ISystemGroupDataDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemGroupDataDo) WriteDB() ISystemGroupDataDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemGroupDataDo) Session(config *gorm.Session) ISystemGroupDataDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemGroupDataDo) Clauses(conds ...clause.Expression) ISystemGroupDataDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemGroupDataDo) Returning(value interface{}, columns ...string) ISystemGroupDataDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemGroupDataDo) Not(conds ...gen.Condition) ISystemGroupDataDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemGroupDataDo) Or(conds ...gen.Condition) ISystemGroupDataDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemGroupDataDo) Select(conds ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemGroupDataDo) Where(conds ...gen.Condition) ISystemGroupDataDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemGroupDataDo) Order(conds ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemGroupDataDo) Distinct(cols ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemGroupDataDo) Omit(cols ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemGroupDataDo) Join(table schema.Tabler, on ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemGroupDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemGroupDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemGroupDataDo) Group(cols ...field.Expr) ISystemGroupDataDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemGroupDataDo) Having(conds ...gen.Condition) ISystemGroupDataDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemGroupDataDo) Limit(limit int) ISystemGroupDataDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemGroupDataDo) Offset(offset int) ISystemGroupDataDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemGroupDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemGroupDataDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemGroupDataDo) Unscoped() ISystemGroupDataDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemGroupDataDo) Create(values ...*model.SystemGroupData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemGroupDataDo) CreateInBatches(values []*model.SystemGroupData, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemGroupDataDo) Save(values ...*model.SystemGroupData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemGroupDataDo) First() (*model.SystemGroupData, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemGroupData), nil
	}
}

func (s systemGroupDataDo) Take() (*model.SystemGroupData, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemGroupData), nil
	}
}

func (s systemGroupDataDo) Last() (*model.SystemGroupData, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemGroupData), nil
	}
}

func (s systemGroupDataDo) Find() ([]*model.SystemGroupData, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemGroupData), err
}

func (s systemGroupDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemGroupData, err error) {
	buf := make([]*model.SystemGroupData, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemGroupDataDo) FindInBatches(result *[]*model.SystemGroupData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemGroupDataDo) Attrs(attrs ...field.AssignExpr) ISystemGroupDataDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemGroupDataDo) Assign(attrs ...field.AssignExpr) ISystemGroupDataDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemGroupDataDo) Joins(fields ...field.RelationField) ISystemGroupDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemGroupDataDo) Preload(fields ...field.RelationField) ISystemGroupDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemGroupDataDo) FirstOrInit() (*model.SystemGroupData, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemGroupData), nil
	}
}

func (s systemGroupDataDo) FirstOrCreate() (*model.SystemGroupData, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemGroupData), nil
	}
}

func (s systemGroupDataDo) FindByPage(offset int, limit int) (result []*model.SystemGroupData, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemGroupDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemGroupDataDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemGroupDataDo) Delete(models ...*model.SystemGroupData) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemGroupDataDo) withDO(do gen.Dao) *systemGroupDataDo {
	s.DO = *do.(*gen.DO)
	return s
}
