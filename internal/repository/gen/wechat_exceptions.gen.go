// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newWechatException(db *gorm.DB, opts ...gen.DOOption) wechatException {
	_wechatException := wechatException{}

	_wechatException.wechatExceptionDo.UseDB(db, opts...)
	_wechatException.wechatExceptionDo.UseModel(&model.WechatException{})

	tableName := _wechatException.wechatExceptionDo.TableName()
	_wechatException.ALL = field.NewAsterisk(tableName)
	_wechatException.ID = field.NewInt64(tableName, "id")
	_wechatException.Errcode = field.NewString(tableName, "errcode")
	_wechatException.Errmsg = field.NewString(tableName, "errmsg")
	_wechatException.Data = field.NewString(tableName, "data")
	_wechatException.Remark = field.NewString(tableName, "remark")
	_wechatException.CreatedAt = field.NewInt64(tableName, "created_at")
	_wechatException.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_wechatException.DeletedAt = field.NewField(tableName, "deleted_at")

	_wechatException.fillFieldMap()

	return _wechatException
}

// wechatException 微信异常表
type wechatException struct {
	wechatExceptionDo wechatExceptionDo

	ALL       field.Asterisk
	ID        field.Int64  // id
	Errcode   field.String // 错误码
	Errmsg    field.String // 错误信息
	Data      field.String // 回复数据
	Remark    field.String // 备注
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (w wechatException) Table(newTableName string) *wechatException {
	w.wechatExceptionDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wechatException) As(alias string) *wechatException {
	w.wechatExceptionDo.DO = *(w.wechatExceptionDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wechatException) updateTableName(table string) *wechatException {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.Errcode = field.NewString(table, "errcode")
	w.Errmsg = field.NewString(table, "errmsg")
	w.Data = field.NewString(table, "data")
	w.Remark = field.NewString(table, "remark")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")

	w.fillFieldMap()

	return w
}

func (w *wechatException) WithContext(ctx context.Context) IWechatExceptionDo {
	return w.wechatExceptionDo.WithContext(ctx)
}

func (w wechatException) TableName() string { return w.wechatExceptionDo.TableName() }

func (w wechatException) Alias() string { return w.wechatExceptionDo.Alias() }

func (w wechatException) Columns(cols ...field.Expr) gen.Columns {
	return w.wechatExceptionDo.Columns(cols...)
}

func (w *wechatException) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wechatException) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["id"] = w.ID
	w.fieldMap["errcode"] = w.Errcode
	w.fieldMap["errmsg"] = w.Errmsg
	w.fieldMap["data"] = w.Data
	w.fieldMap["remark"] = w.Remark
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
}

func (w wechatException) clone(db *gorm.DB) wechatException {
	w.wechatExceptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wechatException) replaceDB(db *gorm.DB) wechatException {
	w.wechatExceptionDo.ReplaceDB(db)
	return w
}

type wechatExceptionDo struct{ gen.DO }

type IWechatExceptionDo interface {
	gen.SubQuery
	Debug() IWechatExceptionDo
	WithContext(ctx context.Context) IWechatExceptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWechatExceptionDo
	WriteDB() IWechatExceptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWechatExceptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWechatExceptionDo
	Not(conds ...gen.Condition) IWechatExceptionDo
	Or(conds ...gen.Condition) IWechatExceptionDo
	Select(conds ...field.Expr) IWechatExceptionDo
	Where(conds ...gen.Condition) IWechatExceptionDo
	Order(conds ...field.Expr) IWechatExceptionDo
	Distinct(cols ...field.Expr) IWechatExceptionDo
	Omit(cols ...field.Expr) IWechatExceptionDo
	Join(table schema.Tabler, on ...field.Expr) IWechatExceptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWechatExceptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWechatExceptionDo
	Group(cols ...field.Expr) IWechatExceptionDo
	Having(conds ...gen.Condition) IWechatExceptionDo
	Limit(limit int) IWechatExceptionDo
	Offset(offset int) IWechatExceptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatExceptionDo
	Unscoped() IWechatExceptionDo
	Create(values ...*model.WechatException) error
	CreateInBatches(values []*model.WechatException, batchSize int) error
	Save(values ...*model.WechatException) error
	First() (*model.WechatException, error)
	Take() (*model.WechatException, error)
	Last() (*model.WechatException, error)
	Find() ([]*model.WechatException, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatException, err error)
	FindInBatches(result *[]*model.WechatException, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WechatException) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWechatExceptionDo
	Assign(attrs ...field.AssignExpr) IWechatExceptionDo
	Joins(fields ...field.RelationField) IWechatExceptionDo
	Preload(fields ...field.RelationField) IWechatExceptionDo
	FirstOrInit() (*model.WechatException, error)
	FirstOrCreate() (*model.WechatException, error)
	FindByPage(offset int, limit int) (result []*model.WechatException, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWechatExceptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wechatExceptionDo) Debug() IWechatExceptionDo {
	return w.withDO(w.DO.Debug())
}

func (w wechatExceptionDo) WithContext(ctx context.Context) IWechatExceptionDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wechatExceptionDo) ReadDB() IWechatExceptionDo {
	return w.Clauses(dbresolver.Read)
}

func (w wechatExceptionDo) WriteDB() IWechatExceptionDo {
	return w.Clauses(dbresolver.Write)
}

func (w wechatExceptionDo) Session(config *gorm.Session) IWechatExceptionDo {
	return w.withDO(w.DO.Session(config))
}

func (w wechatExceptionDo) Clauses(conds ...clause.Expression) IWechatExceptionDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wechatExceptionDo) Returning(value interface{}, columns ...string) IWechatExceptionDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wechatExceptionDo) Not(conds ...gen.Condition) IWechatExceptionDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wechatExceptionDo) Or(conds ...gen.Condition) IWechatExceptionDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wechatExceptionDo) Select(conds ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wechatExceptionDo) Where(conds ...gen.Condition) IWechatExceptionDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wechatExceptionDo) Order(conds ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wechatExceptionDo) Distinct(cols ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wechatExceptionDo) Omit(cols ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wechatExceptionDo) Join(table schema.Tabler, on ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wechatExceptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wechatExceptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wechatExceptionDo) Group(cols ...field.Expr) IWechatExceptionDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wechatExceptionDo) Having(conds ...gen.Condition) IWechatExceptionDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wechatExceptionDo) Limit(limit int) IWechatExceptionDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wechatExceptionDo) Offset(offset int) IWechatExceptionDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wechatExceptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatExceptionDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wechatExceptionDo) Unscoped() IWechatExceptionDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wechatExceptionDo) Create(values ...*model.WechatException) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wechatExceptionDo) CreateInBatches(values []*model.WechatException, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wechatExceptionDo) Save(values ...*model.WechatException) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wechatExceptionDo) First() (*model.WechatException, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatException), nil
	}
}

func (w wechatExceptionDo) Take() (*model.WechatException, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatException), nil
	}
}

func (w wechatExceptionDo) Last() (*model.WechatException, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatException), nil
	}
}

func (w wechatExceptionDo) Find() ([]*model.WechatException, error) {
	result, err := w.DO.Find()
	return result.([]*model.WechatException), err
}

func (w wechatExceptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatException, err error) {
	buf := make([]*model.WechatException, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wechatExceptionDo) FindInBatches(result *[]*model.WechatException, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wechatExceptionDo) Attrs(attrs ...field.AssignExpr) IWechatExceptionDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wechatExceptionDo) Assign(attrs ...field.AssignExpr) IWechatExceptionDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wechatExceptionDo) Joins(fields ...field.RelationField) IWechatExceptionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wechatExceptionDo) Preload(fields ...field.RelationField) IWechatExceptionDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wechatExceptionDo) FirstOrInit() (*model.WechatException, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatException), nil
	}
}

func (w wechatExceptionDo) FirstOrCreate() (*model.WechatException, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatException), nil
	}
}

func (w wechatExceptionDo) FindByPage(offset int, limit int) (result []*model.WechatException, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wechatExceptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wechatExceptionDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wechatExceptionDo) Delete(models ...*model.WechatException) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wechatExceptionDo) withDO(do gen.Dao) *wechatExceptionDo {
	w.DO = *do.(*gen.DO)
	return w
}
