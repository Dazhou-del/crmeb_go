// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreOrderInfo(db *gorm.DB, opts ...gen.DOOption) ebStoreOrderInfo {
	_ebStoreOrderInfo := ebStoreOrderInfo{}

	_ebStoreOrderInfo.ebStoreOrderInfoDo.UseDB(db, opts...)
	_ebStoreOrderInfo.ebStoreOrderInfoDo.UseModel(&model.EbStoreOrderInfo{})

	tableName := _ebStoreOrderInfo.ebStoreOrderInfoDo.TableName()
	_ebStoreOrderInfo.ALL = field.NewAsterisk(tableName)
	_ebStoreOrderInfo.ID = field.NewInt32(tableName, "id")
	_ebStoreOrderInfo.OrderID = field.NewInt32(tableName, "order_id")
	_ebStoreOrderInfo.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreOrderInfo.Info = field.NewString(tableName, "info")
	_ebStoreOrderInfo.Unique = field.NewString(tableName, "unique")
	_ebStoreOrderInfo.CreateTime = field.NewTime(tableName, "create_time")
	_ebStoreOrderInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_ebStoreOrderInfo.OrderNo = field.NewString(tableName, "order_no")
	_ebStoreOrderInfo.ProductName = field.NewString(tableName, "product_name")
	_ebStoreOrderInfo.AttrValueID = field.NewInt32(tableName, "attr_value_id")
	_ebStoreOrderInfo.Image = field.NewString(tableName, "image")
	_ebStoreOrderInfo.Sku = field.NewString(tableName, "sku")
	_ebStoreOrderInfo.Price = field.NewFloat64(tableName, "price")
	_ebStoreOrderInfo.PayNum = field.NewInt32(tableName, "pay_num")
	_ebStoreOrderInfo.Weight = field.NewFloat64(tableName, "weight")
	_ebStoreOrderInfo.Volume = field.NewFloat64(tableName, "volume")
	_ebStoreOrderInfo.GiveIntegral = field.NewInt32(tableName, "give_integral")
	_ebStoreOrderInfo.IsReply = field.NewBool(tableName, "is_reply")
	_ebStoreOrderInfo.IsSub = field.NewBool(tableName, "is_sub")
	_ebStoreOrderInfo.VipPrice = field.NewFloat64(tableName, "vip_price")
	_ebStoreOrderInfo.ProductType = field.NewInt32(tableName, "product_type")

	_ebStoreOrderInfo.fillFieldMap()

	return _ebStoreOrderInfo
}

// ebStoreOrderInfo 订单购物详情表
type ebStoreOrderInfo struct {
	ebStoreOrderInfoDo ebStoreOrderInfoDo

	ALL          field.Asterisk
	ID           field.Int32   // 主键
	OrderID      field.Int32   // 订单id
	ProductID    field.Int32   // 商品ID
	Info         field.String  // 购买东西的详细信息
	Unique       field.String  // 唯一id
	CreateTime   field.Time    // 创建时间
	UpdateTime   field.Time    // 更新时间
	OrderNo      field.String  // 订单号
	ProductName  field.String  // 商品名称
	AttrValueID  field.Int32   // 规格属性值id
	Image        field.String  // 商品图片
	Sku          field.String  // 商品sku
	Price        field.Float64 // 商品价格
	PayNum       field.Int32   // 购买数量
	Weight       field.Float64 // 重量
	Volume       field.Float64 // 体积
	GiveIntegral field.Int32   // 赠送积分
	IsReply      field.Bool    // 是否评价，0-未评价，1-已评价
	IsSub        field.Bool    // 是否单独分佣,0-否，1-是
	VipPrice     field.Float64 // 会员价
	ProductType  field.Int32   // 商品类型:0-普通，1-秒杀，2-砍价，3-拼团，4-视频号

	fieldMap map[string]field.Expr
}

func (e ebStoreOrderInfo) Table(newTableName string) *ebStoreOrderInfo {
	e.ebStoreOrderInfoDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreOrderInfo) As(alias string) *ebStoreOrderInfo {
	e.ebStoreOrderInfoDo.DO = *(e.ebStoreOrderInfoDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreOrderInfo) updateTableName(table string) *ebStoreOrderInfo {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.OrderID = field.NewInt32(table, "order_id")
	e.ProductID = field.NewInt32(table, "product_id")
	e.Info = field.NewString(table, "info")
	e.Unique = field.NewString(table, "unique")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.OrderNo = field.NewString(table, "order_no")
	e.ProductName = field.NewString(table, "product_name")
	e.AttrValueID = field.NewInt32(table, "attr_value_id")
	e.Image = field.NewString(table, "image")
	e.Sku = field.NewString(table, "sku")
	e.Price = field.NewFloat64(table, "price")
	e.PayNum = field.NewInt32(table, "pay_num")
	e.Weight = field.NewFloat64(table, "weight")
	e.Volume = field.NewFloat64(table, "volume")
	e.GiveIntegral = field.NewInt32(table, "give_integral")
	e.IsReply = field.NewBool(table, "is_reply")
	e.IsSub = field.NewBool(table, "is_sub")
	e.VipPrice = field.NewFloat64(table, "vip_price")
	e.ProductType = field.NewInt32(table, "product_type")

	e.fillFieldMap()

	return e
}

func (e *ebStoreOrderInfo) WithContext(ctx context.Context) IEbStoreOrderInfoDo {
	return e.ebStoreOrderInfoDo.WithContext(ctx)
}

func (e ebStoreOrderInfo) TableName() string { return e.ebStoreOrderInfoDo.TableName() }

func (e ebStoreOrderInfo) Alias() string { return e.ebStoreOrderInfoDo.Alias() }

func (e ebStoreOrderInfo) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreOrderInfoDo.Columns(cols...)
}

func (e *ebStoreOrderInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreOrderInfo) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 21)
	e.fieldMap["id"] = e.ID
	e.fieldMap["order_id"] = e.OrderID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["info"] = e.Info
	e.fieldMap["unique"] = e.Unique
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["order_no"] = e.OrderNo
	e.fieldMap["product_name"] = e.ProductName
	e.fieldMap["attr_value_id"] = e.AttrValueID
	e.fieldMap["image"] = e.Image
	e.fieldMap["sku"] = e.Sku
	e.fieldMap["price"] = e.Price
	e.fieldMap["pay_num"] = e.PayNum
	e.fieldMap["weight"] = e.Weight
	e.fieldMap["volume"] = e.Volume
	e.fieldMap["give_integral"] = e.GiveIntegral
	e.fieldMap["is_reply"] = e.IsReply
	e.fieldMap["is_sub"] = e.IsSub
	e.fieldMap["vip_price"] = e.VipPrice
	e.fieldMap["product_type"] = e.ProductType
}

func (e ebStoreOrderInfo) clone(db *gorm.DB) ebStoreOrderInfo {
	e.ebStoreOrderInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreOrderInfo) replaceDB(db *gorm.DB) ebStoreOrderInfo {
	e.ebStoreOrderInfoDo.ReplaceDB(db)
	return e
}

type ebStoreOrderInfoDo struct{ gen.DO }

type IEbStoreOrderInfoDo interface {
	gen.SubQuery
	Debug() IEbStoreOrderInfoDo
	WithContext(ctx context.Context) IEbStoreOrderInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreOrderInfoDo
	WriteDB() IEbStoreOrderInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreOrderInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreOrderInfoDo
	Not(conds ...gen.Condition) IEbStoreOrderInfoDo
	Or(conds ...gen.Condition) IEbStoreOrderInfoDo
	Select(conds ...field.Expr) IEbStoreOrderInfoDo
	Where(conds ...gen.Condition) IEbStoreOrderInfoDo
	Order(conds ...field.Expr) IEbStoreOrderInfoDo
	Distinct(cols ...field.Expr) IEbStoreOrderInfoDo
	Omit(cols ...field.Expr) IEbStoreOrderInfoDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreOrderInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderInfoDo
	Group(cols ...field.Expr) IEbStoreOrderInfoDo
	Having(conds ...gen.Condition) IEbStoreOrderInfoDo
	Limit(limit int) IEbStoreOrderInfoDo
	Offset(offset int) IEbStoreOrderInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreOrderInfoDo
	Unscoped() IEbStoreOrderInfoDo
	Create(values ...*model.EbStoreOrderInfo) error
	CreateInBatches(values []*model.EbStoreOrderInfo, batchSize int) error
	Save(values ...*model.EbStoreOrderInfo) error
	First() (*model.EbStoreOrderInfo, error)
	Take() (*model.EbStoreOrderInfo, error)
	Last() (*model.EbStoreOrderInfo, error)
	Find() ([]*model.EbStoreOrderInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreOrderInfo, err error)
	FindInBatches(result *[]*model.EbStoreOrderInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreOrderInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreOrderInfoDo
	Assign(attrs ...field.AssignExpr) IEbStoreOrderInfoDo
	Joins(fields ...field.RelationField) IEbStoreOrderInfoDo
	Preload(fields ...field.RelationField) IEbStoreOrderInfoDo
	FirstOrInit() (*model.EbStoreOrderInfo, error)
	FirstOrCreate() (*model.EbStoreOrderInfo, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreOrderInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreOrderInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreOrderInfoDo) Debug() IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreOrderInfoDo) WithContext(ctx context.Context) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreOrderInfoDo) ReadDB() IEbStoreOrderInfoDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreOrderInfoDo) WriteDB() IEbStoreOrderInfoDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreOrderInfoDo) Session(config *gorm.Session) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreOrderInfoDo) Clauses(conds ...clause.Expression) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreOrderInfoDo) Returning(value interface{}, columns ...string) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreOrderInfoDo) Not(conds ...gen.Condition) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreOrderInfoDo) Or(conds ...gen.Condition) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreOrderInfoDo) Select(conds ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreOrderInfoDo) Where(conds ...gen.Condition) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreOrderInfoDo) Order(conds ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreOrderInfoDo) Distinct(cols ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreOrderInfoDo) Omit(cols ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreOrderInfoDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreOrderInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreOrderInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreOrderInfoDo) Group(cols ...field.Expr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreOrderInfoDo) Having(conds ...gen.Condition) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreOrderInfoDo) Limit(limit int) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreOrderInfoDo) Offset(offset int) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreOrderInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreOrderInfoDo) Unscoped() IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreOrderInfoDo) Create(values ...*model.EbStoreOrderInfo) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreOrderInfoDo) CreateInBatches(values []*model.EbStoreOrderInfo, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreOrderInfoDo) Save(values ...*model.EbStoreOrderInfo) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreOrderInfoDo) First() (*model.EbStoreOrderInfo, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderInfo), nil
	}
}

func (e ebStoreOrderInfoDo) Take() (*model.EbStoreOrderInfo, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderInfo), nil
	}
}

func (e ebStoreOrderInfoDo) Last() (*model.EbStoreOrderInfo, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderInfo), nil
	}
}

func (e ebStoreOrderInfoDo) Find() ([]*model.EbStoreOrderInfo, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreOrderInfo), err
}

func (e ebStoreOrderInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreOrderInfo, err error) {
	buf := make([]*model.EbStoreOrderInfo, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreOrderInfoDo) FindInBatches(result *[]*model.EbStoreOrderInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreOrderInfoDo) Attrs(attrs ...field.AssignExpr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreOrderInfoDo) Assign(attrs ...field.AssignExpr) IEbStoreOrderInfoDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreOrderInfoDo) Joins(fields ...field.RelationField) IEbStoreOrderInfoDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreOrderInfoDo) Preload(fields ...field.RelationField) IEbStoreOrderInfoDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreOrderInfoDo) FirstOrInit() (*model.EbStoreOrderInfo, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderInfo), nil
	}
}

func (e ebStoreOrderInfoDo) FirstOrCreate() (*model.EbStoreOrderInfo, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderInfo), nil
	}
}

func (e ebStoreOrderInfoDo) FindByPage(offset int, limit int) (result []*model.EbStoreOrderInfo, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreOrderInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreOrderInfoDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreOrderInfoDo) Delete(models ...*model.EbStoreOrderInfo) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreOrderInfoDo) withDO(do gen.Dao) *ebStoreOrderInfoDo {
	e.DO = *do.(*gen.DO)
	return e
}
