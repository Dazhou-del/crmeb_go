// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreProductAttrValue(db *gorm.DB, opts ...gen.DOOption) ebStoreProductAttrValue {
	_ebStoreProductAttrValue := ebStoreProductAttrValue{}

	_ebStoreProductAttrValue.ebStoreProductAttrValueDo.UseDB(db, opts...)
	_ebStoreProductAttrValue.ebStoreProductAttrValueDo.UseModel(&model.EbStoreProductAttrValue{})

	tableName := _ebStoreProductAttrValue.ebStoreProductAttrValueDo.TableName()
	_ebStoreProductAttrValue.ALL = field.NewAsterisk(tableName)
	_ebStoreProductAttrValue.ID = field.NewInt32(tableName, "id")
	_ebStoreProductAttrValue.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreProductAttrValue.Suk = field.NewString(tableName, "suk")
	_ebStoreProductAttrValue.Stock = field.NewInt32(tableName, "stock")
	_ebStoreProductAttrValue.Sales = field.NewInt32(tableName, "sales")
	_ebStoreProductAttrValue.Price = field.NewFloat64(tableName, "price")
	_ebStoreProductAttrValue.Image = field.NewString(tableName, "image")
	_ebStoreProductAttrValue.Unique = field.NewString(tableName, "unique")
	_ebStoreProductAttrValue.Cost = field.NewFloat64(tableName, "cost")
	_ebStoreProductAttrValue.BarCode = field.NewString(tableName, "bar_code")
	_ebStoreProductAttrValue.OtPrice = field.NewFloat64(tableName, "ot_price")
	_ebStoreProductAttrValue.Weight = field.NewFloat64(tableName, "weight")
	_ebStoreProductAttrValue.Volume = field.NewFloat64(tableName, "volume")
	_ebStoreProductAttrValue.Brokerage = field.NewFloat64(tableName, "brokerage")
	_ebStoreProductAttrValue.BrokerageTwo = field.NewFloat64(tableName, "brokerage_two")
	_ebStoreProductAttrValue.Type = field.NewBool(tableName, "type")
	_ebStoreProductAttrValue.Quota = field.NewInt32(tableName, "quota")
	_ebStoreProductAttrValue.QuotaShow = field.NewInt32(tableName, "quota_show")
	_ebStoreProductAttrValue.AttrValue = field.NewString(tableName, "attr_value")
	_ebStoreProductAttrValue.IsDel = field.NewBool(tableName, "is_del")

	_ebStoreProductAttrValue.fillFieldMap()

	return _ebStoreProductAttrValue
}

// ebStoreProductAttrValue 商品属性值表
type ebStoreProductAttrValue struct {
	ebStoreProductAttrValueDo ebStoreProductAttrValueDo

	ALL          field.Asterisk
	ID           field.Int32   // 主键
	ProductID    field.Int32   // 商品ID
	Suk          field.String  // 商品属性索引值 (attr_value|attr_value[|....])
	Stock        field.Int32   // 属性对应的库存
	Sales        field.Int32   // 销量
	Price        field.Float64 // 属性金额
	Image        field.String  // 图片
	Unique       field.String  // 唯一值
	Cost         field.Float64 // 成本价
	BarCode      field.String  // 商品条码
	OtPrice      field.Float64 // 原价
	Weight       field.Float64 // 重量
	Volume       field.Float64 // 体积
	Brokerage    field.Float64 // 一级返佣
	BrokerageTwo field.Float64 // 二级返佣
	Type         field.Bool    // 活动类型 0=商品，1=秒杀，2=砍价，3=拼团
	Quota        field.Int32   // 活动限购数量
	QuotaShow    field.Int32   // 活动限购数量显示
	AttrValue    field.String  // attr_values 创建更新时的属性对应
	IsDel        field.Bool    // 是否删除,0-否，1-是

	fieldMap map[string]field.Expr
}

func (e ebStoreProductAttrValue) Table(newTableName string) *ebStoreProductAttrValue {
	e.ebStoreProductAttrValueDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreProductAttrValue) As(alias string) *ebStoreProductAttrValue {
	e.ebStoreProductAttrValueDo.DO = *(e.ebStoreProductAttrValueDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreProductAttrValue) updateTableName(table string) *ebStoreProductAttrValue {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.ProductID = field.NewInt32(table, "product_id")
	e.Suk = field.NewString(table, "suk")
	e.Stock = field.NewInt32(table, "stock")
	e.Sales = field.NewInt32(table, "sales")
	e.Price = field.NewFloat64(table, "price")
	e.Image = field.NewString(table, "image")
	e.Unique = field.NewString(table, "unique")
	e.Cost = field.NewFloat64(table, "cost")
	e.BarCode = field.NewString(table, "bar_code")
	e.OtPrice = field.NewFloat64(table, "ot_price")
	e.Weight = field.NewFloat64(table, "weight")
	e.Volume = field.NewFloat64(table, "volume")
	e.Brokerage = field.NewFloat64(table, "brokerage")
	e.BrokerageTwo = field.NewFloat64(table, "brokerage_two")
	e.Type = field.NewBool(table, "type")
	e.Quota = field.NewInt32(table, "quota")
	e.QuotaShow = field.NewInt32(table, "quota_show")
	e.AttrValue = field.NewString(table, "attr_value")
	e.IsDel = field.NewBool(table, "is_del")

	e.fillFieldMap()

	return e
}

func (e *ebStoreProductAttrValue) WithContext(ctx context.Context) IEbStoreProductAttrValueDo {
	return e.ebStoreProductAttrValueDo.WithContext(ctx)
}

func (e ebStoreProductAttrValue) TableName() string { return e.ebStoreProductAttrValueDo.TableName() }

func (e ebStoreProductAttrValue) Alias() string { return e.ebStoreProductAttrValueDo.Alias() }

func (e ebStoreProductAttrValue) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreProductAttrValueDo.Columns(cols...)
}

func (e *ebStoreProductAttrValue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreProductAttrValue) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 20)
	e.fieldMap["id"] = e.ID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["suk"] = e.Suk
	e.fieldMap["stock"] = e.Stock
	e.fieldMap["sales"] = e.Sales
	e.fieldMap["price"] = e.Price
	e.fieldMap["image"] = e.Image
	e.fieldMap["unique"] = e.Unique
	e.fieldMap["cost"] = e.Cost
	e.fieldMap["bar_code"] = e.BarCode
	e.fieldMap["ot_price"] = e.OtPrice
	e.fieldMap["weight"] = e.Weight
	e.fieldMap["volume"] = e.Volume
	e.fieldMap["brokerage"] = e.Brokerage
	e.fieldMap["brokerage_two"] = e.BrokerageTwo
	e.fieldMap["type"] = e.Type
	e.fieldMap["quota"] = e.Quota
	e.fieldMap["quota_show"] = e.QuotaShow
	e.fieldMap["attr_value"] = e.AttrValue
	e.fieldMap["is_del"] = e.IsDel
}

func (e ebStoreProductAttrValue) clone(db *gorm.DB) ebStoreProductAttrValue {
	e.ebStoreProductAttrValueDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreProductAttrValue) replaceDB(db *gorm.DB) ebStoreProductAttrValue {
	e.ebStoreProductAttrValueDo.ReplaceDB(db)
	return e
}

type ebStoreProductAttrValueDo struct{ gen.DO }

type IEbStoreProductAttrValueDo interface {
	gen.SubQuery
	Debug() IEbStoreProductAttrValueDo
	WithContext(ctx context.Context) IEbStoreProductAttrValueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreProductAttrValueDo
	WriteDB() IEbStoreProductAttrValueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreProductAttrValueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreProductAttrValueDo
	Not(conds ...gen.Condition) IEbStoreProductAttrValueDo
	Or(conds ...gen.Condition) IEbStoreProductAttrValueDo
	Select(conds ...field.Expr) IEbStoreProductAttrValueDo
	Where(conds ...gen.Condition) IEbStoreProductAttrValueDo
	Order(conds ...field.Expr) IEbStoreProductAttrValueDo
	Distinct(cols ...field.Expr) IEbStoreProductAttrValueDo
	Omit(cols ...field.Expr) IEbStoreProductAttrValueDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrValueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrValueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrValueDo
	Group(cols ...field.Expr) IEbStoreProductAttrValueDo
	Having(conds ...gen.Condition) IEbStoreProductAttrValueDo
	Limit(limit int) IEbStoreProductAttrValueDo
	Offset(offset int) IEbStoreProductAttrValueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductAttrValueDo
	Unscoped() IEbStoreProductAttrValueDo
	Create(values ...*model.EbStoreProductAttrValue) error
	CreateInBatches(values []*model.EbStoreProductAttrValue, batchSize int) error
	Save(values ...*model.EbStoreProductAttrValue) error
	First() (*model.EbStoreProductAttrValue, error)
	Take() (*model.EbStoreProductAttrValue, error)
	Last() (*model.EbStoreProductAttrValue, error)
	Find() ([]*model.EbStoreProductAttrValue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductAttrValue, err error)
	FindInBatches(result *[]*model.EbStoreProductAttrValue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreProductAttrValue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreProductAttrValueDo
	Assign(attrs ...field.AssignExpr) IEbStoreProductAttrValueDo
	Joins(fields ...field.RelationField) IEbStoreProductAttrValueDo
	Preload(fields ...field.RelationField) IEbStoreProductAttrValueDo
	FirstOrInit() (*model.EbStoreProductAttrValue, error)
	FirstOrCreate() (*model.EbStoreProductAttrValue, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreProductAttrValue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreProductAttrValueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreProductAttrValueDo) Debug() IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreProductAttrValueDo) WithContext(ctx context.Context) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreProductAttrValueDo) ReadDB() IEbStoreProductAttrValueDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreProductAttrValueDo) WriteDB() IEbStoreProductAttrValueDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreProductAttrValueDo) Session(config *gorm.Session) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreProductAttrValueDo) Clauses(conds ...clause.Expression) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreProductAttrValueDo) Returning(value interface{}, columns ...string) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreProductAttrValueDo) Not(conds ...gen.Condition) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreProductAttrValueDo) Or(conds ...gen.Condition) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreProductAttrValueDo) Select(conds ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreProductAttrValueDo) Where(conds ...gen.Condition) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreProductAttrValueDo) Order(conds ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreProductAttrValueDo) Distinct(cols ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreProductAttrValueDo) Omit(cols ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreProductAttrValueDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreProductAttrValueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreProductAttrValueDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreProductAttrValueDo) Group(cols ...field.Expr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreProductAttrValueDo) Having(conds ...gen.Condition) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreProductAttrValueDo) Limit(limit int) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreProductAttrValueDo) Offset(offset int) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreProductAttrValueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreProductAttrValueDo) Unscoped() IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreProductAttrValueDo) Create(values ...*model.EbStoreProductAttrValue) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreProductAttrValueDo) CreateInBatches(values []*model.EbStoreProductAttrValue, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreProductAttrValueDo) Save(values ...*model.EbStoreProductAttrValue) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreProductAttrValueDo) First() (*model.EbStoreProductAttrValue, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttrValue), nil
	}
}

func (e ebStoreProductAttrValueDo) Take() (*model.EbStoreProductAttrValue, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttrValue), nil
	}
}

func (e ebStoreProductAttrValueDo) Last() (*model.EbStoreProductAttrValue, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttrValue), nil
	}
}

func (e ebStoreProductAttrValueDo) Find() ([]*model.EbStoreProductAttrValue, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreProductAttrValue), err
}

func (e ebStoreProductAttrValueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductAttrValue, err error) {
	buf := make([]*model.EbStoreProductAttrValue, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreProductAttrValueDo) FindInBatches(result *[]*model.EbStoreProductAttrValue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreProductAttrValueDo) Attrs(attrs ...field.AssignExpr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreProductAttrValueDo) Assign(attrs ...field.AssignExpr) IEbStoreProductAttrValueDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreProductAttrValueDo) Joins(fields ...field.RelationField) IEbStoreProductAttrValueDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreProductAttrValueDo) Preload(fields ...field.RelationField) IEbStoreProductAttrValueDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreProductAttrValueDo) FirstOrInit() (*model.EbStoreProductAttrValue, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttrValue), nil
	}
}

func (e ebStoreProductAttrValueDo) FirstOrCreate() (*model.EbStoreProductAttrValue, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttrValue), nil
	}
}

func (e ebStoreProductAttrValueDo) FindByPage(offset int, limit int) (result []*model.EbStoreProductAttrValue, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreProductAttrValueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreProductAttrValueDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreProductAttrValueDo) Delete(models ...*model.EbStoreProductAttrValue) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreProductAttrValueDo) withDO(do gen.Dao) *ebStoreProductAttrValueDo {
	e.DO = *do.(*gen.DO)
	return e
}
