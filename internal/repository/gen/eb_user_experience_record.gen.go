// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserExperienceRecord(db *gorm.DB, opts ...gen.DOOption) ebUserExperienceRecord {
	_ebUserExperienceRecord := ebUserExperienceRecord{}

	_ebUserExperienceRecord.ebUserExperienceRecordDo.UseDB(db, opts...)
	_ebUserExperienceRecord.ebUserExperienceRecordDo.UseModel(&model.EbUserExperienceRecord{})

	tableName := _ebUserExperienceRecord.ebUserExperienceRecordDo.TableName()
	_ebUserExperienceRecord.ALL = field.NewAsterisk(tableName)
	_ebUserExperienceRecord.ID = field.NewInt32(tableName, "id")
	_ebUserExperienceRecord.UID = field.NewInt32(tableName, "uid")
	_ebUserExperienceRecord.LinkID = field.NewString(tableName, "link_id")
	_ebUserExperienceRecord.LinkType = field.NewString(tableName, "link_type")
	_ebUserExperienceRecord.Type = field.NewInt32(tableName, "type")
	_ebUserExperienceRecord.Title = field.NewString(tableName, "title")
	_ebUserExperienceRecord.Experience = field.NewInt32(tableName, "experience")
	_ebUserExperienceRecord.Balance = field.NewInt32(tableName, "balance")
	_ebUserExperienceRecord.Mark = field.NewString(tableName, "mark")
	_ebUserExperienceRecord.Status = field.NewBool(tableName, "status")
	_ebUserExperienceRecord.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserExperienceRecord.UpdateTime = field.NewTime(tableName, "update_time")

	_ebUserExperienceRecord.fillFieldMap()

	return _ebUserExperienceRecord
}

// ebUserExperienceRecord 用户经验记录表
type ebUserExperienceRecord struct {
	ebUserExperienceRecordDo ebUserExperienceRecordDo

	ALL        field.Asterisk
	ID         field.Int32  // 记录id
	UID        field.Int32  // 用户uid
	LinkID     field.String // 关联id-orderNo,(sign,system默认为0）
	LinkType   field.String // 关联类型（order,sign,system）
	Type       field.Int32  // 类型：1-增加，2-扣减
	Title      field.String // 标题
	Experience field.Int32  // 经验
	Balance    field.Int32  // 剩余
	Mark       field.String // 备注
	Status     field.Bool   // 状态：1-成功（保留字段）
	CreateTime field.Time   // 添加时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebUserExperienceRecord) Table(newTableName string) *ebUserExperienceRecord {
	e.ebUserExperienceRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserExperienceRecord) As(alias string) *ebUserExperienceRecord {
	e.ebUserExperienceRecordDo.DO = *(e.ebUserExperienceRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserExperienceRecord) updateTableName(table string) *ebUserExperienceRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.LinkID = field.NewString(table, "link_id")
	e.LinkType = field.NewString(table, "link_type")
	e.Type = field.NewInt32(table, "type")
	e.Title = field.NewString(table, "title")
	e.Experience = field.NewInt32(table, "experience")
	e.Balance = field.NewInt32(table, "balance")
	e.Mark = field.NewString(table, "mark")
	e.Status = field.NewBool(table, "status")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebUserExperienceRecord) WithContext(ctx context.Context) IEbUserExperienceRecordDo {
	return e.ebUserExperienceRecordDo.WithContext(ctx)
}

func (e ebUserExperienceRecord) TableName() string { return e.ebUserExperienceRecordDo.TableName() }

func (e ebUserExperienceRecord) Alias() string { return e.ebUserExperienceRecordDo.Alias() }

func (e ebUserExperienceRecord) Columns(cols ...field.Expr) gen.Columns {
	return e.ebUserExperienceRecordDo.Columns(cols...)
}

func (e *ebUserExperienceRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserExperienceRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["link_id"] = e.LinkID
	e.fieldMap["link_type"] = e.LinkType
	e.fieldMap["type"] = e.Type
	e.fieldMap["title"] = e.Title
	e.fieldMap["experience"] = e.Experience
	e.fieldMap["balance"] = e.Balance
	e.fieldMap["mark"] = e.Mark
	e.fieldMap["status"] = e.Status
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebUserExperienceRecord) clone(db *gorm.DB) ebUserExperienceRecord {
	e.ebUserExperienceRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserExperienceRecord) replaceDB(db *gorm.DB) ebUserExperienceRecord {
	e.ebUserExperienceRecordDo.ReplaceDB(db)
	return e
}

type ebUserExperienceRecordDo struct{ gen.DO }

type IEbUserExperienceRecordDo interface {
	gen.SubQuery
	Debug() IEbUserExperienceRecordDo
	WithContext(ctx context.Context) IEbUserExperienceRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserExperienceRecordDo
	WriteDB() IEbUserExperienceRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserExperienceRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserExperienceRecordDo
	Not(conds ...gen.Condition) IEbUserExperienceRecordDo
	Or(conds ...gen.Condition) IEbUserExperienceRecordDo
	Select(conds ...field.Expr) IEbUserExperienceRecordDo
	Where(conds ...gen.Condition) IEbUserExperienceRecordDo
	Order(conds ...field.Expr) IEbUserExperienceRecordDo
	Distinct(cols ...field.Expr) IEbUserExperienceRecordDo
	Omit(cols ...field.Expr) IEbUserExperienceRecordDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserExperienceRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserExperienceRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserExperienceRecordDo
	Group(cols ...field.Expr) IEbUserExperienceRecordDo
	Having(conds ...gen.Condition) IEbUserExperienceRecordDo
	Limit(limit int) IEbUserExperienceRecordDo
	Offset(offset int) IEbUserExperienceRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserExperienceRecordDo
	Unscoped() IEbUserExperienceRecordDo
	Create(values ...*model.EbUserExperienceRecord) error
	CreateInBatches(values []*model.EbUserExperienceRecord, batchSize int) error
	Save(values ...*model.EbUserExperienceRecord) error
	First() (*model.EbUserExperienceRecord, error)
	Take() (*model.EbUserExperienceRecord, error)
	Last() (*model.EbUserExperienceRecord, error)
	Find() ([]*model.EbUserExperienceRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserExperienceRecord, err error)
	FindInBatches(result *[]*model.EbUserExperienceRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserExperienceRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserExperienceRecordDo
	Assign(attrs ...field.AssignExpr) IEbUserExperienceRecordDo
	Joins(fields ...field.RelationField) IEbUserExperienceRecordDo
	Preload(fields ...field.RelationField) IEbUserExperienceRecordDo
	FirstOrInit() (*model.EbUserExperienceRecord, error)
	FirstOrCreate() (*model.EbUserExperienceRecord, error)
	FindByPage(offset int, limit int) (result []*model.EbUserExperienceRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserExperienceRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserExperienceRecordDo) Debug() IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserExperienceRecordDo) WithContext(ctx context.Context) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserExperienceRecordDo) ReadDB() IEbUserExperienceRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserExperienceRecordDo) WriteDB() IEbUserExperienceRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserExperienceRecordDo) Session(config *gorm.Session) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserExperienceRecordDo) Clauses(conds ...clause.Expression) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserExperienceRecordDo) Returning(value interface{}, columns ...string) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserExperienceRecordDo) Not(conds ...gen.Condition) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserExperienceRecordDo) Or(conds ...gen.Condition) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserExperienceRecordDo) Select(conds ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserExperienceRecordDo) Where(conds ...gen.Condition) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserExperienceRecordDo) Order(conds ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserExperienceRecordDo) Distinct(cols ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserExperienceRecordDo) Omit(cols ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserExperienceRecordDo) Join(table schema.Tabler, on ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserExperienceRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserExperienceRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserExperienceRecordDo) Group(cols ...field.Expr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserExperienceRecordDo) Having(conds ...gen.Condition) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserExperienceRecordDo) Limit(limit int) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserExperienceRecordDo) Offset(offset int) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserExperienceRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserExperienceRecordDo) Unscoped() IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserExperienceRecordDo) Create(values ...*model.EbUserExperienceRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserExperienceRecordDo) CreateInBatches(values []*model.EbUserExperienceRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserExperienceRecordDo) Save(values ...*model.EbUserExperienceRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserExperienceRecordDo) First() (*model.EbUserExperienceRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExperienceRecord), nil
	}
}

func (e ebUserExperienceRecordDo) Take() (*model.EbUserExperienceRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExperienceRecord), nil
	}
}

func (e ebUserExperienceRecordDo) Last() (*model.EbUserExperienceRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExperienceRecord), nil
	}
}

func (e ebUserExperienceRecordDo) Find() ([]*model.EbUserExperienceRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserExperienceRecord), err
}

func (e ebUserExperienceRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserExperienceRecord, err error) {
	buf := make([]*model.EbUserExperienceRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserExperienceRecordDo) FindInBatches(result *[]*model.EbUserExperienceRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserExperienceRecordDo) Attrs(attrs ...field.AssignExpr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserExperienceRecordDo) Assign(attrs ...field.AssignExpr) IEbUserExperienceRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserExperienceRecordDo) Joins(fields ...field.RelationField) IEbUserExperienceRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserExperienceRecordDo) Preload(fields ...field.RelationField) IEbUserExperienceRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserExperienceRecordDo) FirstOrInit() (*model.EbUserExperienceRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExperienceRecord), nil
	}
}

func (e ebUserExperienceRecordDo) FirstOrCreate() (*model.EbUserExperienceRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExperienceRecord), nil
	}
}

func (e ebUserExperienceRecordDo) FindByPage(offset int, limit int) (result []*model.EbUserExperienceRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserExperienceRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserExperienceRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserExperienceRecordDo) Delete(models ...*model.EbUserExperienceRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserExperienceRecordDo) withDO(do gen.Dao) *ebUserExperienceRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}
