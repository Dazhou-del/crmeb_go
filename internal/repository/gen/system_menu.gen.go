// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"

	"crmeb_go/internal/model/model_data"
)

func newSystemMenu(db *gorm.DB, opts ...gen.DOOption) systemMenu {
	_systemMenu := systemMenu{}

	_systemMenu.systemMenuDo.UseDB(db, opts...)
	_systemMenu.systemMenuDo.UseModel(&model.SystemMenu{})

	tableName := _systemMenu.systemMenuDo.TableName()
	_systemMenu.ALL = field.NewAsterisk(tableName)
	_systemMenu.ID = field.NewInt64(tableName, "id")
	_systemMenu.Pid = field.NewInt64(tableName, "pid")
	_systemMenu.Name = field.NewString(tableName, "name")
	_systemMenu.Icon = field.NewString(tableName, "icon")
	_systemMenu.Perms = field.NewString(tableName, "perms")
	_systemMenu.Component = field.NewString(tableName, "component")
	_systemMenu.MenuType = field.NewString(tableName, "menu_type")
	_systemMenu.Sort = field.NewInt64(tableName, "sort")
	_systemMenu.IsShow = field.NewInt64(tableName, "is_show")
	_systemMenu.CreatedAt = field.NewInt64(tableName, "created_at")
	_systemMenu.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_systemMenu.DeletedAt = field.NewField(tableName, "deleted_at")

	_systemMenu.fillFieldMap()

	return _systemMenu
}

// systemMenu 系统菜单表
type systemMenu struct {
	systemMenuDo systemMenuDo

	ALL       field.Asterisk
	ID        field.Int64
	Pid       field.Int64  // 父级ID
	Name      field.String // 名称
	Icon      field.String // icon
	Perms     field.String // 权限标识
	Component field.String // 组件路径
	MenuType  field.String // 类型，M-目录，C-菜单，A-按钮
	Sort      field.Int64  // 排序
	IsShow    field.Int64  // 显示状态
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s systemMenu) Table(newTableName string) *systemMenu {
	s.systemMenuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemMenu) As(alias string) *systemMenu {
	s.systemMenuDo.DO = *(s.systemMenuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemMenu) updateTableName(table string) *systemMenu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Pid = field.NewInt64(table, "pid")
	s.Name = field.NewString(table, "name")
	s.Icon = field.NewString(table, "icon")
	s.Perms = field.NewString(table, "perms")
	s.Component = field.NewString(table, "component")
	s.MenuType = field.NewString(table, "menu_type")
	s.Sort = field.NewInt64(table, "sort")
	s.IsShow = field.NewInt64(table, "is_show")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *systemMenu) WithContext(ctx context.Context) ISystemMenuDo {
	return s.systemMenuDo.WithContext(ctx)
}

func (s systemMenu) TableName() string { return s.systemMenuDo.TableName() }

func (s systemMenu) Alias() string { return s.systemMenuDo.Alias() }

func (s systemMenu) Columns(cols ...field.Expr) gen.Columns { return s.systemMenuDo.Columns(cols...) }

func (s *systemMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemMenu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["name"] = s.Name
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["perms"] = s.Perms
	s.fieldMap["component"] = s.Component
	s.fieldMap["menu_type"] = s.MenuType
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["is_show"] = s.IsShow
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s systemMenu) clone(db *gorm.DB) systemMenu {
	s.systemMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemMenu) replaceDB(db *gorm.DB) systemMenu {
	s.systemMenuDo.ReplaceDB(db)
	return s
}

type systemMenuDo struct{ gen.DO }

type ISystemMenuDo interface {
	gen.SubQuery
	Debug() ISystemMenuDo
	WithContext(ctx context.Context) ISystemMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemMenuDo
	WriteDB() ISystemMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemMenuDo
	Not(conds ...gen.Condition) ISystemMenuDo
	Or(conds ...gen.Condition) ISystemMenuDo
	Select(conds ...field.Expr) ISystemMenuDo
	Where(conds ...gen.Condition) ISystemMenuDo
	Order(conds ...field.Expr) ISystemMenuDo
	Distinct(cols ...field.Expr) ISystemMenuDo
	Omit(cols ...field.Expr) ISystemMenuDo
	Join(table schema.Tabler, on ...field.Expr) ISystemMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemMenuDo
	Group(cols ...field.Expr) ISystemMenuDo
	Having(conds ...gen.Condition) ISystemMenuDo
	Limit(limit int) ISystemMenuDo
	Offset(offset int) ISystemMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemMenuDo
	Unscoped() ISystemMenuDo
	Create(values ...*model.SystemMenu) error
	CreateInBatches(values []*model.SystemMenu, batchSize int) error
	Save(values ...*model.SystemMenu) error
	First() (*model.SystemMenu, error)
	Take() (*model.SystemMenu, error)
	Last() (*model.SystemMenu, error)
	Find() ([]*model.SystemMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemMenu, err error)
	FindInBatches(result *[]*model.SystemMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemMenuDo
	Assign(attrs ...field.AssignExpr) ISystemMenuDo
	Joins(fields ...field.RelationField) ISystemMenuDo
	Preload(fields ...field.RelationField) ISystemMenuDo
	FirstOrInit() (*model.SystemMenu, error)
	FirstOrCreate() (*model.SystemMenu, error)
	FindByPage(offset int, limit int) (result []*model.SystemMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	QueryMenuByUserId(condition model_data.UserIdCondition) (result []*model.SystemMenu, err error)
}

// SELECT m.* FROM system_menu as m
// right join eb_system_role_menu as  rm on rm.menu_id = m.id
// right join eb_system_role as  r on rm.rid = r.id
// right join eb_system_admin as  a on FIND_IN_SET(r.id, a.roles)
//
//	{{where}}
//		{{if condition.UserID !=0}}
//			a.id = @condition.UserID AND
//		{{end}}
//		m.deleted_at = 0 AND r.status =1
//	{{end}}
//
// GROUP BY m.id
func (s systemMenuDo) QueryMenuByUserId(condition model_data.UserIdCondition) (result []*model.SystemMenu, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT m.* FROM system_menu as m right join eb_system_role_menu as rm on rm.menu_id = m.id right join eb_system_role as r on rm.rid = r.id right join eb_system_admin as a on FIND_IN_SET(r.id, a.roles) ")
	var whereSQL0 strings.Builder
	if condition.UserID != 0 {
		params = append(params, condition.UserID)
		whereSQL0.WriteString("a.id = ? AND ")
	}
	whereSQL0.WriteString("m.deleted_at = 0 AND r.status =1 ")
	helper.JoinWhereBuilder(&generateSQL, whereSQL0)
	generateSQL.WriteString("GROUP BY m.id ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s systemMenuDo) Debug() ISystemMenuDo {
	return s.withDO(s.DO.Debug())
}

func (s systemMenuDo) WithContext(ctx context.Context) ISystemMenuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemMenuDo) ReadDB() ISystemMenuDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemMenuDo) WriteDB() ISystemMenuDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemMenuDo) Session(config *gorm.Session) ISystemMenuDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemMenuDo) Clauses(conds ...clause.Expression) ISystemMenuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemMenuDo) Returning(value interface{}, columns ...string) ISystemMenuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemMenuDo) Not(conds ...gen.Condition) ISystemMenuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemMenuDo) Or(conds ...gen.Condition) ISystemMenuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemMenuDo) Select(conds ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemMenuDo) Where(conds ...gen.Condition) ISystemMenuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemMenuDo) Order(conds ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemMenuDo) Distinct(cols ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemMenuDo) Omit(cols ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemMenuDo) Join(table schema.Tabler, on ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemMenuDo) Group(cols ...field.Expr) ISystemMenuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemMenuDo) Having(conds ...gen.Condition) ISystemMenuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemMenuDo) Limit(limit int) ISystemMenuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemMenuDo) Offset(offset int) ISystemMenuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemMenuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemMenuDo) Unscoped() ISystemMenuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemMenuDo) Create(values ...*model.SystemMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemMenuDo) CreateInBatches(values []*model.SystemMenu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemMenuDo) Save(values ...*model.SystemMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemMenuDo) First() (*model.SystemMenu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemMenu), nil
	}
}

func (s systemMenuDo) Take() (*model.SystemMenu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemMenu), nil
	}
}

func (s systemMenuDo) Last() (*model.SystemMenu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemMenu), nil
	}
}

func (s systemMenuDo) Find() ([]*model.SystemMenu, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemMenu), err
}

func (s systemMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemMenu, err error) {
	buf := make([]*model.SystemMenu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemMenuDo) FindInBatches(result *[]*model.SystemMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemMenuDo) Attrs(attrs ...field.AssignExpr) ISystemMenuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemMenuDo) Assign(attrs ...field.AssignExpr) ISystemMenuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemMenuDo) Joins(fields ...field.RelationField) ISystemMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemMenuDo) Preload(fields ...field.RelationField) ISystemMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemMenuDo) FirstOrInit() (*model.SystemMenu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemMenu), nil
	}
}

func (s systemMenuDo) FirstOrCreate() (*model.SystemMenu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemMenu), nil
	}
}

func (s systemMenuDo) FindByPage(offset int, limit int) (result []*model.SystemMenu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemMenuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemMenuDo) Delete(models ...*model.SystemMenu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemMenuDo) withDO(do gen.Dao) *systemMenuDo {
	s.DO = *do.(*gen.DO)
	return s
}
