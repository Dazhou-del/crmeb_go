// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbShippingTemplate(db *gorm.DB, opts ...gen.DOOption) ebShippingTemplate {
	_ebShippingTemplate := ebShippingTemplate{}

	_ebShippingTemplate.ebShippingTemplateDo.UseDB(db, opts...)
	_ebShippingTemplate.ebShippingTemplateDo.UseModel(&model.EbShippingTemplate{})

	tableName := _ebShippingTemplate.ebShippingTemplateDo.TableName()
	_ebShippingTemplate.ALL = field.NewAsterisk(tableName)
	_ebShippingTemplate.ID = field.NewInt32(tableName, "id")
	_ebShippingTemplate.Name = field.NewString(tableName, "name")
	_ebShippingTemplate.Type = field.NewBool(tableName, "type")
	_ebShippingTemplate.Appoint = field.NewBool(tableName, "appoint")
	_ebShippingTemplate.Sort = field.NewInt32(tableName, "sort")
	_ebShippingTemplate.CreateTime = field.NewTime(tableName, "create_time")
	_ebShippingTemplate.UpdateTime = field.NewTime(tableName, "update_time")

	_ebShippingTemplate.fillFieldMap()

	return _ebShippingTemplate
}

// ebShippingTemplate 运费模板
type ebShippingTemplate struct {
	ebShippingTemplateDo ebShippingTemplateDo

	ALL        field.Asterisk
	ID         field.Int32  // 编号
	Name       field.String // 模板名称
	Type       field.Bool   // 计费方式
	Appoint    field.Bool   // 指定包邮
	Sort       field.Int32  // 排序
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebShippingTemplate) Table(newTableName string) *ebShippingTemplate {
	e.ebShippingTemplateDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebShippingTemplate) As(alias string) *ebShippingTemplate {
	e.ebShippingTemplateDo.DO = *(e.ebShippingTemplateDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebShippingTemplate) updateTableName(table string) *ebShippingTemplate {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Type = field.NewBool(table, "type")
	e.Appoint = field.NewBool(table, "appoint")
	e.Sort = field.NewInt32(table, "sort")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebShippingTemplate) WithContext(ctx context.Context) IEbShippingTemplateDo {
	return e.ebShippingTemplateDo.WithContext(ctx)
}

func (e ebShippingTemplate) TableName() string { return e.ebShippingTemplateDo.TableName() }

func (e ebShippingTemplate) Alias() string { return e.ebShippingTemplateDo.Alias() }

func (e ebShippingTemplate) Columns(cols ...field.Expr) gen.Columns {
	return e.ebShippingTemplateDo.Columns(cols...)
}

func (e *ebShippingTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebShippingTemplate) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["type"] = e.Type
	e.fieldMap["appoint"] = e.Appoint
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebShippingTemplate) clone(db *gorm.DB) ebShippingTemplate {
	e.ebShippingTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebShippingTemplate) replaceDB(db *gorm.DB) ebShippingTemplate {
	e.ebShippingTemplateDo.ReplaceDB(db)
	return e
}

type ebShippingTemplateDo struct{ gen.DO }

type IEbShippingTemplateDo interface {
	gen.SubQuery
	Debug() IEbShippingTemplateDo
	WithContext(ctx context.Context) IEbShippingTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbShippingTemplateDo
	WriteDB() IEbShippingTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbShippingTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbShippingTemplateDo
	Not(conds ...gen.Condition) IEbShippingTemplateDo
	Or(conds ...gen.Condition) IEbShippingTemplateDo
	Select(conds ...field.Expr) IEbShippingTemplateDo
	Where(conds ...gen.Condition) IEbShippingTemplateDo
	Order(conds ...field.Expr) IEbShippingTemplateDo
	Distinct(cols ...field.Expr) IEbShippingTemplateDo
	Omit(cols ...field.Expr) IEbShippingTemplateDo
	Join(table schema.Tabler, on ...field.Expr) IEbShippingTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplateDo
	Group(cols ...field.Expr) IEbShippingTemplateDo
	Having(conds ...gen.Condition) IEbShippingTemplateDo
	Limit(limit int) IEbShippingTemplateDo
	Offset(offset int) IEbShippingTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbShippingTemplateDo
	Unscoped() IEbShippingTemplateDo
	Create(values ...*model.EbShippingTemplate) error
	CreateInBatches(values []*model.EbShippingTemplate, batchSize int) error
	Save(values ...*model.EbShippingTemplate) error
	First() (*model.EbShippingTemplate, error)
	Take() (*model.EbShippingTemplate, error)
	Last() (*model.EbShippingTemplate, error)
	Find() ([]*model.EbShippingTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbShippingTemplate, err error)
	FindInBatches(result *[]*model.EbShippingTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbShippingTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbShippingTemplateDo
	Assign(attrs ...field.AssignExpr) IEbShippingTemplateDo
	Joins(fields ...field.RelationField) IEbShippingTemplateDo
	Preload(fields ...field.RelationField) IEbShippingTemplateDo
	FirstOrInit() (*model.EbShippingTemplate, error)
	FirstOrCreate() (*model.EbShippingTemplate, error)
	FindByPage(offset int, limit int) (result []*model.EbShippingTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbShippingTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebShippingTemplateDo) Debug() IEbShippingTemplateDo {
	return e.withDO(e.DO.Debug())
}

func (e ebShippingTemplateDo) WithContext(ctx context.Context) IEbShippingTemplateDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebShippingTemplateDo) ReadDB() IEbShippingTemplateDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebShippingTemplateDo) WriteDB() IEbShippingTemplateDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebShippingTemplateDo) Session(config *gorm.Session) IEbShippingTemplateDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebShippingTemplateDo) Clauses(conds ...clause.Expression) IEbShippingTemplateDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebShippingTemplateDo) Returning(value interface{}, columns ...string) IEbShippingTemplateDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebShippingTemplateDo) Not(conds ...gen.Condition) IEbShippingTemplateDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebShippingTemplateDo) Or(conds ...gen.Condition) IEbShippingTemplateDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebShippingTemplateDo) Select(conds ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebShippingTemplateDo) Where(conds ...gen.Condition) IEbShippingTemplateDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebShippingTemplateDo) Order(conds ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebShippingTemplateDo) Distinct(cols ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebShippingTemplateDo) Omit(cols ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebShippingTemplateDo) Join(table schema.Tabler, on ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebShippingTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebShippingTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebShippingTemplateDo) Group(cols ...field.Expr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebShippingTemplateDo) Having(conds ...gen.Condition) IEbShippingTemplateDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebShippingTemplateDo) Limit(limit int) IEbShippingTemplateDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebShippingTemplateDo) Offset(offset int) IEbShippingTemplateDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebShippingTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbShippingTemplateDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebShippingTemplateDo) Unscoped() IEbShippingTemplateDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebShippingTemplateDo) Create(values ...*model.EbShippingTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebShippingTemplateDo) CreateInBatches(values []*model.EbShippingTemplate, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebShippingTemplateDo) Save(values ...*model.EbShippingTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebShippingTemplateDo) First() (*model.EbShippingTemplate, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplate), nil
	}
}

func (e ebShippingTemplateDo) Take() (*model.EbShippingTemplate, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplate), nil
	}
}

func (e ebShippingTemplateDo) Last() (*model.EbShippingTemplate, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplate), nil
	}
}

func (e ebShippingTemplateDo) Find() ([]*model.EbShippingTemplate, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbShippingTemplate), err
}

func (e ebShippingTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbShippingTemplate, err error) {
	buf := make([]*model.EbShippingTemplate, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebShippingTemplateDo) FindInBatches(result *[]*model.EbShippingTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebShippingTemplateDo) Attrs(attrs ...field.AssignExpr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebShippingTemplateDo) Assign(attrs ...field.AssignExpr) IEbShippingTemplateDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebShippingTemplateDo) Joins(fields ...field.RelationField) IEbShippingTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebShippingTemplateDo) Preload(fields ...field.RelationField) IEbShippingTemplateDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebShippingTemplateDo) FirstOrInit() (*model.EbShippingTemplate, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplate), nil
	}
}

func (e ebShippingTemplateDo) FirstOrCreate() (*model.EbShippingTemplate, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbShippingTemplate), nil
	}
}

func (e ebShippingTemplateDo) FindByPage(offset int, limit int) (result []*model.EbShippingTemplate, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebShippingTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebShippingTemplateDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebShippingTemplateDo) Delete(models ...*model.EbShippingTemplate) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebShippingTemplateDo) withDO(do gen.Dao) *ebShippingTemplateDo {
	e.DO = *do.(*gen.DO)
	return e
}
