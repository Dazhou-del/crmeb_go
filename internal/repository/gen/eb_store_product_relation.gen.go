// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreProductRelation(db *gorm.DB, opts ...gen.DOOption) ebStoreProductRelation {
	_ebStoreProductRelation := ebStoreProductRelation{}

	_ebStoreProductRelation.ebStoreProductRelationDo.UseDB(db, opts...)
	_ebStoreProductRelation.ebStoreProductRelationDo.UseModel(&model.EbStoreProductRelation{})

	tableName := _ebStoreProductRelation.ebStoreProductRelationDo.TableName()
	_ebStoreProductRelation.ALL = field.NewAsterisk(tableName)
	_ebStoreProductRelation.ID = field.NewInt32(tableName, "id")
	_ebStoreProductRelation.UID = field.NewInt32(tableName, "uid")
	_ebStoreProductRelation.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreProductRelation.Type = field.NewString(tableName, "type")
	_ebStoreProductRelation.Category = field.NewString(tableName, "category")
	_ebStoreProductRelation.CreateTime = field.NewTime(tableName, "create_time")
	_ebStoreProductRelation.UpdateTime = field.NewTime(tableName, "update_time")

	_ebStoreProductRelation.fillFieldMap()

	return _ebStoreProductRelation
}

// ebStoreProductRelation 商品点赞和收藏表
type ebStoreProductRelation struct {
	ebStoreProductRelationDo ebStoreProductRelationDo

	ALL        field.Asterisk
	ID         field.Int32  // id
	UID        field.Int32  // 用户ID
	ProductID  field.Int32  // 商品ID
	Type       field.String // 类型(收藏(collect）、点赞(like))
	Category   field.String // 某种类型的商品(普通商品、秒杀商品)
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebStoreProductRelation) Table(newTableName string) *ebStoreProductRelation {
	e.ebStoreProductRelationDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreProductRelation) As(alias string) *ebStoreProductRelation {
	e.ebStoreProductRelationDo.DO = *(e.ebStoreProductRelationDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreProductRelation) updateTableName(table string) *ebStoreProductRelation {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.ProductID = field.NewInt32(table, "product_id")
	e.Type = field.NewString(table, "type")
	e.Category = field.NewString(table, "category")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebStoreProductRelation) WithContext(ctx context.Context) IEbStoreProductRelationDo {
	return e.ebStoreProductRelationDo.WithContext(ctx)
}

func (e ebStoreProductRelation) TableName() string { return e.ebStoreProductRelationDo.TableName() }

func (e ebStoreProductRelation) Alias() string { return e.ebStoreProductRelationDo.Alias() }

func (e ebStoreProductRelation) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreProductRelationDo.Columns(cols...)
}

func (e *ebStoreProductRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreProductRelation) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["type"] = e.Type
	e.fieldMap["category"] = e.Category
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebStoreProductRelation) clone(db *gorm.DB) ebStoreProductRelation {
	e.ebStoreProductRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreProductRelation) replaceDB(db *gorm.DB) ebStoreProductRelation {
	e.ebStoreProductRelationDo.ReplaceDB(db)
	return e
}

type ebStoreProductRelationDo struct{ gen.DO }

type IEbStoreProductRelationDo interface {
	gen.SubQuery
	Debug() IEbStoreProductRelationDo
	WithContext(ctx context.Context) IEbStoreProductRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreProductRelationDo
	WriteDB() IEbStoreProductRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreProductRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreProductRelationDo
	Not(conds ...gen.Condition) IEbStoreProductRelationDo
	Or(conds ...gen.Condition) IEbStoreProductRelationDo
	Select(conds ...field.Expr) IEbStoreProductRelationDo
	Where(conds ...gen.Condition) IEbStoreProductRelationDo
	Order(conds ...field.Expr) IEbStoreProductRelationDo
	Distinct(cols ...field.Expr) IEbStoreProductRelationDo
	Omit(cols ...field.Expr) IEbStoreProductRelationDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreProductRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRelationDo
	Group(cols ...field.Expr) IEbStoreProductRelationDo
	Having(conds ...gen.Condition) IEbStoreProductRelationDo
	Limit(limit int) IEbStoreProductRelationDo
	Offset(offset int) IEbStoreProductRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductRelationDo
	Unscoped() IEbStoreProductRelationDo
	Create(values ...*model.EbStoreProductRelation) error
	CreateInBatches(values []*model.EbStoreProductRelation, batchSize int) error
	Save(values ...*model.EbStoreProductRelation) error
	First() (*model.EbStoreProductRelation, error)
	Take() (*model.EbStoreProductRelation, error)
	Last() (*model.EbStoreProductRelation, error)
	Find() ([]*model.EbStoreProductRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductRelation, err error)
	FindInBatches(result *[]*model.EbStoreProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreProductRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreProductRelationDo
	Assign(attrs ...field.AssignExpr) IEbStoreProductRelationDo
	Joins(fields ...field.RelationField) IEbStoreProductRelationDo
	Preload(fields ...field.RelationField) IEbStoreProductRelationDo
	FirstOrInit() (*model.EbStoreProductRelation, error)
	FirstOrCreate() (*model.EbStoreProductRelation, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreProductRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreProductRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreProductRelationDo) Debug() IEbStoreProductRelationDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreProductRelationDo) WithContext(ctx context.Context) IEbStoreProductRelationDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreProductRelationDo) ReadDB() IEbStoreProductRelationDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreProductRelationDo) WriteDB() IEbStoreProductRelationDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreProductRelationDo) Session(config *gorm.Session) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreProductRelationDo) Clauses(conds ...clause.Expression) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreProductRelationDo) Returning(value interface{}, columns ...string) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreProductRelationDo) Not(conds ...gen.Condition) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreProductRelationDo) Or(conds ...gen.Condition) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreProductRelationDo) Select(conds ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreProductRelationDo) Where(conds ...gen.Condition) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreProductRelationDo) Order(conds ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreProductRelationDo) Distinct(cols ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreProductRelationDo) Omit(cols ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreProductRelationDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreProductRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreProductRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreProductRelationDo) Group(cols ...field.Expr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreProductRelationDo) Having(conds ...gen.Condition) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreProductRelationDo) Limit(limit int) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreProductRelationDo) Offset(offset int) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreProductRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreProductRelationDo) Unscoped() IEbStoreProductRelationDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreProductRelationDo) Create(values ...*model.EbStoreProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreProductRelationDo) CreateInBatches(values []*model.EbStoreProductRelation, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreProductRelationDo) Save(values ...*model.EbStoreProductRelation) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreProductRelationDo) First() (*model.EbStoreProductRelation, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRelation), nil
	}
}

func (e ebStoreProductRelationDo) Take() (*model.EbStoreProductRelation, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRelation), nil
	}
}

func (e ebStoreProductRelationDo) Last() (*model.EbStoreProductRelation, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRelation), nil
	}
}

func (e ebStoreProductRelationDo) Find() ([]*model.EbStoreProductRelation, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreProductRelation), err
}

func (e ebStoreProductRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductRelation, err error) {
	buf := make([]*model.EbStoreProductRelation, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreProductRelationDo) FindInBatches(result *[]*model.EbStoreProductRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreProductRelationDo) Attrs(attrs ...field.AssignExpr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreProductRelationDo) Assign(attrs ...field.AssignExpr) IEbStoreProductRelationDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreProductRelationDo) Joins(fields ...field.RelationField) IEbStoreProductRelationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreProductRelationDo) Preload(fields ...field.RelationField) IEbStoreProductRelationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreProductRelationDo) FirstOrInit() (*model.EbStoreProductRelation, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRelation), nil
	}
}

func (e ebStoreProductRelationDo) FirstOrCreate() (*model.EbStoreProductRelation, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRelation), nil
	}
}

func (e ebStoreProductRelationDo) FindByPage(offset int, limit int) (result []*model.EbStoreProductRelation, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreProductRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreProductRelationDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreProductRelationDo) Delete(models ...*model.EbStoreProductRelation) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreProductRelationDo) withDO(do gen.Dao) *ebStoreProductRelationDo {
	e.DO = *do.(*gen.DO)
	return e
}
