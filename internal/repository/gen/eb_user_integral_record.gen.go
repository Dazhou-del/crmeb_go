// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserIntegralRecord(db *gorm.DB, opts ...gen.DOOption) ebUserIntegralRecord {
	_ebUserIntegralRecord := ebUserIntegralRecord{}

	_ebUserIntegralRecord.ebUserIntegralRecordDo.UseDB(db, opts...)
	_ebUserIntegralRecord.ebUserIntegralRecordDo.UseModel(&model.EbUserIntegralRecord{})

	tableName := _ebUserIntegralRecord.ebUserIntegralRecordDo.TableName()
	_ebUserIntegralRecord.ALL = field.NewAsterisk(tableName)
	_ebUserIntegralRecord.ID = field.NewInt32(tableName, "id")
	_ebUserIntegralRecord.UID = field.NewInt32(tableName, "uid")
	_ebUserIntegralRecord.LinkID = field.NewString(tableName, "link_id")
	_ebUserIntegralRecord.LinkType = field.NewString(tableName, "link_type")
	_ebUserIntegralRecord.Type = field.NewInt32(tableName, "type")
	_ebUserIntegralRecord.Title = field.NewString(tableName, "title")
	_ebUserIntegralRecord.Integral = field.NewInt32(tableName, "integral")
	_ebUserIntegralRecord.Balance = field.NewInt32(tableName, "balance")
	_ebUserIntegralRecord.Mark = field.NewString(tableName, "mark")
	_ebUserIntegralRecord.Status = field.NewBool(tableName, "status")
	_ebUserIntegralRecord.FrozenTime = field.NewInt32(tableName, "frozen_time")
	_ebUserIntegralRecord.ThawTime = field.NewInt64(tableName, "thaw_time")
	_ebUserIntegralRecord.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserIntegralRecord.UpdateTime = field.NewTime(tableName, "update_time")

	_ebUserIntegralRecord.fillFieldMap()

	return _ebUserIntegralRecord
}

// ebUserIntegralRecord 用户积分记录表
type ebUserIntegralRecord struct {
	ebUserIntegralRecordDo ebUserIntegralRecordDo

	ALL        field.Asterisk
	ID         field.Int32  // 记录id
	UID        field.Int32  // 用户uid
	LinkID     field.String // 关联id-orderNo,(sign,system默认为0）
	LinkType   field.String // 关联类型（order,sign,system）
	Type       field.Int32  // 类型：1-增加，2-扣减
	Title      field.String // 标题
	Integral   field.Int32  // 积分
	Balance    field.Int32  // 剩余
	Mark       field.String // 备注
	Status     field.Bool   // 状态：1-订单创建，2-冻结期，3-完成，4-失效（订单退款）
	FrozenTime field.Int32  // 冻结期时间（天）
	ThawTime   field.Int64  // 解冻时间
	CreateTime field.Time   // 添加时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebUserIntegralRecord) Table(newTableName string) *ebUserIntegralRecord {
	e.ebUserIntegralRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserIntegralRecord) As(alias string) *ebUserIntegralRecord {
	e.ebUserIntegralRecordDo.DO = *(e.ebUserIntegralRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserIntegralRecord) updateTableName(table string) *ebUserIntegralRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.LinkID = field.NewString(table, "link_id")
	e.LinkType = field.NewString(table, "link_type")
	e.Type = field.NewInt32(table, "type")
	e.Title = field.NewString(table, "title")
	e.Integral = field.NewInt32(table, "integral")
	e.Balance = field.NewInt32(table, "balance")
	e.Mark = field.NewString(table, "mark")
	e.Status = field.NewBool(table, "status")
	e.FrozenTime = field.NewInt32(table, "frozen_time")
	e.ThawTime = field.NewInt64(table, "thaw_time")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebUserIntegralRecord) WithContext(ctx context.Context) IEbUserIntegralRecordDo {
	return e.ebUserIntegralRecordDo.WithContext(ctx)
}

func (e ebUserIntegralRecord) TableName() string { return e.ebUserIntegralRecordDo.TableName() }

func (e ebUserIntegralRecord) Alias() string { return e.ebUserIntegralRecordDo.Alias() }

func (e ebUserIntegralRecord) Columns(cols ...field.Expr) gen.Columns {
	return e.ebUserIntegralRecordDo.Columns(cols...)
}

func (e *ebUserIntegralRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserIntegralRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["link_id"] = e.LinkID
	e.fieldMap["link_type"] = e.LinkType
	e.fieldMap["type"] = e.Type
	e.fieldMap["title"] = e.Title
	e.fieldMap["integral"] = e.Integral
	e.fieldMap["balance"] = e.Balance
	e.fieldMap["mark"] = e.Mark
	e.fieldMap["status"] = e.Status
	e.fieldMap["frozen_time"] = e.FrozenTime
	e.fieldMap["thaw_time"] = e.ThawTime
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebUserIntegralRecord) clone(db *gorm.DB) ebUserIntegralRecord {
	e.ebUserIntegralRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserIntegralRecord) replaceDB(db *gorm.DB) ebUserIntegralRecord {
	e.ebUserIntegralRecordDo.ReplaceDB(db)
	return e
}

type ebUserIntegralRecordDo struct{ gen.DO }

type IEbUserIntegralRecordDo interface {
	gen.SubQuery
	Debug() IEbUserIntegralRecordDo
	WithContext(ctx context.Context) IEbUserIntegralRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserIntegralRecordDo
	WriteDB() IEbUserIntegralRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserIntegralRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserIntegralRecordDo
	Not(conds ...gen.Condition) IEbUserIntegralRecordDo
	Or(conds ...gen.Condition) IEbUserIntegralRecordDo
	Select(conds ...field.Expr) IEbUserIntegralRecordDo
	Where(conds ...gen.Condition) IEbUserIntegralRecordDo
	Order(conds ...field.Expr) IEbUserIntegralRecordDo
	Distinct(cols ...field.Expr) IEbUserIntegralRecordDo
	Omit(cols ...field.Expr) IEbUserIntegralRecordDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserIntegralRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserIntegralRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserIntegralRecordDo
	Group(cols ...field.Expr) IEbUserIntegralRecordDo
	Having(conds ...gen.Condition) IEbUserIntegralRecordDo
	Limit(limit int) IEbUserIntegralRecordDo
	Offset(offset int) IEbUserIntegralRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserIntegralRecordDo
	Unscoped() IEbUserIntegralRecordDo
	Create(values ...*model.EbUserIntegralRecord) error
	CreateInBatches(values []*model.EbUserIntegralRecord, batchSize int) error
	Save(values ...*model.EbUserIntegralRecord) error
	First() (*model.EbUserIntegralRecord, error)
	Take() (*model.EbUserIntegralRecord, error)
	Last() (*model.EbUserIntegralRecord, error)
	Find() ([]*model.EbUserIntegralRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserIntegralRecord, err error)
	FindInBatches(result *[]*model.EbUserIntegralRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserIntegralRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserIntegralRecordDo
	Assign(attrs ...field.AssignExpr) IEbUserIntegralRecordDo
	Joins(fields ...field.RelationField) IEbUserIntegralRecordDo
	Preload(fields ...field.RelationField) IEbUserIntegralRecordDo
	FirstOrInit() (*model.EbUserIntegralRecord, error)
	FirstOrCreate() (*model.EbUserIntegralRecord, error)
	FindByPage(offset int, limit int) (result []*model.EbUserIntegralRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserIntegralRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserIntegralRecordDo) Debug() IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserIntegralRecordDo) WithContext(ctx context.Context) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserIntegralRecordDo) ReadDB() IEbUserIntegralRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserIntegralRecordDo) WriteDB() IEbUserIntegralRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserIntegralRecordDo) Session(config *gorm.Session) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserIntegralRecordDo) Clauses(conds ...clause.Expression) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserIntegralRecordDo) Returning(value interface{}, columns ...string) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserIntegralRecordDo) Not(conds ...gen.Condition) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserIntegralRecordDo) Or(conds ...gen.Condition) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserIntegralRecordDo) Select(conds ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserIntegralRecordDo) Where(conds ...gen.Condition) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserIntegralRecordDo) Order(conds ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserIntegralRecordDo) Distinct(cols ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserIntegralRecordDo) Omit(cols ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserIntegralRecordDo) Join(table schema.Tabler, on ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserIntegralRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserIntegralRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserIntegralRecordDo) Group(cols ...field.Expr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserIntegralRecordDo) Having(conds ...gen.Condition) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserIntegralRecordDo) Limit(limit int) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserIntegralRecordDo) Offset(offset int) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserIntegralRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserIntegralRecordDo) Unscoped() IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserIntegralRecordDo) Create(values ...*model.EbUserIntegralRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserIntegralRecordDo) CreateInBatches(values []*model.EbUserIntegralRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserIntegralRecordDo) Save(values ...*model.EbUserIntegralRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserIntegralRecordDo) First() (*model.EbUserIntegralRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserIntegralRecord), nil
	}
}

func (e ebUserIntegralRecordDo) Take() (*model.EbUserIntegralRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserIntegralRecord), nil
	}
}

func (e ebUserIntegralRecordDo) Last() (*model.EbUserIntegralRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserIntegralRecord), nil
	}
}

func (e ebUserIntegralRecordDo) Find() ([]*model.EbUserIntegralRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserIntegralRecord), err
}

func (e ebUserIntegralRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserIntegralRecord, err error) {
	buf := make([]*model.EbUserIntegralRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserIntegralRecordDo) FindInBatches(result *[]*model.EbUserIntegralRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserIntegralRecordDo) Attrs(attrs ...field.AssignExpr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserIntegralRecordDo) Assign(attrs ...field.AssignExpr) IEbUserIntegralRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserIntegralRecordDo) Joins(fields ...field.RelationField) IEbUserIntegralRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserIntegralRecordDo) Preload(fields ...field.RelationField) IEbUserIntegralRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserIntegralRecordDo) FirstOrInit() (*model.EbUserIntegralRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserIntegralRecord), nil
	}
}

func (e ebUserIntegralRecordDo) FirstOrCreate() (*model.EbUserIntegralRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserIntegralRecord), nil
	}
}

func (e ebUserIntegralRecordDo) FindByPage(offset int, limit int) (result []*model.EbUserIntegralRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserIntegralRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserIntegralRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserIntegralRecordDo) Delete(models ...*model.EbUserIntegralRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserIntegralRecordDo) withDO(do gen.Dao) *ebUserIntegralRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}
