// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemStoreStaff(db *gorm.DB, opts ...gen.DOOption) ebSystemStoreStaff {
	_ebSystemStoreStaff := ebSystemStoreStaff{}

	_ebSystemStoreStaff.ebSystemStoreStaffDo.UseDB(db, opts...)
	_ebSystemStoreStaff.ebSystemStoreStaffDo.UseModel(&model.EbSystemStoreStaff{})

	tableName := _ebSystemStoreStaff.ebSystemStoreStaffDo.TableName()
	_ebSystemStoreStaff.ALL = field.NewAsterisk(tableName)
	_ebSystemStoreStaff.ID = field.NewInt32(tableName, "id")
	_ebSystemStoreStaff.UID = field.NewInt32(tableName, "uid")
	_ebSystemStoreStaff.Avatar = field.NewString(tableName, "avatar")
	_ebSystemStoreStaff.StoreID = field.NewInt32(tableName, "store_id")
	_ebSystemStoreStaff.StaffName = field.NewString(tableName, "staff_name")
	_ebSystemStoreStaff.Phone = field.NewString(tableName, "phone")
	_ebSystemStoreStaff.VerifyStatus = field.NewInt32(tableName, "verify_status")
	_ebSystemStoreStaff.Status = field.NewInt32(tableName, "status")
	_ebSystemStoreStaff.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemStoreStaff.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemStoreStaff.fillFieldMap()

	return _ebSystemStoreStaff
}

// ebSystemStoreStaff 门店店员表
type ebSystemStoreStaff struct {
	ebSystemStoreStaffDo ebSystemStoreStaffDo

	ALL          field.Asterisk
	ID           field.Int32
	UID          field.Int32  // 管理员id
	Avatar       field.String // 店员头像
	StoreID      field.Int32  // 门店id
	StaffName    field.String // 店员名称
	Phone        field.String // 手机号码
	VerifyStatus field.Int32  // 核销开关
	Status       field.Int32  // 状态
	CreateTime   field.Time   // 添加时间
	UpdateTime   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemStoreStaff) Table(newTableName string) *ebSystemStoreStaff {
	e.ebSystemStoreStaffDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemStoreStaff) As(alias string) *ebSystemStoreStaff {
	e.ebSystemStoreStaffDo.DO = *(e.ebSystemStoreStaffDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemStoreStaff) updateTableName(table string) *ebSystemStoreStaff {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.Avatar = field.NewString(table, "avatar")
	e.StoreID = field.NewInt32(table, "store_id")
	e.StaffName = field.NewString(table, "staff_name")
	e.Phone = field.NewString(table, "phone")
	e.VerifyStatus = field.NewInt32(table, "verify_status")
	e.Status = field.NewInt32(table, "status")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemStoreStaff) WithContext(ctx context.Context) IEbSystemStoreStaffDo {
	return e.ebSystemStoreStaffDo.WithContext(ctx)
}

func (e ebSystemStoreStaff) TableName() string { return e.ebSystemStoreStaffDo.TableName() }

func (e ebSystemStoreStaff) Alias() string { return e.ebSystemStoreStaffDo.Alias() }

func (e ebSystemStoreStaff) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemStoreStaffDo.Columns(cols...)
}

func (e *ebSystemStoreStaff) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemStoreStaff) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["avatar"] = e.Avatar
	e.fieldMap["store_id"] = e.StoreID
	e.fieldMap["staff_name"] = e.StaffName
	e.fieldMap["phone"] = e.Phone
	e.fieldMap["verify_status"] = e.VerifyStatus
	e.fieldMap["status"] = e.Status
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemStoreStaff) clone(db *gorm.DB) ebSystemStoreStaff {
	e.ebSystemStoreStaffDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemStoreStaff) replaceDB(db *gorm.DB) ebSystemStoreStaff {
	e.ebSystemStoreStaffDo.ReplaceDB(db)
	return e
}

type ebSystemStoreStaffDo struct{ gen.DO }

type IEbSystemStoreStaffDo interface {
	gen.SubQuery
	Debug() IEbSystemStoreStaffDo
	WithContext(ctx context.Context) IEbSystemStoreStaffDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemStoreStaffDo
	WriteDB() IEbSystemStoreStaffDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemStoreStaffDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemStoreStaffDo
	Not(conds ...gen.Condition) IEbSystemStoreStaffDo
	Or(conds ...gen.Condition) IEbSystemStoreStaffDo
	Select(conds ...field.Expr) IEbSystemStoreStaffDo
	Where(conds ...gen.Condition) IEbSystemStoreStaffDo
	Order(conds ...field.Expr) IEbSystemStoreStaffDo
	Distinct(cols ...field.Expr) IEbSystemStoreStaffDo
	Omit(cols ...field.Expr) IEbSystemStoreStaffDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemStoreStaffDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemStoreStaffDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemStoreStaffDo
	Group(cols ...field.Expr) IEbSystemStoreStaffDo
	Having(conds ...gen.Condition) IEbSystemStoreStaffDo
	Limit(limit int) IEbSystemStoreStaffDo
	Offset(offset int) IEbSystemStoreStaffDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemStoreStaffDo
	Unscoped() IEbSystemStoreStaffDo
	Create(values ...*model.EbSystemStoreStaff) error
	CreateInBatches(values []*model.EbSystemStoreStaff, batchSize int) error
	Save(values ...*model.EbSystemStoreStaff) error
	First() (*model.EbSystemStoreStaff, error)
	Take() (*model.EbSystemStoreStaff, error)
	Last() (*model.EbSystemStoreStaff, error)
	Find() ([]*model.EbSystemStoreStaff, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemStoreStaff, err error)
	FindInBatches(result *[]*model.EbSystemStoreStaff, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemStoreStaff) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemStoreStaffDo
	Assign(attrs ...field.AssignExpr) IEbSystemStoreStaffDo
	Joins(fields ...field.RelationField) IEbSystemStoreStaffDo
	Preload(fields ...field.RelationField) IEbSystemStoreStaffDo
	FirstOrInit() (*model.EbSystemStoreStaff, error)
	FirstOrCreate() (*model.EbSystemStoreStaff, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemStoreStaff, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemStoreStaffDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemStoreStaffDo) Debug() IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemStoreStaffDo) WithContext(ctx context.Context) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemStoreStaffDo) ReadDB() IEbSystemStoreStaffDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemStoreStaffDo) WriteDB() IEbSystemStoreStaffDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemStoreStaffDo) Session(config *gorm.Session) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemStoreStaffDo) Clauses(conds ...clause.Expression) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemStoreStaffDo) Returning(value interface{}, columns ...string) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemStoreStaffDo) Not(conds ...gen.Condition) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemStoreStaffDo) Or(conds ...gen.Condition) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemStoreStaffDo) Select(conds ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemStoreStaffDo) Where(conds ...gen.Condition) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemStoreStaffDo) Order(conds ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemStoreStaffDo) Distinct(cols ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemStoreStaffDo) Omit(cols ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemStoreStaffDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemStoreStaffDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemStoreStaffDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemStoreStaffDo) Group(cols ...field.Expr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemStoreStaffDo) Having(conds ...gen.Condition) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemStoreStaffDo) Limit(limit int) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemStoreStaffDo) Offset(offset int) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemStoreStaffDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemStoreStaffDo) Unscoped() IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemStoreStaffDo) Create(values ...*model.EbSystemStoreStaff) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemStoreStaffDo) CreateInBatches(values []*model.EbSystemStoreStaff, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemStoreStaffDo) Save(values ...*model.EbSystemStoreStaff) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemStoreStaffDo) First() (*model.EbSystemStoreStaff, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemStoreStaff), nil
	}
}

func (e ebSystemStoreStaffDo) Take() (*model.EbSystemStoreStaff, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemStoreStaff), nil
	}
}

func (e ebSystemStoreStaffDo) Last() (*model.EbSystemStoreStaff, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemStoreStaff), nil
	}
}

func (e ebSystemStoreStaffDo) Find() ([]*model.EbSystemStoreStaff, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemStoreStaff), err
}

func (e ebSystemStoreStaffDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemStoreStaff, err error) {
	buf := make([]*model.EbSystemStoreStaff, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemStoreStaffDo) FindInBatches(result *[]*model.EbSystemStoreStaff, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemStoreStaffDo) Attrs(attrs ...field.AssignExpr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemStoreStaffDo) Assign(attrs ...field.AssignExpr) IEbSystemStoreStaffDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemStoreStaffDo) Joins(fields ...field.RelationField) IEbSystemStoreStaffDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemStoreStaffDo) Preload(fields ...field.RelationField) IEbSystemStoreStaffDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemStoreStaffDo) FirstOrInit() (*model.EbSystemStoreStaff, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemStoreStaff), nil
	}
}

func (e ebSystemStoreStaffDo) FirstOrCreate() (*model.EbSystemStoreStaff, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemStoreStaff), nil
	}
}

func (e ebSystemStoreStaffDo) FindByPage(offset int, limit int) (result []*model.EbSystemStoreStaff, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemStoreStaffDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemStoreStaffDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemStoreStaffDo) Delete(models ...*model.EbSystemStoreStaff) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemStoreStaffDo) withDO(do gen.Dao) *ebSystemStoreStaffDo {
	e.DO = *do.(*gen.DO)
	return e
}
