// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newWechatCallback(db *gorm.DB, opts ...gen.DOOption) wechatCallback {
	_wechatCallback := wechatCallback{}

	_wechatCallback.wechatCallbackDo.UseDB(db, opts...)
	_wechatCallback.wechatCallbackDo.UseModel(&model.WechatCallback{})

	tableName := _wechatCallback.wechatCallbackDo.TableName()
	_wechatCallback.ALL = field.NewAsterisk(tableName)
	_wechatCallback.ID = field.NewInt64(tableName, "id")
	_wechatCallback.ToUserName = field.NewString(tableName, "to_user_name")
	_wechatCallback.FromUserName = field.NewString(tableName, "from_user_name")
	_wechatCallback.MsgType = field.NewString(tableName, "msg_type")
	_wechatCallback.Event = field.NewString(tableName, "event")
	_wechatCallback.Content = field.NewString(tableName, "content")
	_wechatCallback.CreatedAt = field.NewInt64(tableName, "created_at")
	_wechatCallback.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_wechatCallback.DeletedAt = field.NewField(tableName, "deleted_at")

	_wechatCallback.fillFieldMap()

	return _wechatCallback
}

// wechatCallback 微信回调表
type wechatCallback struct {
	wechatCallbackDo wechatCallbackDo

	ALL          field.Asterisk
	ID           field.Int64  // 主键ID
	ToUserName   field.String // 商家小程序名称
	FromUserName field.String // 微信团队的 OpenID(固定值)
	MsgType      field.String // 消息类型
	Event        field.String // 事件类型
	Content      field.String // 内容
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (w wechatCallback) Table(newTableName string) *wechatCallback {
	w.wechatCallbackDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wechatCallback) As(alias string) *wechatCallback {
	w.wechatCallbackDo.DO = *(w.wechatCallbackDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wechatCallback) updateTableName(table string) *wechatCallback {
	w.ALL = field.NewAsterisk(table)
	w.ID = field.NewInt64(table, "id")
	w.ToUserName = field.NewString(table, "to_user_name")
	w.FromUserName = field.NewString(table, "from_user_name")
	w.MsgType = field.NewString(table, "msg_type")
	w.Event = field.NewString(table, "event")
	w.Content = field.NewString(table, "content")
	w.CreatedAt = field.NewInt64(table, "created_at")
	w.UpdatedAt = field.NewInt64(table, "updated_at")
	w.DeletedAt = field.NewField(table, "deleted_at")

	w.fillFieldMap()

	return w
}

func (w *wechatCallback) WithContext(ctx context.Context) IWechatCallbackDo {
	return w.wechatCallbackDo.WithContext(ctx)
}

func (w wechatCallback) TableName() string { return w.wechatCallbackDo.TableName() }

func (w wechatCallback) Alias() string { return w.wechatCallbackDo.Alias() }

func (w wechatCallback) Columns(cols ...field.Expr) gen.Columns {
	return w.wechatCallbackDo.Columns(cols...)
}

func (w *wechatCallback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wechatCallback) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["id"] = w.ID
	w.fieldMap["to_user_name"] = w.ToUserName
	w.fieldMap["from_user_name"] = w.FromUserName
	w.fieldMap["msg_type"] = w.MsgType
	w.fieldMap["event"] = w.Event
	w.fieldMap["content"] = w.Content
	w.fieldMap["created_at"] = w.CreatedAt
	w.fieldMap["updated_at"] = w.UpdatedAt
	w.fieldMap["deleted_at"] = w.DeletedAt
}

func (w wechatCallback) clone(db *gorm.DB) wechatCallback {
	w.wechatCallbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wechatCallback) replaceDB(db *gorm.DB) wechatCallback {
	w.wechatCallbackDo.ReplaceDB(db)
	return w
}

type wechatCallbackDo struct{ gen.DO }

type IWechatCallbackDo interface {
	gen.SubQuery
	Debug() IWechatCallbackDo
	WithContext(ctx context.Context) IWechatCallbackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWechatCallbackDo
	WriteDB() IWechatCallbackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWechatCallbackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWechatCallbackDo
	Not(conds ...gen.Condition) IWechatCallbackDo
	Or(conds ...gen.Condition) IWechatCallbackDo
	Select(conds ...field.Expr) IWechatCallbackDo
	Where(conds ...gen.Condition) IWechatCallbackDo
	Order(conds ...field.Expr) IWechatCallbackDo
	Distinct(cols ...field.Expr) IWechatCallbackDo
	Omit(cols ...field.Expr) IWechatCallbackDo
	Join(table schema.Tabler, on ...field.Expr) IWechatCallbackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWechatCallbackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWechatCallbackDo
	Group(cols ...field.Expr) IWechatCallbackDo
	Having(conds ...gen.Condition) IWechatCallbackDo
	Limit(limit int) IWechatCallbackDo
	Offset(offset int) IWechatCallbackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatCallbackDo
	Unscoped() IWechatCallbackDo
	Create(values ...*model.WechatCallback) error
	CreateInBatches(values []*model.WechatCallback, batchSize int) error
	Save(values ...*model.WechatCallback) error
	First() (*model.WechatCallback, error)
	Take() (*model.WechatCallback, error)
	Last() (*model.WechatCallback, error)
	Find() ([]*model.WechatCallback, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatCallback, err error)
	FindInBatches(result *[]*model.WechatCallback, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WechatCallback) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWechatCallbackDo
	Assign(attrs ...field.AssignExpr) IWechatCallbackDo
	Joins(fields ...field.RelationField) IWechatCallbackDo
	Preload(fields ...field.RelationField) IWechatCallbackDo
	FirstOrInit() (*model.WechatCallback, error)
	FirstOrCreate() (*model.WechatCallback, error)
	FindByPage(offset int, limit int) (result []*model.WechatCallback, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWechatCallbackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wechatCallbackDo) Debug() IWechatCallbackDo {
	return w.withDO(w.DO.Debug())
}

func (w wechatCallbackDo) WithContext(ctx context.Context) IWechatCallbackDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wechatCallbackDo) ReadDB() IWechatCallbackDo {
	return w.Clauses(dbresolver.Read)
}

func (w wechatCallbackDo) WriteDB() IWechatCallbackDo {
	return w.Clauses(dbresolver.Write)
}

func (w wechatCallbackDo) Session(config *gorm.Session) IWechatCallbackDo {
	return w.withDO(w.DO.Session(config))
}

func (w wechatCallbackDo) Clauses(conds ...clause.Expression) IWechatCallbackDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wechatCallbackDo) Returning(value interface{}, columns ...string) IWechatCallbackDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wechatCallbackDo) Not(conds ...gen.Condition) IWechatCallbackDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wechatCallbackDo) Or(conds ...gen.Condition) IWechatCallbackDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wechatCallbackDo) Select(conds ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wechatCallbackDo) Where(conds ...gen.Condition) IWechatCallbackDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wechatCallbackDo) Order(conds ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wechatCallbackDo) Distinct(cols ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wechatCallbackDo) Omit(cols ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wechatCallbackDo) Join(table schema.Tabler, on ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wechatCallbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wechatCallbackDo) RightJoin(table schema.Tabler, on ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wechatCallbackDo) Group(cols ...field.Expr) IWechatCallbackDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wechatCallbackDo) Having(conds ...gen.Condition) IWechatCallbackDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wechatCallbackDo) Limit(limit int) IWechatCallbackDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wechatCallbackDo) Offset(offset int) IWechatCallbackDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wechatCallbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWechatCallbackDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wechatCallbackDo) Unscoped() IWechatCallbackDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wechatCallbackDo) Create(values ...*model.WechatCallback) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wechatCallbackDo) CreateInBatches(values []*model.WechatCallback, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wechatCallbackDo) Save(values ...*model.WechatCallback) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wechatCallbackDo) First() (*model.WechatCallback, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCallback), nil
	}
}

func (w wechatCallbackDo) Take() (*model.WechatCallback, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCallback), nil
	}
}

func (w wechatCallbackDo) Last() (*model.WechatCallback, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCallback), nil
	}
}

func (w wechatCallbackDo) Find() ([]*model.WechatCallback, error) {
	result, err := w.DO.Find()
	return result.([]*model.WechatCallback), err
}

func (w wechatCallbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WechatCallback, err error) {
	buf := make([]*model.WechatCallback, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wechatCallbackDo) FindInBatches(result *[]*model.WechatCallback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wechatCallbackDo) Attrs(attrs ...field.AssignExpr) IWechatCallbackDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wechatCallbackDo) Assign(attrs ...field.AssignExpr) IWechatCallbackDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wechatCallbackDo) Joins(fields ...field.RelationField) IWechatCallbackDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wechatCallbackDo) Preload(fields ...field.RelationField) IWechatCallbackDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wechatCallbackDo) FirstOrInit() (*model.WechatCallback, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCallback), nil
	}
}

func (w wechatCallbackDo) FirstOrCreate() (*model.WechatCallback, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WechatCallback), nil
	}
}

func (w wechatCallbackDo) FindByPage(offset int, limit int) (result []*model.WechatCallback, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wechatCallbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wechatCallbackDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wechatCallbackDo) Delete(models ...*model.WechatCallback) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wechatCallbackDo) withDO(do gen.Dao) *wechatCallbackDo {
	w.DO = *do.(*gen.DO)
	return w
}
