// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreOrderStatus(db *gorm.DB, opts ...gen.DOOption) ebStoreOrderStatus {
	_ebStoreOrderStatus := ebStoreOrderStatus{}

	_ebStoreOrderStatus.ebStoreOrderStatusDo.UseDB(db, opts...)
	_ebStoreOrderStatus.ebStoreOrderStatusDo.UseModel(&model.EbStoreOrderStatus{})

	tableName := _ebStoreOrderStatus.ebStoreOrderStatusDo.TableName()
	_ebStoreOrderStatus.ALL = field.NewAsterisk(tableName)
	_ebStoreOrderStatus.Oid = field.NewInt32(tableName, "oid")
	_ebStoreOrderStatus.ChangeType = field.NewString(tableName, "change_type")
	_ebStoreOrderStatus.ChangeMessage = field.NewString(tableName, "change_message")
	_ebStoreOrderStatus.CreateTime = field.NewTime(tableName, "create_time")

	_ebStoreOrderStatus.fillFieldMap()

	return _ebStoreOrderStatus
}

// ebStoreOrderStatus 订单操作记录表
type ebStoreOrderStatus struct {
	ebStoreOrderStatusDo ebStoreOrderStatusDo

	ALL           field.Asterisk
	Oid           field.Int32  // 订单id
	ChangeType    field.String // 操作类型
	ChangeMessage field.String // 操作备注
	CreateTime    field.Time   // 操作时间

	fieldMap map[string]field.Expr
}

func (e ebStoreOrderStatus) Table(newTableName string) *ebStoreOrderStatus {
	e.ebStoreOrderStatusDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreOrderStatus) As(alias string) *ebStoreOrderStatus {
	e.ebStoreOrderStatusDo.DO = *(e.ebStoreOrderStatusDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreOrderStatus) updateTableName(table string) *ebStoreOrderStatus {
	e.ALL = field.NewAsterisk(table)
	e.Oid = field.NewInt32(table, "oid")
	e.ChangeType = field.NewString(table, "change_type")
	e.ChangeMessage = field.NewString(table, "change_message")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *ebStoreOrderStatus) WithContext(ctx context.Context) IEbStoreOrderStatusDo {
	return e.ebStoreOrderStatusDo.WithContext(ctx)
}

func (e ebStoreOrderStatus) TableName() string { return e.ebStoreOrderStatusDo.TableName() }

func (e ebStoreOrderStatus) Alias() string { return e.ebStoreOrderStatusDo.Alias() }

func (e ebStoreOrderStatus) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreOrderStatusDo.Columns(cols...)
}

func (e *ebStoreOrderStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreOrderStatus) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 4)
	e.fieldMap["oid"] = e.Oid
	e.fieldMap["change_type"] = e.ChangeType
	e.fieldMap["change_message"] = e.ChangeMessage
	e.fieldMap["create_time"] = e.CreateTime
}

func (e ebStoreOrderStatus) clone(db *gorm.DB) ebStoreOrderStatus {
	e.ebStoreOrderStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreOrderStatus) replaceDB(db *gorm.DB) ebStoreOrderStatus {
	e.ebStoreOrderStatusDo.ReplaceDB(db)
	return e
}

type ebStoreOrderStatusDo struct{ gen.DO }

type IEbStoreOrderStatusDo interface {
	gen.SubQuery
	Debug() IEbStoreOrderStatusDo
	WithContext(ctx context.Context) IEbStoreOrderStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreOrderStatusDo
	WriteDB() IEbStoreOrderStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreOrderStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreOrderStatusDo
	Not(conds ...gen.Condition) IEbStoreOrderStatusDo
	Or(conds ...gen.Condition) IEbStoreOrderStatusDo
	Select(conds ...field.Expr) IEbStoreOrderStatusDo
	Where(conds ...gen.Condition) IEbStoreOrderStatusDo
	Order(conds ...field.Expr) IEbStoreOrderStatusDo
	Distinct(cols ...field.Expr) IEbStoreOrderStatusDo
	Omit(cols ...field.Expr) IEbStoreOrderStatusDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreOrderStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderStatusDo
	Group(cols ...field.Expr) IEbStoreOrderStatusDo
	Having(conds ...gen.Condition) IEbStoreOrderStatusDo
	Limit(limit int) IEbStoreOrderStatusDo
	Offset(offset int) IEbStoreOrderStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreOrderStatusDo
	Unscoped() IEbStoreOrderStatusDo
	Create(values ...*model.EbStoreOrderStatus) error
	CreateInBatches(values []*model.EbStoreOrderStatus, batchSize int) error
	Save(values ...*model.EbStoreOrderStatus) error
	First() (*model.EbStoreOrderStatus, error)
	Take() (*model.EbStoreOrderStatus, error)
	Last() (*model.EbStoreOrderStatus, error)
	Find() ([]*model.EbStoreOrderStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreOrderStatus, err error)
	FindInBatches(result *[]*model.EbStoreOrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreOrderStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreOrderStatusDo
	Assign(attrs ...field.AssignExpr) IEbStoreOrderStatusDo
	Joins(fields ...field.RelationField) IEbStoreOrderStatusDo
	Preload(fields ...field.RelationField) IEbStoreOrderStatusDo
	FirstOrInit() (*model.EbStoreOrderStatus, error)
	FirstOrCreate() (*model.EbStoreOrderStatus, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreOrderStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreOrderStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreOrderStatusDo) Debug() IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreOrderStatusDo) WithContext(ctx context.Context) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreOrderStatusDo) ReadDB() IEbStoreOrderStatusDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreOrderStatusDo) WriteDB() IEbStoreOrderStatusDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreOrderStatusDo) Session(config *gorm.Session) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreOrderStatusDo) Clauses(conds ...clause.Expression) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreOrderStatusDo) Returning(value interface{}, columns ...string) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreOrderStatusDo) Not(conds ...gen.Condition) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreOrderStatusDo) Or(conds ...gen.Condition) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreOrderStatusDo) Select(conds ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreOrderStatusDo) Where(conds ...gen.Condition) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreOrderStatusDo) Order(conds ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreOrderStatusDo) Distinct(cols ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreOrderStatusDo) Omit(cols ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreOrderStatusDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreOrderStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreOrderStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreOrderStatusDo) Group(cols ...field.Expr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreOrderStatusDo) Having(conds ...gen.Condition) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreOrderStatusDo) Limit(limit int) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreOrderStatusDo) Offset(offset int) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreOrderStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreOrderStatusDo) Unscoped() IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreOrderStatusDo) Create(values ...*model.EbStoreOrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreOrderStatusDo) CreateInBatches(values []*model.EbStoreOrderStatus, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreOrderStatusDo) Save(values ...*model.EbStoreOrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreOrderStatusDo) First() (*model.EbStoreOrderStatus, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderStatus), nil
	}
}

func (e ebStoreOrderStatusDo) Take() (*model.EbStoreOrderStatus, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderStatus), nil
	}
}

func (e ebStoreOrderStatusDo) Last() (*model.EbStoreOrderStatus, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderStatus), nil
	}
}

func (e ebStoreOrderStatusDo) Find() ([]*model.EbStoreOrderStatus, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreOrderStatus), err
}

func (e ebStoreOrderStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreOrderStatus, err error) {
	buf := make([]*model.EbStoreOrderStatus, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreOrderStatusDo) FindInBatches(result *[]*model.EbStoreOrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreOrderStatusDo) Attrs(attrs ...field.AssignExpr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreOrderStatusDo) Assign(attrs ...field.AssignExpr) IEbStoreOrderStatusDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreOrderStatusDo) Joins(fields ...field.RelationField) IEbStoreOrderStatusDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreOrderStatusDo) Preload(fields ...field.RelationField) IEbStoreOrderStatusDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreOrderStatusDo) FirstOrInit() (*model.EbStoreOrderStatus, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderStatus), nil
	}
}

func (e ebStoreOrderStatusDo) FirstOrCreate() (*model.EbStoreOrderStatus, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreOrderStatus), nil
	}
}

func (e ebStoreOrderStatusDo) FindByPage(offset int, limit int) (result []*model.EbStoreOrderStatus, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreOrderStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreOrderStatusDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreOrderStatusDo) Delete(models ...*model.EbStoreOrderStatus) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreOrderStatusDo) withDO(do gen.Dao) *ebStoreOrderStatusDo {
	e.DO = *do.(*gen.DO)
	return e
}
