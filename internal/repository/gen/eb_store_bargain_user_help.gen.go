// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreBargainUserHelp(db *gorm.DB, opts ...gen.DOOption) ebStoreBargainUserHelp {
	_ebStoreBargainUserHelp := ebStoreBargainUserHelp{}

	_ebStoreBargainUserHelp.ebStoreBargainUserHelpDo.UseDB(db, opts...)
	_ebStoreBargainUserHelp.ebStoreBargainUserHelpDo.UseModel(&model.EbStoreBargainUserHelp{})

	tableName := _ebStoreBargainUserHelp.ebStoreBargainUserHelpDo.TableName()
	_ebStoreBargainUserHelp.ALL = field.NewAsterisk(tableName)
	_ebStoreBargainUserHelp.ID = field.NewInt32(tableName, "id")
	_ebStoreBargainUserHelp.UID = field.NewInt32(tableName, "uid")
	_ebStoreBargainUserHelp.BargainID = field.NewInt32(tableName, "bargain_id")
	_ebStoreBargainUserHelp.BargainUserID = field.NewInt32(tableName, "bargain_user_id")
	_ebStoreBargainUserHelp.Price = field.NewFloat64(tableName, "price")
	_ebStoreBargainUserHelp.AddTime = field.NewInt64(tableName, "add_time")

	_ebStoreBargainUserHelp.fillFieldMap()

	return _ebStoreBargainUserHelp
}

// ebStoreBargainUserHelp 砍价用户帮助表
type ebStoreBargainUserHelp struct {
	ebStoreBargainUserHelpDo ebStoreBargainUserHelpDo

	ALL           field.Asterisk
	ID            field.Int32   // 砍价用户帮助表ID
	UID           field.Int32   // 帮助的用户id
	BargainID     field.Int32   // 砍价商品ID
	BargainUserID field.Int32   // 用户参与砍价表id
	Price         field.Float64 // 帮助砍价多少金额
	AddTime       field.Int64   // 添加时间

	fieldMap map[string]field.Expr
}

func (e ebStoreBargainUserHelp) Table(newTableName string) *ebStoreBargainUserHelp {
	e.ebStoreBargainUserHelpDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreBargainUserHelp) As(alias string) *ebStoreBargainUserHelp {
	e.ebStoreBargainUserHelpDo.DO = *(e.ebStoreBargainUserHelpDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreBargainUserHelp) updateTableName(table string) *ebStoreBargainUserHelp {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.BargainID = field.NewInt32(table, "bargain_id")
	e.BargainUserID = field.NewInt32(table, "bargain_user_id")
	e.Price = field.NewFloat64(table, "price")
	e.AddTime = field.NewInt64(table, "add_time")

	e.fillFieldMap()

	return e
}

func (e *ebStoreBargainUserHelp) WithContext(ctx context.Context) IEbStoreBargainUserHelpDo {
	return e.ebStoreBargainUserHelpDo.WithContext(ctx)
}

func (e ebStoreBargainUserHelp) TableName() string { return e.ebStoreBargainUserHelpDo.TableName() }

func (e ebStoreBargainUserHelp) Alias() string { return e.ebStoreBargainUserHelpDo.Alias() }

func (e ebStoreBargainUserHelp) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreBargainUserHelpDo.Columns(cols...)
}

func (e *ebStoreBargainUserHelp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreBargainUserHelp) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["bargain_id"] = e.BargainID
	e.fieldMap["bargain_user_id"] = e.BargainUserID
	e.fieldMap["price"] = e.Price
	e.fieldMap["add_time"] = e.AddTime
}

func (e ebStoreBargainUserHelp) clone(db *gorm.DB) ebStoreBargainUserHelp {
	e.ebStoreBargainUserHelpDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreBargainUserHelp) replaceDB(db *gorm.DB) ebStoreBargainUserHelp {
	e.ebStoreBargainUserHelpDo.ReplaceDB(db)
	return e
}

type ebStoreBargainUserHelpDo struct{ gen.DO }

type IEbStoreBargainUserHelpDo interface {
	gen.SubQuery
	Debug() IEbStoreBargainUserHelpDo
	WithContext(ctx context.Context) IEbStoreBargainUserHelpDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreBargainUserHelpDo
	WriteDB() IEbStoreBargainUserHelpDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreBargainUserHelpDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreBargainUserHelpDo
	Not(conds ...gen.Condition) IEbStoreBargainUserHelpDo
	Or(conds ...gen.Condition) IEbStoreBargainUserHelpDo
	Select(conds ...field.Expr) IEbStoreBargainUserHelpDo
	Where(conds ...gen.Condition) IEbStoreBargainUserHelpDo
	Order(conds ...field.Expr) IEbStoreBargainUserHelpDo
	Distinct(cols ...field.Expr) IEbStoreBargainUserHelpDo
	Omit(cols ...field.Expr) IEbStoreBargainUserHelpDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserHelpDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserHelpDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserHelpDo
	Group(cols ...field.Expr) IEbStoreBargainUserHelpDo
	Having(conds ...gen.Condition) IEbStoreBargainUserHelpDo
	Limit(limit int) IEbStoreBargainUserHelpDo
	Offset(offset int) IEbStoreBargainUserHelpDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreBargainUserHelpDo
	Unscoped() IEbStoreBargainUserHelpDo
	Create(values ...*model.EbStoreBargainUserHelp) error
	CreateInBatches(values []*model.EbStoreBargainUserHelp, batchSize int) error
	Save(values ...*model.EbStoreBargainUserHelp) error
	First() (*model.EbStoreBargainUserHelp, error)
	Take() (*model.EbStoreBargainUserHelp, error)
	Last() (*model.EbStoreBargainUserHelp, error)
	Find() ([]*model.EbStoreBargainUserHelp, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreBargainUserHelp, err error)
	FindInBatches(result *[]*model.EbStoreBargainUserHelp, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreBargainUserHelp) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreBargainUserHelpDo
	Assign(attrs ...field.AssignExpr) IEbStoreBargainUserHelpDo
	Joins(fields ...field.RelationField) IEbStoreBargainUserHelpDo
	Preload(fields ...field.RelationField) IEbStoreBargainUserHelpDo
	FirstOrInit() (*model.EbStoreBargainUserHelp, error)
	FirstOrCreate() (*model.EbStoreBargainUserHelp, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreBargainUserHelp, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreBargainUserHelpDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreBargainUserHelpDo) Debug() IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreBargainUserHelpDo) WithContext(ctx context.Context) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreBargainUserHelpDo) ReadDB() IEbStoreBargainUserHelpDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreBargainUserHelpDo) WriteDB() IEbStoreBargainUserHelpDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreBargainUserHelpDo) Session(config *gorm.Session) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreBargainUserHelpDo) Clauses(conds ...clause.Expression) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreBargainUserHelpDo) Returning(value interface{}, columns ...string) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreBargainUserHelpDo) Not(conds ...gen.Condition) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreBargainUserHelpDo) Or(conds ...gen.Condition) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreBargainUserHelpDo) Select(conds ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreBargainUserHelpDo) Where(conds ...gen.Condition) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreBargainUserHelpDo) Order(conds ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreBargainUserHelpDo) Distinct(cols ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreBargainUserHelpDo) Omit(cols ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreBargainUserHelpDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreBargainUserHelpDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreBargainUserHelpDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreBargainUserHelpDo) Group(cols ...field.Expr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreBargainUserHelpDo) Having(conds ...gen.Condition) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreBargainUserHelpDo) Limit(limit int) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreBargainUserHelpDo) Offset(offset int) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreBargainUserHelpDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreBargainUserHelpDo) Unscoped() IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreBargainUserHelpDo) Create(values ...*model.EbStoreBargainUserHelp) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreBargainUserHelpDo) CreateInBatches(values []*model.EbStoreBargainUserHelp, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreBargainUserHelpDo) Save(values ...*model.EbStoreBargainUserHelp) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreBargainUserHelpDo) First() (*model.EbStoreBargainUserHelp, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUserHelp), nil
	}
}

func (e ebStoreBargainUserHelpDo) Take() (*model.EbStoreBargainUserHelp, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUserHelp), nil
	}
}

func (e ebStoreBargainUserHelpDo) Last() (*model.EbStoreBargainUserHelp, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUserHelp), nil
	}
}

func (e ebStoreBargainUserHelpDo) Find() ([]*model.EbStoreBargainUserHelp, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreBargainUserHelp), err
}

func (e ebStoreBargainUserHelpDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreBargainUserHelp, err error) {
	buf := make([]*model.EbStoreBargainUserHelp, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreBargainUserHelpDo) FindInBatches(result *[]*model.EbStoreBargainUserHelp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreBargainUserHelpDo) Attrs(attrs ...field.AssignExpr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreBargainUserHelpDo) Assign(attrs ...field.AssignExpr) IEbStoreBargainUserHelpDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreBargainUserHelpDo) Joins(fields ...field.RelationField) IEbStoreBargainUserHelpDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreBargainUserHelpDo) Preload(fields ...field.RelationField) IEbStoreBargainUserHelpDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreBargainUserHelpDo) FirstOrInit() (*model.EbStoreBargainUserHelp, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUserHelp), nil
	}
}

func (e ebStoreBargainUserHelpDo) FirstOrCreate() (*model.EbStoreBargainUserHelp, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUserHelp), nil
	}
}

func (e ebStoreBargainUserHelpDo) FindByPage(offset int, limit int) (result []*model.EbStoreBargainUserHelp, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreBargainUserHelpDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreBargainUserHelpDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreBargainUserHelpDo) Delete(models ...*model.EbStoreBargainUserHelp) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreBargainUserHelpDo) withDO(do gen.Dao) *ebStoreBargainUserHelpDo {
	e.DO = *do.(*gen.DO)
	return e
}
