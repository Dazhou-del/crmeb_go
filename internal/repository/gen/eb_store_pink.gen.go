// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStorePink(db *gorm.DB, opts ...gen.DOOption) ebStorePink {
	_ebStorePink := ebStorePink{}

	_ebStorePink.ebStorePinkDo.UseDB(db, opts...)
	_ebStorePink.ebStorePinkDo.UseModel(&model.EbStorePink{})

	tableName := _ebStorePink.ebStorePinkDo.TableName()
	_ebStorePink.ALL = field.NewAsterisk(tableName)
	_ebStorePink.ID = field.NewInt32(tableName, "id")
	_ebStorePink.UID = field.NewInt32(tableName, "uid")
	_ebStorePink.OrderID = field.NewString(tableName, "order_id")
	_ebStorePink.OrderIDKey = field.NewInt32(tableName, "order_id_key")
	_ebStorePink.TotalNum = field.NewInt32(tableName, "total_num")
	_ebStorePink.TotalPrice = field.NewFloat64(tableName, "total_price")
	_ebStorePink.Cid = field.NewInt32(tableName, "cid")
	_ebStorePink.Pid = field.NewInt32(tableName, "pid")
	_ebStorePink.People = field.NewInt32(tableName, "people")
	_ebStorePink.Price = field.NewFloat64(tableName, "price")
	_ebStorePink.AddTime = field.NewInt64(tableName, "add_time")
	_ebStorePink.StopTime = field.NewInt64(tableName, "stop_time")
	_ebStorePink.KID = field.NewInt32(tableName, "k_id")
	_ebStorePink.IsTpl = field.NewInt32(tableName, "is_tpl")
	_ebStorePink.IsRefund = field.NewInt32(tableName, "is_refund")
	_ebStorePink.Status = field.NewInt32(tableName, "status")
	_ebStorePink.IsVirtual = field.NewBool(tableName, "is_virtual")
	_ebStorePink.Nickname = field.NewString(tableName, "nickname")
	_ebStorePink.Avatar = field.NewString(tableName, "avatar")

	_ebStorePink.fillFieldMap()

	return _ebStorePink
}

// ebStorePink 拼团表
type ebStorePink struct {
	ebStorePinkDo ebStorePinkDo

	ALL        field.Asterisk
	ID         field.Int32   // 拼团ID
	UID        field.Int32   // 用户id
	OrderID    field.String  // 订单id 生成
	OrderIDKey field.Int32   // 订单id  数据库
	TotalNum   field.Int32   // 购买商品个数
	TotalPrice field.Float64 // 购买总金额
	Cid        field.Int32   // 拼团商品id
	Pid        field.Int32   // 商品id
	People     field.Int32   // 拼图总人数
	Price      field.Float64 // 拼团商品单价
	AddTime    field.Int64   // 开始时间
	StopTime   field.Int64   // 结束时间
	KID        field.Int32   // 团长id 0为团长
	IsTpl      field.Int32   // 是否发送模板消息0未发送1已发送
	IsRefund   field.Int32   // 是否退款 0未退款 1已退款
	Status     field.Int32   // 状态1进行中2已完成3未完成
	IsVirtual  field.Bool    // 是否虚拟拼团
	Nickname   field.String  // 用户昵称
	Avatar     field.String  // 用户头像

	fieldMap map[string]field.Expr
}

func (e ebStorePink) Table(newTableName string) *ebStorePink {
	e.ebStorePinkDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStorePink) As(alias string) *ebStorePink {
	e.ebStorePinkDo.DO = *(e.ebStorePinkDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStorePink) updateTableName(table string) *ebStorePink {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.OrderID = field.NewString(table, "order_id")
	e.OrderIDKey = field.NewInt32(table, "order_id_key")
	e.TotalNum = field.NewInt32(table, "total_num")
	e.TotalPrice = field.NewFloat64(table, "total_price")
	e.Cid = field.NewInt32(table, "cid")
	e.Pid = field.NewInt32(table, "pid")
	e.People = field.NewInt32(table, "people")
	e.Price = field.NewFloat64(table, "price")
	e.AddTime = field.NewInt64(table, "add_time")
	e.StopTime = field.NewInt64(table, "stop_time")
	e.KID = field.NewInt32(table, "k_id")
	e.IsTpl = field.NewInt32(table, "is_tpl")
	e.IsRefund = field.NewInt32(table, "is_refund")
	e.Status = field.NewInt32(table, "status")
	e.IsVirtual = field.NewBool(table, "is_virtual")
	e.Nickname = field.NewString(table, "nickname")
	e.Avatar = field.NewString(table, "avatar")

	e.fillFieldMap()

	return e
}

func (e *ebStorePink) WithContext(ctx context.Context) IEbStorePinkDo {
	return e.ebStorePinkDo.WithContext(ctx)
}

func (e ebStorePink) TableName() string { return e.ebStorePinkDo.TableName() }

func (e ebStorePink) Alias() string { return e.ebStorePinkDo.Alias() }

func (e ebStorePink) Columns(cols ...field.Expr) gen.Columns { return e.ebStorePinkDo.Columns(cols...) }

func (e *ebStorePink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStorePink) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 19)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["order_id"] = e.OrderID
	e.fieldMap["order_id_key"] = e.OrderIDKey
	e.fieldMap["total_num"] = e.TotalNum
	e.fieldMap["total_price"] = e.TotalPrice
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["pid"] = e.Pid
	e.fieldMap["people"] = e.People
	e.fieldMap["price"] = e.Price
	e.fieldMap["add_time"] = e.AddTime
	e.fieldMap["stop_time"] = e.StopTime
	e.fieldMap["k_id"] = e.KID
	e.fieldMap["is_tpl"] = e.IsTpl
	e.fieldMap["is_refund"] = e.IsRefund
	e.fieldMap["status"] = e.Status
	e.fieldMap["is_virtual"] = e.IsVirtual
	e.fieldMap["nickname"] = e.Nickname
	e.fieldMap["avatar"] = e.Avatar
}

func (e ebStorePink) clone(db *gorm.DB) ebStorePink {
	e.ebStorePinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStorePink) replaceDB(db *gorm.DB) ebStorePink {
	e.ebStorePinkDo.ReplaceDB(db)
	return e
}

type ebStorePinkDo struct{ gen.DO }

type IEbStorePinkDo interface {
	gen.SubQuery
	Debug() IEbStorePinkDo
	WithContext(ctx context.Context) IEbStorePinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStorePinkDo
	WriteDB() IEbStorePinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStorePinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStorePinkDo
	Not(conds ...gen.Condition) IEbStorePinkDo
	Or(conds ...gen.Condition) IEbStorePinkDo
	Select(conds ...field.Expr) IEbStorePinkDo
	Where(conds ...gen.Condition) IEbStorePinkDo
	Order(conds ...field.Expr) IEbStorePinkDo
	Distinct(cols ...field.Expr) IEbStorePinkDo
	Omit(cols ...field.Expr) IEbStorePinkDo
	Join(table schema.Tabler, on ...field.Expr) IEbStorePinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStorePinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStorePinkDo
	Group(cols ...field.Expr) IEbStorePinkDo
	Having(conds ...gen.Condition) IEbStorePinkDo
	Limit(limit int) IEbStorePinkDo
	Offset(offset int) IEbStorePinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStorePinkDo
	Unscoped() IEbStorePinkDo
	Create(values ...*model.EbStorePink) error
	CreateInBatches(values []*model.EbStorePink, batchSize int) error
	Save(values ...*model.EbStorePink) error
	First() (*model.EbStorePink, error)
	Take() (*model.EbStorePink, error)
	Last() (*model.EbStorePink, error)
	Find() ([]*model.EbStorePink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStorePink, err error)
	FindInBatches(result *[]*model.EbStorePink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStorePink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStorePinkDo
	Assign(attrs ...field.AssignExpr) IEbStorePinkDo
	Joins(fields ...field.RelationField) IEbStorePinkDo
	Preload(fields ...field.RelationField) IEbStorePinkDo
	FirstOrInit() (*model.EbStorePink, error)
	FirstOrCreate() (*model.EbStorePink, error)
	FindByPage(offset int, limit int) (result []*model.EbStorePink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStorePinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStorePinkDo) Debug() IEbStorePinkDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStorePinkDo) WithContext(ctx context.Context) IEbStorePinkDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStorePinkDo) ReadDB() IEbStorePinkDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStorePinkDo) WriteDB() IEbStorePinkDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStorePinkDo) Session(config *gorm.Session) IEbStorePinkDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStorePinkDo) Clauses(conds ...clause.Expression) IEbStorePinkDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStorePinkDo) Returning(value interface{}, columns ...string) IEbStorePinkDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStorePinkDo) Not(conds ...gen.Condition) IEbStorePinkDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStorePinkDo) Or(conds ...gen.Condition) IEbStorePinkDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStorePinkDo) Select(conds ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStorePinkDo) Where(conds ...gen.Condition) IEbStorePinkDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStorePinkDo) Order(conds ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStorePinkDo) Distinct(cols ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStorePinkDo) Omit(cols ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStorePinkDo) Join(table schema.Tabler, on ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStorePinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStorePinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStorePinkDo) Group(cols ...field.Expr) IEbStorePinkDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStorePinkDo) Having(conds ...gen.Condition) IEbStorePinkDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStorePinkDo) Limit(limit int) IEbStorePinkDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStorePinkDo) Offset(offset int) IEbStorePinkDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStorePinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStorePinkDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStorePinkDo) Unscoped() IEbStorePinkDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStorePinkDo) Create(values ...*model.EbStorePink) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStorePinkDo) CreateInBatches(values []*model.EbStorePink, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStorePinkDo) Save(values ...*model.EbStorePink) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStorePinkDo) First() (*model.EbStorePink, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStorePink), nil
	}
}

func (e ebStorePinkDo) Take() (*model.EbStorePink, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStorePink), nil
	}
}

func (e ebStorePinkDo) Last() (*model.EbStorePink, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStorePink), nil
	}
}

func (e ebStorePinkDo) Find() ([]*model.EbStorePink, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStorePink), err
}

func (e ebStorePinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStorePink, err error) {
	buf := make([]*model.EbStorePink, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStorePinkDo) FindInBatches(result *[]*model.EbStorePink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStorePinkDo) Attrs(attrs ...field.AssignExpr) IEbStorePinkDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStorePinkDo) Assign(attrs ...field.AssignExpr) IEbStorePinkDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStorePinkDo) Joins(fields ...field.RelationField) IEbStorePinkDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStorePinkDo) Preload(fields ...field.RelationField) IEbStorePinkDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStorePinkDo) FirstOrInit() (*model.EbStorePink, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStorePink), nil
	}
}

func (e ebStorePinkDo) FirstOrCreate() (*model.EbStorePink, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStorePink), nil
	}
}

func (e ebStorePinkDo) FindByPage(offset int, limit int) (result []*model.EbStorePink, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStorePinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStorePinkDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStorePinkDo) Delete(models ...*model.EbStorePink) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStorePinkDo) withDO(do gen.Dao) *ebStorePinkDo {
	e.DO = *do.(*gen.DO)
	return e
}
