// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newShippingTemplates(db *gorm.DB, opts ...gen.DOOption) shippingTemplates {
	_shippingTemplates := shippingTemplates{}

	_shippingTemplates.shippingTemplatesDo.UseDB(db, opts...)
	_shippingTemplates.shippingTemplatesDo.UseModel(&model.ShippingTemplates{})

	tableName := _shippingTemplates.shippingTemplatesDo.TableName()
	_shippingTemplates.ALL = field.NewAsterisk(tableName)
	_shippingTemplates.ID = field.NewInt64(tableName, "id")
	_shippingTemplates.Name = field.NewString(tableName, "name")
	_shippingTemplates.Type = field.NewInt64(tableName, "type")
	_shippingTemplates.Appoint = field.NewInt64(tableName, "appoint")
	_shippingTemplates.Sort = field.NewInt64(tableName, "sort")
	_shippingTemplates.CreatedAt = field.NewInt64(tableName, "created_at")
	_shippingTemplates.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_shippingTemplates.DeletedAt = field.NewField(tableName, "deleted_at")

	_shippingTemplates.fillFieldMap()

	return _shippingTemplates
}

// shippingTemplates 运费模板
type shippingTemplates struct {
	shippingTemplatesDo shippingTemplatesDo

	ALL       field.Asterisk
	ID        field.Int64  // 编号
	Name      field.String // 模板名称
	Type      field.Int64  // 计费方式
	Appoint   field.Int64  // 指定包邮
	Sort      field.Int64  // 排序
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s shippingTemplates) Table(newTableName string) *shippingTemplates {
	s.shippingTemplatesDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shippingTemplates) As(alias string) *shippingTemplates {
	s.shippingTemplatesDo.DO = *(s.shippingTemplatesDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shippingTemplates) updateTableName(table string) *shippingTemplates {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Type = field.NewInt64(table, "type")
	s.Appoint = field.NewInt64(table, "appoint")
	s.Sort = field.NewInt64(table, "sort")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *shippingTemplates) WithContext(ctx context.Context) IShippingTemplatesDo {
	return s.shippingTemplatesDo.WithContext(ctx)
}

func (s shippingTemplates) TableName() string { return s.shippingTemplatesDo.TableName() }

func (s shippingTemplates) Alias() string { return s.shippingTemplatesDo.Alias() }

func (s shippingTemplates) Columns(cols ...field.Expr) gen.Columns {
	return s.shippingTemplatesDo.Columns(cols...)
}

func (s *shippingTemplates) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shippingTemplates) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["type"] = s.Type
	s.fieldMap["appoint"] = s.Appoint
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s shippingTemplates) clone(db *gorm.DB) shippingTemplates {
	s.shippingTemplatesDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shippingTemplates) replaceDB(db *gorm.DB) shippingTemplates {
	s.shippingTemplatesDo.ReplaceDB(db)
	return s
}

type shippingTemplatesDo struct{ gen.DO }

type IShippingTemplatesDo interface {
	gen.SubQuery
	Debug() IShippingTemplatesDo
	WithContext(ctx context.Context) IShippingTemplatesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IShippingTemplatesDo
	WriteDB() IShippingTemplatesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IShippingTemplatesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IShippingTemplatesDo
	Not(conds ...gen.Condition) IShippingTemplatesDo
	Or(conds ...gen.Condition) IShippingTemplatesDo
	Select(conds ...field.Expr) IShippingTemplatesDo
	Where(conds ...gen.Condition) IShippingTemplatesDo
	Order(conds ...field.Expr) IShippingTemplatesDo
	Distinct(cols ...field.Expr) IShippingTemplatesDo
	Omit(cols ...field.Expr) IShippingTemplatesDo
	Join(table schema.Tabler, on ...field.Expr) IShippingTemplatesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesDo
	Group(cols ...field.Expr) IShippingTemplatesDo
	Having(conds ...gen.Condition) IShippingTemplatesDo
	Limit(limit int) IShippingTemplatesDo
	Offset(offset int) IShippingTemplatesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IShippingTemplatesDo
	Unscoped() IShippingTemplatesDo
	Create(values ...*model.ShippingTemplates) error
	CreateInBatches(values []*model.ShippingTemplates, batchSize int) error
	Save(values ...*model.ShippingTemplates) error
	First() (*model.ShippingTemplates, error)
	Take() (*model.ShippingTemplates, error)
	Last() (*model.ShippingTemplates, error)
	Find() ([]*model.ShippingTemplates, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingTemplates, err error)
	FindInBatches(result *[]*model.ShippingTemplates, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ShippingTemplates) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IShippingTemplatesDo
	Assign(attrs ...field.AssignExpr) IShippingTemplatesDo
	Joins(fields ...field.RelationField) IShippingTemplatesDo
	Preload(fields ...field.RelationField) IShippingTemplatesDo
	FirstOrInit() (*model.ShippingTemplates, error)
	FirstOrCreate() (*model.ShippingTemplates, error)
	FindByPage(offset int, limit int) (result []*model.ShippingTemplates, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IShippingTemplatesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s shippingTemplatesDo) Debug() IShippingTemplatesDo {
	return s.withDO(s.DO.Debug())
}

func (s shippingTemplatesDo) WithContext(ctx context.Context) IShippingTemplatesDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shippingTemplatesDo) ReadDB() IShippingTemplatesDo {
	return s.Clauses(dbresolver.Read)
}

func (s shippingTemplatesDo) WriteDB() IShippingTemplatesDo {
	return s.Clauses(dbresolver.Write)
}

func (s shippingTemplatesDo) Session(config *gorm.Session) IShippingTemplatesDo {
	return s.withDO(s.DO.Session(config))
}

func (s shippingTemplatesDo) Clauses(conds ...clause.Expression) IShippingTemplatesDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shippingTemplatesDo) Returning(value interface{}, columns ...string) IShippingTemplatesDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shippingTemplatesDo) Not(conds ...gen.Condition) IShippingTemplatesDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shippingTemplatesDo) Or(conds ...gen.Condition) IShippingTemplatesDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shippingTemplatesDo) Select(conds ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shippingTemplatesDo) Where(conds ...gen.Condition) IShippingTemplatesDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shippingTemplatesDo) Order(conds ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shippingTemplatesDo) Distinct(cols ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shippingTemplatesDo) Omit(cols ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shippingTemplatesDo) Join(table schema.Tabler, on ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shippingTemplatesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shippingTemplatesDo) RightJoin(table schema.Tabler, on ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shippingTemplatesDo) Group(cols ...field.Expr) IShippingTemplatesDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shippingTemplatesDo) Having(conds ...gen.Condition) IShippingTemplatesDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shippingTemplatesDo) Limit(limit int) IShippingTemplatesDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shippingTemplatesDo) Offset(offset int) IShippingTemplatesDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shippingTemplatesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IShippingTemplatesDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shippingTemplatesDo) Unscoped() IShippingTemplatesDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shippingTemplatesDo) Create(values ...*model.ShippingTemplates) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shippingTemplatesDo) CreateInBatches(values []*model.ShippingTemplates, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shippingTemplatesDo) Save(values ...*model.ShippingTemplates) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shippingTemplatesDo) First() (*model.ShippingTemplates, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplates), nil
	}
}

func (s shippingTemplatesDo) Take() (*model.ShippingTemplates, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplates), nil
	}
}

func (s shippingTemplatesDo) Last() (*model.ShippingTemplates, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplates), nil
	}
}

func (s shippingTemplatesDo) Find() ([]*model.ShippingTemplates, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShippingTemplates), err
}

func (s shippingTemplatesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShippingTemplates, err error) {
	buf := make([]*model.ShippingTemplates, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shippingTemplatesDo) FindInBatches(result *[]*model.ShippingTemplates, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shippingTemplatesDo) Attrs(attrs ...field.AssignExpr) IShippingTemplatesDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shippingTemplatesDo) Assign(attrs ...field.AssignExpr) IShippingTemplatesDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shippingTemplatesDo) Joins(fields ...field.RelationField) IShippingTemplatesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shippingTemplatesDo) Preload(fields ...field.RelationField) IShippingTemplatesDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shippingTemplatesDo) FirstOrInit() (*model.ShippingTemplates, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplates), nil
	}
}

func (s shippingTemplatesDo) FirstOrCreate() (*model.ShippingTemplates, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShippingTemplates), nil
	}
}

func (s shippingTemplatesDo) FindByPage(offset int, limit int) (result []*model.ShippingTemplates, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shippingTemplatesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shippingTemplatesDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shippingTemplatesDo) Delete(models ...*model.ShippingTemplates) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shippingTemplatesDo) withDO(do gen.Dao) *shippingTemplatesDo {
	s.DO = *do.(*gen.DO)
	return s
}
