// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newUserBill(db *gorm.DB, opts ...gen.DOOption) userBill {
	_userBill := userBill{}

	_userBill.userBillDo.UseDB(db, opts...)
	_userBill.userBillDo.UseModel(&model.UserBill{})

	tableName := _userBill.userBillDo.TableName()
	_userBill.ALL = field.NewAsterisk(tableName)
	_userBill.ID = field.NewInt64(tableName, "id")
	_userBill.UID = field.NewInt64(tableName, "uid")
	_userBill.LinkID = field.NewString(tableName, "link_id")
	_userBill.Pm = field.NewInt64(tableName, "pm")
	_userBill.Title = field.NewString(tableName, "title")
	_userBill.Category = field.NewString(tableName, "category")
	_userBill.Type = field.NewString(tableName, "type")
	_userBill.Number = field.NewField(tableName, "number")
	_userBill.Balance = field.NewField(tableName, "balance")
	_userBill.Mark = field.NewString(tableName, "mark")
	_userBill.Status = field.NewInt64(tableName, "status")
	_userBill.CreatedAt = field.NewInt64(tableName, "created_at")
	_userBill.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userBill.DeletedAt = field.NewField(tableName, "deleted_at")

	_userBill.fillFieldMap()

	return _userBill
}

// userBill 用户账单表
type userBill struct {
	userBillDo userBillDo

	ALL       field.Asterisk
	ID        field.Int64  // 用户账单id
	UID       field.Int64  // 用户uid
	LinkID    field.String // 关联id
	Pm        field.Int64  // 0 = 支出 1 = 获得
	Title     field.String // 账单标题
	Category  field.String // 明细种类
	Type      field.String // 明细类型
	Number    field.Field  // 明细数字
	Balance   field.Field  // 剩余
	Mark      field.String // 备注
	Status    field.Int64  // 0 = 带确定 1 = 有效 -1 = 无效
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (u userBill) Table(newTableName string) *userBill {
	u.userBillDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBill) As(alias string) *userBill {
	u.userBillDo.DO = *(u.userBillDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBill) updateTableName(table string) *userBill {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.LinkID = field.NewString(table, "link_id")
	u.Pm = field.NewInt64(table, "pm")
	u.Title = field.NewString(table, "title")
	u.Category = field.NewString(table, "category")
	u.Type = field.NewString(table, "type")
	u.Number = field.NewField(table, "number")
	u.Balance = field.NewField(table, "balance")
	u.Mark = field.NewString(table, "mark")
	u.Status = field.NewInt64(table, "status")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userBill) WithContext(ctx context.Context) IUserBillDo { return u.userBillDo.WithContext(ctx) }

func (u userBill) TableName() string { return u.userBillDo.TableName() }

func (u userBill) Alias() string { return u.userBillDo.Alias() }

func (u userBill) Columns(cols ...field.Expr) gen.Columns { return u.userBillDo.Columns(cols...) }

func (u *userBill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBill) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["link_id"] = u.LinkID
	u.fieldMap["pm"] = u.Pm
	u.fieldMap["title"] = u.Title
	u.fieldMap["category"] = u.Category
	u.fieldMap["type"] = u.Type
	u.fieldMap["number"] = u.Number
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["mark"] = u.Mark
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userBill) clone(db *gorm.DB) userBill {
	u.userBillDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBill) replaceDB(db *gorm.DB) userBill {
	u.userBillDo.ReplaceDB(db)
	return u
}

type userBillDo struct{ gen.DO }

type IUserBillDo interface {
	gen.SubQuery
	Debug() IUserBillDo
	WithContext(ctx context.Context) IUserBillDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBillDo
	WriteDB() IUserBillDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBillDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBillDo
	Not(conds ...gen.Condition) IUserBillDo
	Or(conds ...gen.Condition) IUserBillDo
	Select(conds ...field.Expr) IUserBillDo
	Where(conds ...gen.Condition) IUserBillDo
	Order(conds ...field.Expr) IUserBillDo
	Distinct(cols ...field.Expr) IUserBillDo
	Omit(cols ...field.Expr) IUserBillDo
	Join(table schema.Tabler, on ...field.Expr) IUserBillDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBillDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBillDo
	Group(cols ...field.Expr) IUserBillDo
	Having(conds ...gen.Condition) IUserBillDo
	Limit(limit int) IUserBillDo
	Offset(offset int) IUserBillDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBillDo
	Unscoped() IUserBillDo
	Create(values ...*model.UserBill) error
	CreateInBatches(values []*model.UserBill, batchSize int) error
	Save(values ...*model.UserBill) error
	First() (*model.UserBill, error)
	Take() (*model.UserBill, error)
	Last() (*model.UserBill, error)
	Find() ([]*model.UserBill, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBill, err error)
	FindInBatches(result *[]*model.UserBill, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBill) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBillDo
	Assign(attrs ...field.AssignExpr) IUserBillDo
	Joins(fields ...field.RelationField) IUserBillDo
	Preload(fields ...field.RelationField) IUserBillDo
	FirstOrInit() (*model.UserBill, error)
	FirstOrCreate() (*model.UserBill, error)
	FindByPage(offset int, limit int) (result []*model.UserBill, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBillDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBillDo) Debug() IUserBillDo {
	return u.withDO(u.DO.Debug())
}

func (u userBillDo) WithContext(ctx context.Context) IUserBillDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBillDo) ReadDB() IUserBillDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBillDo) WriteDB() IUserBillDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBillDo) Session(config *gorm.Session) IUserBillDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBillDo) Clauses(conds ...clause.Expression) IUserBillDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBillDo) Returning(value interface{}, columns ...string) IUserBillDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBillDo) Not(conds ...gen.Condition) IUserBillDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBillDo) Or(conds ...gen.Condition) IUserBillDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBillDo) Select(conds ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBillDo) Where(conds ...gen.Condition) IUserBillDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBillDo) Order(conds ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBillDo) Distinct(cols ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBillDo) Omit(cols ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBillDo) Join(table schema.Tabler, on ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBillDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBillDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBillDo) Group(cols ...field.Expr) IUserBillDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBillDo) Having(conds ...gen.Condition) IUserBillDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBillDo) Limit(limit int) IUserBillDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBillDo) Offset(offset int) IUserBillDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBillDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBillDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBillDo) Unscoped() IUserBillDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBillDo) Create(values ...*model.UserBill) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBillDo) CreateInBatches(values []*model.UserBill, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBillDo) Save(values ...*model.UserBill) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBillDo) First() (*model.UserBill, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBill), nil
	}
}

func (u userBillDo) Take() (*model.UserBill, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBill), nil
	}
}

func (u userBillDo) Last() (*model.UserBill, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBill), nil
	}
}

func (u userBillDo) Find() ([]*model.UserBill, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBill), err
}

func (u userBillDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBill, err error) {
	buf := make([]*model.UserBill, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBillDo) FindInBatches(result *[]*model.UserBill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBillDo) Attrs(attrs ...field.AssignExpr) IUserBillDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBillDo) Assign(attrs ...field.AssignExpr) IUserBillDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBillDo) Joins(fields ...field.RelationField) IUserBillDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBillDo) Preload(fields ...field.RelationField) IUserBillDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBillDo) FirstOrInit() (*model.UserBill, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBill), nil
	}
}

func (u userBillDo) FirstOrCreate() (*model.UserBill, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBill), nil
	}
}

func (u userBillDo) FindByPage(offset int, limit int) (result []*model.UserBill, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBillDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBillDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBillDo) Delete(models ...*model.UserBill) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBillDo) withDO(do gen.Dao) *userBillDo {
	u.DO = *do.(*gen.DO)
	return u
}
