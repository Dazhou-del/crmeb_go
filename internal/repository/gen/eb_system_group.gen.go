// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemGroup(db *gorm.DB, opts ...gen.DOOption) ebSystemGroup {
	_ebSystemGroup := ebSystemGroup{}

	_ebSystemGroup.ebSystemGroupDo.UseDB(db, opts...)
	_ebSystemGroup.ebSystemGroupDo.UseModel(&model.EbSystemGroup{})

	tableName := _ebSystemGroup.ebSystemGroupDo.TableName()
	_ebSystemGroup.ALL = field.NewAsterisk(tableName)
	_ebSystemGroup.ID = field.NewInt32(tableName, "id")
	_ebSystemGroup.Name = field.NewString(tableName, "name")
	_ebSystemGroup.Info = field.NewString(tableName, "info")
	_ebSystemGroup.FormID = field.NewInt32(tableName, "form_id")
	_ebSystemGroup.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemGroup.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemGroup.fillFieldMap()

	return _ebSystemGroup
}

// ebSystemGroup 组合数据表
type ebSystemGroup struct {
	ebSystemGroupDo ebSystemGroupDo

	ALL        field.Asterisk
	ID         field.Int32  // 组合数据ID
	Name       field.String // 数据组名称
	Info       field.String // 简介
	FormID     field.Int32  // form 表单 id
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemGroup) Table(newTableName string) *ebSystemGroup {
	e.ebSystemGroupDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemGroup) As(alias string) *ebSystemGroup {
	e.ebSystemGroupDo.DO = *(e.ebSystemGroupDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemGroup) updateTableName(table string) *ebSystemGroup {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Info = field.NewString(table, "info")
	e.FormID = field.NewInt32(table, "form_id")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemGroup) WithContext(ctx context.Context) IEbSystemGroupDo {
	return e.ebSystemGroupDo.WithContext(ctx)
}

func (e ebSystemGroup) TableName() string { return e.ebSystemGroupDo.TableName() }

func (e ebSystemGroup) Alias() string { return e.ebSystemGroupDo.Alias() }

func (e ebSystemGroup) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemGroupDo.Columns(cols...)
}

func (e *ebSystemGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemGroup) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["info"] = e.Info
	e.fieldMap["form_id"] = e.FormID
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemGroup) clone(db *gorm.DB) ebSystemGroup {
	e.ebSystemGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemGroup) replaceDB(db *gorm.DB) ebSystemGroup {
	e.ebSystemGroupDo.ReplaceDB(db)
	return e
}

type ebSystemGroupDo struct{ gen.DO }

type IEbSystemGroupDo interface {
	gen.SubQuery
	Debug() IEbSystemGroupDo
	WithContext(ctx context.Context) IEbSystemGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemGroupDo
	WriteDB() IEbSystemGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemGroupDo
	Not(conds ...gen.Condition) IEbSystemGroupDo
	Or(conds ...gen.Condition) IEbSystemGroupDo
	Select(conds ...field.Expr) IEbSystemGroupDo
	Where(conds ...gen.Condition) IEbSystemGroupDo
	Order(conds ...field.Expr) IEbSystemGroupDo
	Distinct(cols ...field.Expr) IEbSystemGroupDo
	Omit(cols ...field.Expr) IEbSystemGroupDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemGroupDo
	Group(cols ...field.Expr) IEbSystemGroupDo
	Having(conds ...gen.Condition) IEbSystemGroupDo
	Limit(limit int) IEbSystemGroupDo
	Offset(offset int) IEbSystemGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemGroupDo
	Unscoped() IEbSystemGroupDo
	Create(values ...*model.EbSystemGroup) error
	CreateInBatches(values []*model.EbSystemGroup, batchSize int) error
	Save(values ...*model.EbSystemGroup) error
	First() (*model.EbSystemGroup, error)
	Take() (*model.EbSystemGroup, error)
	Last() (*model.EbSystemGroup, error)
	Find() ([]*model.EbSystemGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemGroup, err error)
	FindInBatches(result *[]*model.EbSystemGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemGroupDo
	Assign(attrs ...field.AssignExpr) IEbSystemGroupDo
	Joins(fields ...field.RelationField) IEbSystemGroupDo
	Preload(fields ...field.RelationField) IEbSystemGroupDo
	FirstOrInit() (*model.EbSystemGroup, error)
	FirstOrCreate() (*model.EbSystemGroup, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemGroupDo) Debug() IEbSystemGroupDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemGroupDo) WithContext(ctx context.Context) IEbSystemGroupDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemGroupDo) ReadDB() IEbSystemGroupDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemGroupDo) WriteDB() IEbSystemGroupDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemGroupDo) Session(config *gorm.Session) IEbSystemGroupDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemGroupDo) Clauses(conds ...clause.Expression) IEbSystemGroupDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemGroupDo) Returning(value interface{}, columns ...string) IEbSystemGroupDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemGroupDo) Not(conds ...gen.Condition) IEbSystemGroupDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemGroupDo) Or(conds ...gen.Condition) IEbSystemGroupDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemGroupDo) Select(conds ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemGroupDo) Where(conds ...gen.Condition) IEbSystemGroupDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemGroupDo) Order(conds ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemGroupDo) Distinct(cols ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemGroupDo) Omit(cols ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemGroupDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemGroupDo) Group(cols ...field.Expr) IEbSystemGroupDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemGroupDo) Having(conds ...gen.Condition) IEbSystemGroupDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemGroupDo) Limit(limit int) IEbSystemGroupDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemGroupDo) Offset(offset int) IEbSystemGroupDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemGroupDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemGroupDo) Unscoped() IEbSystemGroupDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemGroupDo) Create(values ...*model.EbSystemGroup) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemGroupDo) CreateInBatches(values []*model.EbSystemGroup, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemGroupDo) Save(values ...*model.EbSystemGroup) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemGroupDo) First() (*model.EbSystemGroup, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemGroup), nil
	}
}

func (e ebSystemGroupDo) Take() (*model.EbSystemGroup, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemGroup), nil
	}
}

func (e ebSystemGroupDo) Last() (*model.EbSystemGroup, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemGroup), nil
	}
}

func (e ebSystemGroupDo) Find() ([]*model.EbSystemGroup, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemGroup), err
}

func (e ebSystemGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemGroup, err error) {
	buf := make([]*model.EbSystemGroup, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemGroupDo) FindInBatches(result *[]*model.EbSystemGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemGroupDo) Attrs(attrs ...field.AssignExpr) IEbSystemGroupDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemGroupDo) Assign(attrs ...field.AssignExpr) IEbSystemGroupDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemGroupDo) Joins(fields ...field.RelationField) IEbSystemGroupDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemGroupDo) Preload(fields ...field.RelationField) IEbSystemGroupDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemGroupDo) FirstOrInit() (*model.EbSystemGroup, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemGroup), nil
	}
}

func (e ebSystemGroupDo) FirstOrCreate() (*model.EbSystemGroup, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemGroup), nil
	}
}

func (e ebSystemGroupDo) FindByPage(offset int, limit int) (result []*model.EbSystemGroup, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemGroupDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemGroupDo) Delete(models ...*model.EbSystemGroup) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemGroupDo) withDO(do gen.Dao) *ebSystemGroupDo {
	e.DO = *do.(*gen.DO)
	return e
}
