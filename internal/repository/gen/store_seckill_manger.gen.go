// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newStoreSeckillManger(db *gorm.DB, opts ...gen.DOOption) storeSeckillManger {
	_storeSeckillManger := storeSeckillManger{}

	_storeSeckillManger.storeSeckillMangerDo.UseDB(db, opts...)
	_storeSeckillManger.storeSeckillMangerDo.UseModel(&model.StoreSeckillManger{})

	tableName := _storeSeckillManger.storeSeckillMangerDo.TableName()
	_storeSeckillManger.ALL = field.NewAsterisk(tableName)
	_storeSeckillManger.ID = field.NewInt64(tableName, "id")
	_storeSeckillManger.Name = field.NewString(tableName, "name")
	_storeSeckillManger.StartTime = field.NewInt64(tableName, "start_time")
	_storeSeckillManger.EndTime = field.NewInt64(tableName, "end_time")
	_storeSeckillManger.Img = field.NewString(tableName, "img")
	_storeSeckillManger.SilderImgs = field.NewString(tableName, "silder_imgs")
	_storeSeckillManger.Sort = field.NewInt64(tableName, "sort")
	_storeSeckillManger.Status = field.NewInt64(tableName, "status")
	_storeSeckillManger.CreatedAt = field.NewInt64(tableName, "created_at")
	_storeSeckillManger.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_storeSeckillManger.DeletedAt = field.NewField(tableName, "deleted_at")

	_storeSeckillManger.fillFieldMap()

	return _storeSeckillManger
}

type storeSeckillManger struct {
	storeSeckillMangerDo storeSeckillMangerDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String // 秒杀名称
	StartTime  field.Int64  // 秒杀开始时间段
	EndTime    field.Int64  // 秒杀结束时间段
	Img        field.String // 主图
	SilderImgs field.String // 轮播图
	Sort       field.Int64  // 排序
	Status     field.Int64  // 状态 0=关闭 1=开启
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s storeSeckillManger) Table(newTableName string) *storeSeckillManger {
	s.storeSeckillMangerDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storeSeckillManger) As(alias string) *storeSeckillManger {
	s.storeSeckillMangerDo.DO = *(s.storeSeckillMangerDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storeSeckillManger) updateTableName(table string) *storeSeckillManger {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.StartTime = field.NewInt64(table, "start_time")
	s.EndTime = field.NewInt64(table, "end_time")
	s.Img = field.NewString(table, "img")
	s.SilderImgs = field.NewString(table, "silder_imgs")
	s.Sort = field.NewInt64(table, "sort")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *storeSeckillManger) WithContext(ctx context.Context) IStoreSeckillMangerDo {
	return s.storeSeckillMangerDo.WithContext(ctx)
}

func (s storeSeckillManger) TableName() string { return s.storeSeckillMangerDo.TableName() }

func (s storeSeckillManger) Alias() string { return s.storeSeckillMangerDo.Alias() }

func (s storeSeckillManger) Columns(cols ...field.Expr) gen.Columns {
	return s.storeSeckillMangerDo.Columns(cols...)
}

func (s *storeSeckillManger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storeSeckillManger) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["start_time"] = s.StartTime
	s.fieldMap["end_time"] = s.EndTime
	s.fieldMap["img"] = s.Img
	s.fieldMap["silder_imgs"] = s.SilderImgs
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s storeSeckillManger) clone(db *gorm.DB) storeSeckillManger {
	s.storeSeckillMangerDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storeSeckillManger) replaceDB(db *gorm.DB) storeSeckillManger {
	s.storeSeckillMangerDo.ReplaceDB(db)
	return s
}

type storeSeckillMangerDo struct{ gen.DO }

type IStoreSeckillMangerDo interface {
	gen.SubQuery
	Debug() IStoreSeckillMangerDo
	WithContext(ctx context.Context) IStoreSeckillMangerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreSeckillMangerDo
	WriteDB() IStoreSeckillMangerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreSeckillMangerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreSeckillMangerDo
	Not(conds ...gen.Condition) IStoreSeckillMangerDo
	Or(conds ...gen.Condition) IStoreSeckillMangerDo
	Select(conds ...field.Expr) IStoreSeckillMangerDo
	Where(conds ...gen.Condition) IStoreSeckillMangerDo
	Order(conds ...field.Expr) IStoreSeckillMangerDo
	Distinct(cols ...field.Expr) IStoreSeckillMangerDo
	Omit(cols ...field.Expr) IStoreSeckillMangerDo
	Join(table schema.Tabler, on ...field.Expr) IStoreSeckillMangerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreSeckillMangerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreSeckillMangerDo
	Group(cols ...field.Expr) IStoreSeckillMangerDo
	Having(conds ...gen.Condition) IStoreSeckillMangerDo
	Limit(limit int) IStoreSeckillMangerDo
	Offset(offset int) IStoreSeckillMangerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreSeckillMangerDo
	Unscoped() IStoreSeckillMangerDo
	Create(values ...*model.StoreSeckillManger) error
	CreateInBatches(values []*model.StoreSeckillManger, batchSize int) error
	Save(values ...*model.StoreSeckillManger) error
	First() (*model.StoreSeckillManger, error)
	Take() (*model.StoreSeckillManger, error)
	Last() (*model.StoreSeckillManger, error)
	Find() ([]*model.StoreSeckillManger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreSeckillManger, err error)
	FindInBatches(result *[]*model.StoreSeckillManger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StoreSeckillManger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreSeckillMangerDo
	Assign(attrs ...field.AssignExpr) IStoreSeckillMangerDo
	Joins(fields ...field.RelationField) IStoreSeckillMangerDo
	Preload(fields ...field.RelationField) IStoreSeckillMangerDo
	FirstOrInit() (*model.StoreSeckillManger, error)
	FirstOrCreate() (*model.StoreSeckillManger, error)
	FindByPage(offset int, limit int) (result []*model.StoreSeckillManger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreSeckillMangerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeSeckillMangerDo) Debug() IStoreSeckillMangerDo {
	return s.withDO(s.DO.Debug())
}

func (s storeSeckillMangerDo) WithContext(ctx context.Context) IStoreSeckillMangerDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeSeckillMangerDo) ReadDB() IStoreSeckillMangerDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeSeckillMangerDo) WriteDB() IStoreSeckillMangerDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeSeckillMangerDo) Session(config *gorm.Session) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeSeckillMangerDo) Clauses(conds ...clause.Expression) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeSeckillMangerDo) Returning(value interface{}, columns ...string) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeSeckillMangerDo) Not(conds ...gen.Condition) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeSeckillMangerDo) Or(conds ...gen.Condition) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeSeckillMangerDo) Select(conds ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeSeckillMangerDo) Where(conds ...gen.Condition) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeSeckillMangerDo) Order(conds ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeSeckillMangerDo) Distinct(cols ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeSeckillMangerDo) Omit(cols ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeSeckillMangerDo) Join(table schema.Tabler, on ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeSeckillMangerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeSeckillMangerDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeSeckillMangerDo) Group(cols ...field.Expr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeSeckillMangerDo) Having(conds ...gen.Condition) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeSeckillMangerDo) Limit(limit int) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeSeckillMangerDo) Offset(offset int) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeSeckillMangerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeSeckillMangerDo) Unscoped() IStoreSeckillMangerDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeSeckillMangerDo) Create(values ...*model.StoreSeckillManger) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeSeckillMangerDo) CreateInBatches(values []*model.StoreSeckillManger, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeSeckillMangerDo) Save(values ...*model.StoreSeckillManger) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeSeckillMangerDo) First() (*model.StoreSeckillManger, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreSeckillManger), nil
	}
}

func (s storeSeckillMangerDo) Take() (*model.StoreSeckillManger, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreSeckillManger), nil
	}
}

func (s storeSeckillMangerDo) Last() (*model.StoreSeckillManger, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreSeckillManger), nil
	}
}

func (s storeSeckillMangerDo) Find() ([]*model.StoreSeckillManger, error) {
	result, err := s.DO.Find()
	return result.([]*model.StoreSeckillManger), err
}

func (s storeSeckillMangerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreSeckillManger, err error) {
	buf := make([]*model.StoreSeckillManger, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeSeckillMangerDo) FindInBatches(result *[]*model.StoreSeckillManger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeSeckillMangerDo) Attrs(attrs ...field.AssignExpr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeSeckillMangerDo) Assign(attrs ...field.AssignExpr) IStoreSeckillMangerDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeSeckillMangerDo) Joins(fields ...field.RelationField) IStoreSeckillMangerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeSeckillMangerDo) Preload(fields ...field.RelationField) IStoreSeckillMangerDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeSeckillMangerDo) FirstOrInit() (*model.StoreSeckillManger, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreSeckillManger), nil
	}
}

func (s storeSeckillMangerDo) FirstOrCreate() (*model.StoreSeckillManger, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreSeckillManger), nil
	}
}

func (s storeSeckillMangerDo) FindByPage(offset int, limit int) (result []*model.StoreSeckillManger, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeSeckillMangerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeSeckillMangerDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeSeckillMangerDo) Delete(models ...*model.StoreSeckillManger) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeSeckillMangerDo) withDO(do gen.Dao) *storeSeckillMangerDo {
	s.DO = *do.(*gen.DO)
	return s
}
