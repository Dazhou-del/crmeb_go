// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemMenu(db *gorm.DB, opts ...gen.DOOption) ebSystemMenu {
	_ebSystemMenu := ebSystemMenu{}

	_ebSystemMenu.ebSystemMenuDo.UseDB(db, opts...)
	_ebSystemMenu.ebSystemMenuDo.UseModel(&model.EbSystemMenu{})

	tableName := _ebSystemMenu.ebSystemMenuDo.TableName()
	_ebSystemMenu.ALL = field.NewAsterisk(tableName)
	_ebSystemMenu.ID = field.NewInt32(tableName, "id")
	_ebSystemMenu.Pid = field.NewInt32(tableName, "pid")
	_ebSystemMenu.Name = field.NewString(tableName, "name")
	_ebSystemMenu.Icon = field.NewString(tableName, "icon")
	_ebSystemMenu.Perms = field.NewString(tableName, "perms")
	_ebSystemMenu.Component = field.NewString(tableName, "component")
	_ebSystemMenu.MenuType = field.NewString(tableName, "menu_type")
	_ebSystemMenu.Sort = field.NewInt32(tableName, "sort")
	_ebSystemMenu.IsShow = field.NewBool(tableName, "is_show")
	_ebSystemMenu.IsDelte = field.NewInt32(tableName, "is_delte")
	_ebSystemMenu.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemMenu.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemMenu.fillFieldMap()

	return _ebSystemMenu
}

// ebSystemMenu 系统菜单表
type ebSystemMenu struct {
	ebSystemMenuDo ebSystemMenuDo

	ALL        field.Asterisk
	ID         field.Int32
	Pid        field.Int32  // 父级ID
	Name       field.String // 名称
	Icon       field.String // icon
	Perms      field.String // 权限标识
	Component  field.String // 组件路径
	MenuType   field.String // 类型，M-目录，C-菜单，A-按钮
	Sort       field.Int32  // 排序
	IsShow     field.Bool   // 显示状态
	IsDelte    field.Int32  // 是否删除
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemMenu) Table(newTableName string) *ebSystemMenu {
	e.ebSystemMenuDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemMenu) As(alias string) *ebSystemMenu {
	e.ebSystemMenuDo.DO = *(e.ebSystemMenuDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemMenu) updateTableName(table string) *ebSystemMenu {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Pid = field.NewInt32(table, "pid")
	e.Name = field.NewString(table, "name")
	e.Icon = field.NewString(table, "icon")
	e.Perms = field.NewString(table, "perms")
	e.Component = field.NewString(table, "component")
	e.MenuType = field.NewString(table, "menu_type")
	e.Sort = field.NewInt32(table, "sort")
	e.IsShow = field.NewBool(table, "is_show")
	e.IsDelte = field.NewInt32(table, "is_delte")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemMenu) WithContext(ctx context.Context) IEbSystemMenuDo {
	return e.ebSystemMenuDo.WithContext(ctx)
}

func (e ebSystemMenu) TableName() string { return e.ebSystemMenuDo.TableName() }

func (e ebSystemMenu) Alias() string { return e.ebSystemMenuDo.Alias() }

func (e ebSystemMenu) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemMenuDo.Columns(cols...)
}

func (e *ebSystemMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemMenu) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["pid"] = e.Pid
	e.fieldMap["name"] = e.Name
	e.fieldMap["icon"] = e.Icon
	e.fieldMap["perms"] = e.Perms
	e.fieldMap["component"] = e.Component
	e.fieldMap["menu_type"] = e.MenuType
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["is_show"] = e.IsShow
	e.fieldMap["is_delte"] = e.IsDelte
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemMenu) clone(db *gorm.DB) ebSystemMenu {
	e.ebSystemMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemMenu) replaceDB(db *gorm.DB) ebSystemMenu {
	e.ebSystemMenuDo.ReplaceDB(db)
	return e
}

type ebSystemMenuDo struct{ gen.DO }

type IEbSystemMenuDo interface {
	gen.SubQuery
	Debug() IEbSystemMenuDo
	WithContext(ctx context.Context) IEbSystemMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemMenuDo
	WriteDB() IEbSystemMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemMenuDo
	Not(conds ...gen.Condition) IEbSystemMenuDo
	Or(conds ...gen.Condition) IEbSystemMenuDo
	Select(conds ...field.Expr) IEbSystemMenuDo
	Where(conds ...gen.Condition) IEbSystemMenuDo
	Order(conds ...field.Expr) IEbSystemMenuDo
	Distinct(cols ...field.Expr) IEbSystemMenuDo
	Omit(cols ...field.Expr) IEbSystemMenuDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemMenuDo
	Group(cols ...field.Expr) IEbSystemMenuDo
	Having(conds ...gen.Condition) IEbSystemMenuDo
	Limit(limit int) IEbSystemMenuDo
	Offset(offset int) IEbSystemMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemMenuDo
	Unscoped() IEbSystemMenuDo
	Create(values ...*model.EbSystemMenu) error
	CreateInBatches(values []*model.EbSystemMenu, batchSize int) error
	Save(values ...*model.EbSystemMenu) error
	First() (*model.EbSystemMenu, error)
	Take() (*model.EbSystemMenu, error)
	Last() (*model.EbSystemMenu, error)
	Find() ([]*model.EbSystemMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemMenu, err error)
	FindInBatches(result *[]*model.EbSystemMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemMenuDo
	Assign(attrs ...field.AssignExpr) IEbSystemMenuDo
	Joins(fields ...field.RelationField) IEbSystemMenuDo
	Preload(fields ...field.RelationField) IEbSystemMenuDo
	FirstOrInit() (*model.EbSystemMenu, error)
	FirstOrCreate() (*model.EbSystemMenu, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemMenuDo) Debug() IEbSystemMenuDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemMenuDo) WithContext(ctx context.Context) IEbSystemMenuDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemMenuDo) ReadDB() IEbSystemMenuDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemMenuDo) WriteDB() IEbSystemMenuDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemMenuDo) Session(config *gorm.Session) IEbSystemMenuDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemMenuDo) Clauses(conds ...clause.Expression) IEbSystemMenuDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemMenuDo) Returning(value interface{}, columns ...string) IEbSystemMenuDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemMenuDo) Not(conds ...gen.Condition) IEbSystemMenuDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemMenuDo) Or(conds ...gen.Condition) IEbSystemMenuDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemMenuDo) Select(conds ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemMenuDo) Where(conds ...gen.Condition) IEbSystemMenuDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemMenuDo) Order(conds ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemMenuDo) Distinct(cols ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemMenuDo) Omit(cols ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemMenuDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemMenuDo) Group(cols ...field.Expr) IEbSystemMenuDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemMenuDo) Having(conds ...gen.Condition) IEbSystemMenuDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemMenuDo) Limit(limit int) IEbSystemMenuDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemMenuDo) Offset(offset int) IEbSystemMenuDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemMenuDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemMenuDo) Unscoped() IEbSystemMenuDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemMenuDo) Create(values ...*model.EbSystemMenu) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemMenuDo) CreateInBatches(values []*model.EbSystemMenu, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemMenuDo) Save(values ...*model.EbSystemMenu) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemMenuDo) First() (*model.EbSystemMenu, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemMenu), nil
	}
}

func (e ebSystemMenuDo) Take() (*model.EbSystemMenu, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemMenu), nil
	}
}

func (e ebSystemMenuDo) Last() (*model.EbSystemMenu, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemMenu), nil
	}
}

func (e ebSystemMenuDo) Find() ([]*model.EbSystemMenu, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemMenu), err
}

func (e ebSystemMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemMenu, err error) {
	buf := make([]*model.EbSystemMenu, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemMenuDo) FindInBatches(result *[]*model.EbSystemMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemMenuDo) Attrs(attrs ...field.AssignExpr) IEbSystemMenuDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemMenuDo) Assign(attrs ...field.AssignExpr) IEbSystemMenuDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemMenuDo) Joins(fields ...field.RelationField) IEbSystemMenuDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemMenuDo) Preload(fields ...field.RelationField) IEbSystemMenuDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemMenuDo) FirstOrInit() (*model.EbSystemMenu, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemMenu), nil
	}
}

func (e ebSystemMenuDo) FirstOrCreate() (*model.EbSystemMenu, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemMenu), nil
	}
}

func (e ebSystemMenuDo) FindByPage(offset int, limit int) (result []*model.EbSystemMenu, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemMenuDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemMenuDo) Delete(models ...*model.EbSystemMenu) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemMenuDo) withDO(do gen.Dao) *ebSystemMenuDo {
	e.DO = *do.(*gen.DO)
	return e
}
