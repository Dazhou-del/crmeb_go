// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newUserRecharge(db *gorm.DB, opts ...gen.DOOption) userRecharge {
	_userRecharge := userRecharge{}

	_userRecharge.userRechargeDo.UseDB(db, opts...)
	_userRecharge.userRechargeDo.UseModel(&model.UserRecharge{})

	tableName := _userRecharge.userRechargeDo.TableName()
	_userRecharge.ALL = field.NewAsterisk(tableName)
	_userRecharge.ID = field.NewInt64(tableName, "id")
	_userRecharge.UID = field.NewInt64(tableName, "uid")
	_userRecharge.OrderID = field.NewString(tableName, "order_id")
	_userRecharge.Price = field.NewString(tableName, "price")
	_userRecharge.GivePrice = field.NewString(tableName, "give_price")
	_userRecharge.RechargeType = field.NewString(tableName, "recharge_type")
	_userRecharge.Paid = field.NewInt64(tableName, "paid")
	_userRecharge.PayTime = field.NewInt64(tableName, "pay_time")
	_userRecharge.RefundPrice = field.NewString(tableName, "refund_price")
	_userRecharge.CreatedAt = field.NewInt64(tableName, "created_at")
	_userRecharge.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userRecharge.DeletedAt = field.NewField(tableName, "deleted_at")

	_userRecharge.fillFieldMap()

	return _userRecharge
}

// userRecharge 用户充值表
type userRecharge struct {
	userRechargeDo userRechargeDo

	ALL          field.Asterisk
	ID           field.Int64
	UID          field.Int64  // 充值用户UID
	OrderID      field.String // 订单号
	Price        field.String // 充值金额
	GivePrice    field.String // 购买赠送金额
	RechargeType field.String // 充值类型
	Paid         field.Int64  // 是否充值
	PayTime      field.Int64
	RefundPrice  field.String // 退款金额
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (u userRecharge) Table(newTableName string) *userRecharge {
	u.userRechargeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRecharge) As(alias string) *userRecharge {
	u.userRechargeDo.DO = *(u.userRechargeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRecharge) updateTableName(table string) *userRecharge {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.OrderID = field.NewString(table, "order_id")
	u.Price = field.NewString(table, "price")
	u.GivePrice = field.NewString(table, "give_price")
	u.RechargeType = field.NewString(table, "recharge_type")
	u.Paid = field.NewInt64(table, "paid")
	u.PayTime = field.NewInt64(table, "pay_time")
	u.RefundPrice = field.NewString(table, "refund_price")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userRecharge) WithContext(ctx context.Context) IUserRechargeDo {
	return u.userRechargeDo.WithContext(ctx)
}

func (u userRecharge) TableName() string { return u.userRechargeDo.TableName() }

func (u userRecharge) Alias() string { return u.userRechargeDo.Alias() }

func (u userRecharge) Columns(cols ...field.Expr) gen.Columns {
	return u.userRechargeDo.Columns(cols...)
}

func (u *userRecharge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRecharge) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["order_id"] = u.OrderID
	u.fieldMap["price"] = u.Price
	u.fieldMap["give_price"] = u.GivePrice
	u.fieldMap["recharge_type"] = u.RechargeType
	u.fieldMap["paid"] = u.Paid
	u.fieldMap["pay_time"] = u.PayTime
	u.fieldMap["refund_price"] = u.RefundPrice
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userRecharge) clone(db *gorm.DB) userRecharge {
	u.userRechargeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRecharge) replaceDB(db *gorm.DB) userRecharge {
	u.userRechargeDo.ReplaceDB(db)
	return u
}

type userRechargeDo struct{ gen.DO }

type IUserRechargeDo interface {
	gen.SubQuery
	Debug() IUserRechargeDo
	WithContext(ctx context.Context) IUserRechargeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRechargeDo
	WriteDB() IUserRechargeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRechargeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRechargeDo
	Not(conds ...gen.Condition) IUserRechargeDo
	Or(conds ...gen.Condition) IUserRechargeDo
	Select(conds ...field.Expr) IUserRechargeDo
	Where(conds ...gen.Condition) IUserRechargeDo
	Order(conds ...field.Expr) IUserRechargeDo
	Distinct(cols ...field.Expr) IUserRechargeDo
	Omit(cols ...field.Expr) IUserRechargeDo
	Join(table schema.Tabler, on ...field.Expr) IUserRechargeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDo
	Group(cols ...field.Expr) IUserRechargeDo
	Having(conds ...gen.Condition) IUserRechargeDo
	Limit(limit int) IUserRechargeDo
	Offset(offset int) IUserRechargeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRechargeDo
	Unscoped() IUserRechargeDo
	Create(values ...*model.UserRecharge) error
	CreateInBatches(values []*model.UserRecharge, batchSize int) error
	Save(values ...*model.UserRecharge) error
	First() (*model.UserRecharge, error)
	Take() (*model.UserRecharge, error)
	Last() (*model.UserRecharge, error)
	Find() ([]*model.UserRecharge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRecharge, err error)
	FindInBatches(result *[]*model.UserRecharge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRecharge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRechargeDo
	Assign(attrs ...field.AssignExpr) IUserRechargeDo
	Joins(fields ...field.RelationField) IUserRechargeDo
	Preload(fields ...field.RelationField) IUserRechargeDo
	FirstOrInit() (*model.UserRecharge, error)
	FirstOrCreate() (*model.UserRecharge, error)
	FindByPage(offset int, limit int) (result []*model.UserRecharge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRechargeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRechargeDo) Debug() IUserRechargeDo {
	return u.withDO(u.DO.Debug())
}

func (u userRechargeDo) WithContext(ctx context.Context) IUserRechargeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRechargeDo) ReadDB() IUserRechargeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRechargeDo) WriteDB() IUserRechargeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRechargeDo) Session(config *gorm.Session) IUserRechargeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRechargeDo) Clauses(conds ...clause.Expression) IUserRechargeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRechargeDo) Returning(value interface{}, columns ...string) IUserRechargeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRechargeDo) Not(conds ...gen.Condition) IUserRechargeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRechargeDo) Or(conds ...gen.Condition) IUserRechargeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRechargeDo) Select(conds ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRechargeDo) Where(conds ...gen.Condition) IUserRechargeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRechargeDo) Order(conds ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRechargeDo) Distinct(cols ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRechargeDo) Omit(cols ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRechargeDo) Join(table schema.Tabler, on ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRechargeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRechargeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRechargeDo) Group(cols ...field.Expr) IUserRechargeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRechargeDo) Having(conds ...gen.Condition) IUserRechargeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRechargeDo) Limit(limit int) IUserRechargeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRechargeDo) Offset(offset int) IUserRechargeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRechargeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRechargeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRechargeDo) Unscoped() IUserRechargeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRechargeDo) Create(values ...*model.UserRecharge) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRechargeDo) CreateInBatches(values []*model.UserRecharge, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRechargeDo) Save(values ...*model.UserRecharge) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRechargeDo) First() (*model.UserRecharge, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecharge), nil
	}
}

func (u userRechargeDo) Take() (*model.UserRecharge, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecharge), nil
	}
}

func (u userRechargeDo) Last() (*model.UserRecharge, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecharge), nil
	}
}

func (u userRechargeDo) Find() ([]*model.UserRecharge, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRecharge), err
}

func (u userRechargeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRecharge, err error) {
	buf := make([]*model.UserRecharge, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRechargeDo) FindInBatches(result *[]*model.UserRecharge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRechargeDo) Attrs(attrs ...field.AssignExpr) IUserRechargeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRechargeDo) Assign(attrs ...field.AssignExpr) IUserRechargeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRechargeDo) Joins(fields ...field.RelationField) IUserRechargeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRechargeDo) Preload(fields ...field.RelationField) IUserRechargeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRechargeDo) FirstOrInit() (*model.UserRecharge, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecharge), nil
	}
}

func (u userRechargeDo) FirstOrCreate() (*model.UserRecharge, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRecharge), nil
	}
}

func (u userRechargeDo) FindByPage(offset int, limit int) (result []*model.UserRecharge, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRechargeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRechargeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRechargeDo) Delete(models ...*model.UserRecharge) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRechargeDo) withDO(do gen.Dao) *userRechargeDo {
	u.DO = *do.(*gen.DO)
	return u
}
