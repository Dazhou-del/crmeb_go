// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbWechatException(db *gorm.DB, opts ...gen.DOOption) ebWechatException {
	_ebWechatException := ebWechatException{}

	_ebWechatException.ebWechatExceptionDo.UseDB(db, opts...)
	_ebWechatException.ebWechatExceptionDo.UseModel(&model.EbWechatException{})

	tableName := _ebWechatException.ebWechatExceptionDo.TableName()
	_ebWechatException.ALL = field.NewAsterisk(tableName)
	_ebWechatException.ID = field.NewInt32(tableName, "id")
	_ebWechatException.Errcode = field.NewString(tableName, "errcode")
	_ebWechatException.Errmsg = field.NewString(tableName, "errmsg")
	_ebWechatException.Data = field.NewString(tableName, "data")
	_ebWechatException.Remark = field.NewString(tableName, "remark")
	_ebWechatException.CreateTime = field.NewTime(tableName, "create_time")
	_ebWechatException.UpdateTime = field.NewTime(tableName, "update_time")

	_ebWechatException.fillFieldMap()

	return _ebWechatException
}

// ebWechatException 微信异常表
type ebWechatException struct {
	ebWechatExceptionDo ebWechatExceptionDo

	ALL        field.Asterisk
	ID         field.Int32  // id
	Errcode    field.String // 错误码
	Errmsg     field.String // 错误信息
	Data       field.String // 回复数据
	Remark     field.String // 备注
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebWechatException) Table(newTableName string) *ebWechatException {
	e.ebWechatExceptionDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebWechatException) As(alias string) *ebWechatException {
	e.ebWechatExceptionDo.DO = *(e.ebWechatExceptionDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebWechatException) updateTableName(table string) *ebWechatException {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Errcode = field.NewString(table, "errcode")
	e.Errmsg = field.NewString(table, "errmsg")
	e.Data = field.NewString(table, "data")
	e.Remark = field.NewString(table, "remark")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebWechatException) WithContext(ctx context.Context) IEbWechatExceptionDo {
	return e.ebWechatExceptionDo.WithContext(ctx)
}

func (e ebWechatException) TableName() string { return e.ebWechatExceptionDo.TableName() }

func (e ebWechatException) Alias() string { return e.ebWechatExceptionDo.Alias() }

func (e ebWechatException) Columns(cols ...field.Expr) gen.Columns {
	return e.ebWechatExceptionDo.Columns(cols...)
}

func (e *ebWechatException) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebWechatException) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["errcode"] = e.Errcode
	e.fieldMap["errmsg"] = e.Errmsg
	e.fieldMap["data"] = e.Data
	e.fieldMap["remark"] = e.Remark
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebWechatException) clone(db *gorm.DB) ebWechatException {
	e.ebWechatExceptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebWechatException) replaceDB(db *gorm.DB) ebWechatException {
	e.ebWechatExceptionDo.ReplaceDB(db)
	return e
}

type ebWechatExceptionDo struct{ gen.DO }

type IEbWechatExceptionDo interface {
	gen.SubQuery
	Debug() IEbWechatExceptionDo
	WithContext(ctx context.Context) IEbWechatExceptionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbWechatExceptionDo
	WriteDB() IEbWechatExceptionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbWechatExceptionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbWechatExceptionDo
	Not(conds ...gen.Condition) IEbWechatExceptionDo
	Or(conds ...gen.Condition) IEbWechatExceptionDo
	Select(conds ...field.Expr) IEbWechatExceptionDo
	Where(conds ...gen.Condition) IEbWechatExceptionDo
	Order(conds ...field.Expr) IEbWechatExceptionDo
	Distinct(cols ...field.Expr) IEbWechatExceptionDo
	Omit(cols ...field.Expr) IEbWechatExceptionDo
	Join(table schema.Tabler, on ...field.Expr) IEbWechatExceptionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbWechatExceptionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbWechatExceptionDo
	Group(cols ...field.Expr) IEbWechatExceptionDo
	Having(conds ...gen.Condition) IEbWechatExceptionDo
	Limit(limit int) IEbWechatExceptionDo
	Offset(offset int) IEbWechatExceptionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbWechatExceptionDo
	Unscoped() IEbWechatExceptionDo
	Create(values ...*model.EbWechatException) error
	CreateInBatches(values []*model.EbWechatException, batchSize int) error
	Save(values ...*model.EbWechatException) error
	First() (*model.EbWechatException, error)
	Take() (*model.EbWechatException, error)
	Last() (*model.EbWechatException, error)
	Find() ([]*model.EbWechatException, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbWechatException, err error)
	FindInBatches(result *[]*model.EbWechatException, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbWechatException) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbWechatExceptionDo
	Assign(attrs ...field.AssignExpr) IEbWechatExceptionDo
	Joins(fields ...field.RelationField) IEbWechatExceptionDo
	Preload(fields ...field.RelationField) IEbWechatExceptionDo
	FirstOrInit() (*model.EbWechatException, error)
	FirstOrCreate() (*model.EbWechatException, error)
	FindByPage(offset int, limit int) (result []*model.EbWechatException, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbWechatExceptionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebWechatExceptionDo) Debug() IEbWechatExceptionDo {
	return e.withDO(e.DO.Debug())
}

func (e ebWechatExceptionDo) WithContext(ctx context.Context) IEbWechatExceptionDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebWechatExceptionDo) ReadDB() IEbWechatExceptionDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebWechatExceptionDo) WriteDB() IEbWechatExceptionDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebWechatExceptionDo) Session(config *gorm.Session) IEbWechatExceptionDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebWechatExceptionDo) Clauses(conds ...clause.Expression) IEbWechatExceptionDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebWechatExceptionDo) Returning(value interface{}, columns ...string) IEbWechatExceptionDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebWechatExceptionDo) Not(conds ...gen.Condition) IEbWechatExceptionDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebWechatExceptionDo) Or(conds ...gen.Condition) IEbWechatExceptionDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebWechatExceptionDo) Select(conds ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebWechatExceptionDo) Where(conds ...gen.Condition) IEbWechatExceptionDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebWechatExceptionDo) Order(conds ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebWechatExceptionDo) Distinct(cols ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebWechatExceptionDo) Omit(cols ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebWechatExceptionDo) Join(table schema.Tabler, on ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebWechatExceptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebWechatExceptionDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebWechatExceptionDo) Group(cols ...field.Expr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebWechatExceptionDo) Having(conds ...gen.Condition) IEbWechatExceptionDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebWechatExceptionDo) Limit(limit int) IEbWechatExceptionDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebWechatExceptionDo) Offset(offset int) IEbWechatExceptionDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebWechatExceptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbWechatExceptionDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebWechatExceptionDo) Unscoped() IEbWechatExceptionDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebWechatExceptionDo) Create(values ...*model.EbWechatException) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebWechatExceptionDo) CreateInBatches(values []*model.EbWechatException, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebWechatExceptionDo) Save(values ...*model.EbWechatException) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebWechatExceptionDo) First() (*model.EbWechatException, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatException), nil
	}
}

func (e ebWechatExceptionDo) Take() (*model.EbWechatException, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatException), nil
	}
}

func (e ebWechatExceptionDo) Last() (*model.EbWechatException, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatException), nil
	}
}

func (e ebWechatExceptionDo) Find() ([]*model.EbWechatException, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbWechatException), err
}

func (e ebWechatExceptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbWechatException, err error) {
	buf := make([]*model.EbWechatException, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebWechatExceptionDo) FindInBatches(result *[]*model.EbWechatException, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebWechatExceptionDo) Attrs(attrs ...field.AssignExpr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebWechatExceptionDo) Assign(attrs ...field.AssignExpr) IEbWechatExceptionDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebWechatExceptionDo) Joins(fields ...field.RelationField) IEbWechatExceptionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebWechatExceptionDo) Preload(fields ...field.RelationField) IEbWechatExceptionDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebWechatExceptionDo) FirstOrInit() (*model.EbWechatException, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatException), nil
	}
}

func (e ebWechatExceptionDo) FirstOrCreate() (*model.EbWechatException, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatException), nil
	}
}

func (e ebWechatExceptionDo) FindByPage(offset int, limit int) (result []*model.EbWechatException, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebWechatExceptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebWechatExceptionDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebWechatExceptionDo) Delete(models ...*model.EbWechatException) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebWechatExceptionDo) withDO(do gen.Dao) *ebWechatExceptionDo {
	e.DO = *do.(*gen.DO)
	return e
}
