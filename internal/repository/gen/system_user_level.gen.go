// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSystemUserLevel(db *gorm.DB, opts ...gen.DOOption) systemUserLevel {
	_systemUserLevel := systemUserLevel{}

	_systemUserLevel.systemUserLevelDo.UseDB(db, opts...)
	_systemUserLevel.systemUserLevelDo.UseModel(&model.SystemUserLevel{})

	tableName := _systemUserLevel.systemUserLevelDo.TableName()
	_systemUserLevel.ALL = field.NewAsterisk(tableName)
	_systemUserLevel.ID = field.NewInt64(tableName, "id")
	_systemUserLevel.Name = field.NewString(tableName, "name")
	_systemUserLevel.Experience = field.NewInt64(tableName, "experience")
	_systemUserLevel.IsShow = field.NewInt64(tableName, "is_show")
	_systemUserLevel.Grade = field.NewInt64(tableName, "grade")
	_systemUserLevel.Discount = field.NewInt64(tableName, "discount")
	_systemUserLevel.Icon = field.NewString(tableName, "icon")
	_systemUserLevel.CreatedAt = field.NewInt64(tableName, "created_at")
	_systemUserLevel.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_systemUserLevel.DeletedAt = field.NewField(tableName, "deleted_at")

	_systemUserLevel.fillFieldMap()

	return _systemUserLevel
}

// systemUserLevel 普通会员等级
type systemUserLevel struct {
	systemUserLevelDo systemUserLevelDo

	ALL        field.Asterisk
	ID         field.Int64
	Name       field.String // 会员名称
	Experience field.Int64  // 达到多少升级经验
	IsShow     field.Int64  // 是否显示 1=显示,0=隐藏
	Grade      field.Int64  // 会员等级
	Discount   field.Int64  // 享受折扣
	Icon       field.String // 会员图标
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s systemUserLevel) Table(newTableName string) *systemUserLevel {
	s.systemUserLevelDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemUserLevel) As(alias string) *systemUserLevel {
	s.systemUserLevelDo.DO = *(s.systemUserLevelDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemUserLevel) updateTableName(table string) *systemUserLevel {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Experience = field.NewInt64(table, "experience")
	s.IsShow = field.NewInt64(table, "is_show")
	s.Grade = field.NewInt64(table, "grade")
	s.Discount = field.NewInt64(table, "discount")
	s.Icon = field.NewString(table, "icon")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *systemUserLevel) WithContext(ctx context.Context) ISystemUserLevelDo {
	return s.systemUserLevelDo.WithContext(ctx)
}

func (s systemUserLevel) TableName() string { return s.systemUserLevelDo.TableName() }

func (s systemUserLevel) Alias() string { return s.systemUserLevelDo.Alias() }

func (s systemUserLevel) Columns(cols ...field.Expr) gen.Columns {
	return s.systemUserLevelDo.Columns(cols...)
}

func (s *systemUserLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemUserLevel) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["experience"] = s.Experience
	s.fieldMap["is_show"] = s.IsShow
	s.fieldMap["grade"] = s.Grade
	s.fieldMap["discount"] = s.Discount
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s systemUserLevel) clone(db *gorm.DB) systemUserLevel {
	s.systemUserLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemUserLevel) replaceDB(db *gorm.DB) systemUserLevel {
	s.systemUserLevelDo.ReplaceDB(db)
	return s
}

type systemUserLevelDo struct{ gen.DO }

type ISystemUserLevelDo interface {
	gen.SubQuery
	Debug() ISystemUserLevelDo
	WithContext(ctx context.Context) ISystemUserLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemUserLevelDo
	WriteDB() ISystemUserLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemUserLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemUserLevelDo
	Not(conds ...gen.Condition) ISystemUserLevelDo
	Or(conds ...gen.Condition) ISystemUserLevelDo
	Select(conds ...field.Expr) ISystemUserLevelDo
	Where(conds ...gen.Condition) ISystemUserLevelDo
	Order(conds ...field.Expr) ISystemUserLevelDo
	Distinct(cols ...field.Expr) ISystemUserLevelDo
	Omit(cols ...field.Expr) ISystemUserLevelDo
	Join(table schema.Tabler, on ...field.Expr) ISystemUserLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserLevelDo
	Group(cols ...field.Expr) ISystemUserLevelDo
	Having(conds ...gen.Condition) ISystemUserLevelDo
	Limit(limit int) ISystemUserLevelDo
	Offset(offset int) ISystemUserLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserLevelDo
	Unscoped() ISystemUserLevelDo
	Create(values ...*model.SystemUserLevel) error
	CreateInBatches(values []*model.SystemUserLevel, batchSize int) error
	Save(values ...*model.SystemUserLevel) error
	First() (*model.SystemUserLevel, error)
	Take() (*model.SystemUserLevel, error)
	Last() (*model.SystemUserLevel, error)
	Find() ([]*model.SystemUserLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserLevel, err error)
	FindInBatches(result *[]*model.SystemUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemUserLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemUserLevelDo
	Assign(attrs ...field.AssignExpr) ISystemUserLevelDo
	Joins(fields ...field.RelationField) ISystemUserLevelDo
	Preload(fields ...field.RelationField) ISystemUserLevelDo
	FirstOrInit() (*model.SystemUserLevel, error)
	FirstOrCreate() (*model.SystemUserLevel, error)
	FindByPage(offset int, limit int) (result []*model.SystemUserLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemUserLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemUserLevelDo) Debug() ISystemUserLevelDo {
	return s.withDO(s.DO.Debug())
}

func (s systemUserLevelDo) WithContext(ctx context.Context) ISystemUserLevelDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemUserLevelDo) ReadDB() ISystemUserLevelDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemUserLevelDo) WriteDB() ISystemUserLevelDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemUserLevelDo) Session(config *gorm.Session) ISystemUserLevelDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemUserLevelDo) Clauses(conds ...clause.Expression) ISystemUserLevelDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemUserLevelDo) Returning(value interface{}, columns ...string) ISystemUserLevelDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemUserLevelDo) Not(conds ...gen.Condition) ISystemUserLevelDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemUserLevelDo) Or(conds ...gen.Condition) ISystemUserLevelDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemUserLevelDo) Select(conds ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemUserLevelDo) Where(conds ...gen.Condition) ISystemUserLevelDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemUserLevelDo) Order(conds ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemUserLevelDo) Distinct(cols ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemUserLevelDo) Omit(cols ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemUserLevelDo) Join(table schema.Tabler, on ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemUserLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemUserLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemUserLevelDo) Group(cols ...field.Expr) ISystemUserLevelDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemUserLevelDo) Having(conds ...gen.Condition) ISystemUserLevelDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemUserLevelDo) Limit(limit int) ISystemUserLevelDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemUserLevelDo) Offset(offset int) ISystemUserLevelDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemUserLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemUserLevelDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemUserLevelDo) Unscoped() ISystemUserLevelDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemUserLevelDo) Create(values ...*model.SystemUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemUserLevelDo) CreateInBatches(values []*model.SystemUserLevel, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemUserLevelDo) Save(values ...*model.SystemUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemUserLevelDo) First() (*model.SystemUserLevel, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserLevel), nil
	}
}

func (s systemUserLevelDo) Take() (*model.SystemUserLevel, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserLevel), nil
	}
}

func (s systemUserLevelDo) Last() (*model.SystemUserLevel, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserLevel), nil
	}
}

func (s systemUserLevelDo) Find() ([]*model.SystemUserLevel, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemUserLevel), err
}

func (s systemUserLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemUserLevel, err error) {
	buf := make([]*model.SystemUserLevel, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemUserLevelDo) FindInBatches(result *[]*model.SystemUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemUserLevelDo) Attrs(attrs ...field.AssignExpr) ISystemUserLevelDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemUserLevelDo) Assign(attrs ...field.AssignExpr) ISystemUserLevelDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemUserLevelDo) Joins(fields ...field.RelationField) ISystemUserLevelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemUserLevelDo) Preload(fields ...field.RelationField) ISystemUserLevelDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemUserLevelDo) FirstOrInit() (*model.SystemUserLevel, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserLevel), nil
	}
}

func (s systemUserLevelDo) FirstOrCreate() (*model.SystemUserLevel, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemUserLevel), nil
	}
}

func (s systemUserLevelDo) FindByPage(offset int, limit int) (result []*model.SystemUserLevel, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemUserLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemUserLevelDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemUserLevelDo) Delete(models ...*model.SystemUserLevel) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemUserLevelDo) withDO(do gen.Dao) *systemUserLevelDo {
	s.DO = *do.(*gen.DO)
	return s
}
