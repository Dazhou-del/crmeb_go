// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newUserBrokerageRecord(db *gorm.DB, opts ...gen.DOOption) userBrokerageRecord {
	_userBrokerageRecord := userBrokerageRecord{}

	_userBrokerageRecord.userBrokerageRecordDo.UseDB(db, opts...)
	_userBrokerageRecord.userBrokerageRecordDo.UseModel(&model.UserBrokerageRecord{})

	tableName := _userBrokerageRecord.userBrokerageRecordDo.TableName()
	_userBrokerageRecord.ALL = field.NewAsterisk(tableName)
	_userBrokerageRecord.ID = field.NewInt64(tableName, "id")
	_userBrokerageRecord.UID = field.NewInt64(tableName, "uid")
	_userBrokerageRecord.LinkID = field.NewString(tableName, "link_id")
	_userBrokerageRecord.LinkType = field.NewString(tableName, "link_type")
	_userBrokerageRecord.Type = field.NewInt64(tableName, "type")
	_userBrokerageRecord.Title = field.NewString(tableName, "title")
	_userBrokerageRecord.Price = field.NewField(tableName, "price")
	_userBrokerageRecord.Balance = field.NewField(tableName, "balance")
	_userBrokerageRecord.Mark = field.NewString(tableName, "mark")
	_userBrokerageRecord.Status = field.NewInt64(tableName, "status")
	_userBrokerageRecord.FrozenTime = field.NewInt64(tableName, "frozen_time")
	_userBrokerageRecord.ThawTime = field.NewInt64(tableName, "thaw_time")
	_userBrokerageRecord.BrokerageLevel = field.NewInt64(tableName, "brokerage_level")
	_userBrokerageRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_userBrokerageRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userBrokerageRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_userBrokerageRecord.fillFieldMap()

	return _userBrokerageRecord
}

// userBrokerageRecord 用户佣金记录表
type userBrokerageRecord struct {
	userBrokerageRecordDo userBrokerageRecordDo

	ALL            field.Asterisk
	ID             field.Int64  // 记录id
	UID            field.Int64  // 用户uid
	LinkID         field.String // 关联id（orderNo,提现id）
	LinkType       field.String // 关联类型（order,extract，yue）
	Type           field.Int64  // 类型：1-增加，2-扣减（提现）
	Title          field.String // 标题
	Price          field.Field  // 金额
	Balance        field.Field  // 剩余
	Mark           field.String // 备注
	Status         field.Int64  // 状态：1-订单创建，2-冻结期，3-完成，4-失效（订单退款），5-提现申请
	FrozenTime     field.Int64  // 冻结期时间（天）
	ThawTime       field.Int64  // 解冻时间
	BrokerageLevel field.Int64  // 分销等级
	CreatedAt      field.Int64  // 创建时间
	UpdatedAt      field.Int64  // 修改时间
	DeletedAt      field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (u userBrokerageRecord) Table(newTableName string) *userBrokerageRecord {
	u.userBrokerageRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBrokerageRecord) As(alias string) *userBrokerageRecord {
	u.userBrokerageRecordDo.DO = *(u.userBrokerageRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBrokerageRecord) updateTableName(table string) *userBrokerageRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.LinkID = field.NewString(table, "link_id")
	u.LinkType = field.NewString(table, "link_type")
	u.Type = field.NewInt64(table, "type")
	u.Title = field.NewString(table, "title")
	u.Price = field.NewField(table, "price")
	u.Balance = field.NewField(table, "balance")
	u.Mark = field.NewString(table, "mark")
	u.Status = field.NewInt64(table, "status")
	u.FrozenTime = field.NewInt64(table, "frozen_time")
	u.ThawTime = field.NewInt64(table, "thaw_time")
	u.BrokerageLevel = field.NewInt64(table, "brokerage_level")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userBrokerageRecord) WithContext(ctx context.Context) IUserBrokerageRecordDo {
	return u.userBrokerageRecordDo.WithContext(ctx)
}

func (u userBrokerageRecord) TableName() string { return u.userBrokerageRecordDo.TableName() }

func (u userBrokerageRecord) Alias() string { return u.userBrokerageRecordDo.Alias() }

func (u userBrokerageRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userBrokerageRecordDo.Columns(cols...)
}

func (u *userBrokerageRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBrokerageRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 16)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["link_id"] = u.LinkID
	u.fieldMap["link_type"] = u.LinkType
	u.fieldMap["type"] = u.Type
	u.fieldMap["title"] = u.Title
	u.fieldMap["price"] = u.Price
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["mark"] = u.Mark
	u.fieldMap["status"] = u.Status
	u.fieldMap["frozen_time"] = u.FrozenTime
	u.fieldMap["thaw_time"] = u.ThawTime
	u.fieldMap["brokerage_level"] = u.BrokerageLevel
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userBrokerageRecord) clone(db *gorm.DB) userBrokerageRecord {
	u.userBrokerageRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBrokerageRecord) replaceDB(db *gorm.DB) userBrokerageRecord {
	u.userBrokerageRecordDo.ReplaceDB(db)
	return u
}

type userBrokerageRecordDo struct{ gen.DO }

type IUserBrokerageRecordDo interface {
	gen.SubQuery
	Debug() IUserBrokerageRecordDo
	WithContext(ctx context.Context) IUserBrokerageRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBrokerageRecordDo
	WriteDB() IUserBrokerageRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBrokerageRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBrokerageRecordDo
	Not(conds ...gen.Condition) IUserBrokerageRecordDo
	Or(conds ...gen.Condition) IUserBrokerageRecordDo
	Select(conds ...field.Expr) IUserBrokerageRecordDo
	Where(conds ...gen.Condition) IUserBrokerageRecordDo
	Order(conds ...field.Expr) IUserBrokerageRecordDo
	Distinct(cols ...field.Expr) IUserBrokerageRecordDo
	Omit(cols ...field.Expr) IUserBrokerageRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserBrokerageRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBrokerageRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBrokerageRecordDo
	Group(cols ...field.Expr) IUserBrokerageRecordDo
	Having(conds ...gen.Condition) IUserBrokerageRecordDo
	Limit(limit int) IUserBrokerageRecordDo
	Offset(offset int) IUserBrokerageRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBrokerageRecordDo
	Unscoped() IUserBrokerageRecordDo
	Create(values ...*model.UserBrokerageRecord) error
	CreateInBatches(values []*model.UserBrokerageRecord, batchSize int) error
	Save(values ...*model.UserBrokerageRecord) error
	First() (*model.UserBrokerageRecord, error)
	Take() (*model.UserBrokerageRecord, error)
	Last() (*model.UserBrokerageRecord, error)
	Find() ([]*model.UserBrokerageRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBrokerageRecord, err error)
	FindInBatches(result *[]*model.UserBrokerageRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBrokerageRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBrokerageRecordDo
	Assign(attrs ...field.AssignExpr) IUserBrokerageRecordDo
	Joins(fields ...field.RelationField) IUserBrokerageRecordDo
	Preload(fields ...field.RelationField) IUserBrokerageRecordDo
	FirstOrInit() (*model.UserBrokerageRecord, error)
	FirstOrCreate() (*model.UserBrokerageRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserBrokerageRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBrokerageRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBrokerageRecordDo) Debug() IUserBrokerageRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userBrokerageRecordDo) WithContext(ctx context.Context) IUserBrokerageRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBrokerageRecordDo) ReadDB() IUserBrokerageRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBrokerageRecordDo) WriteDB() IUserBrokerageRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBrokerageRecordDo) Session(config *gorm.Session) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBrokerageRecordDo) Clauses(conds ...clause.Expression) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBrokerageRecordDo) Returning(value interface{}, columns ...string) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBrokerageRecordDo) Not(conds ...gen.Condition) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBrokerageRecordDo) Or(conds ...gen.Condition) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBrokerageRecordDo) Select(conds ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBrokerageRecordDo) Where(conds ...gen.Condition) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBrokerageRecordDo) Order(conds ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBrokerageRecordDo) Distinct(cols ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBrokerageRecordDo) Omit(cols ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBrokerageRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBrokerageRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBrokerageRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBrokerageRecordDo) Group(cols ...field.Expr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBrokerageRecordDo) Having(conds ...gen.Condition) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBrokerageRecordDo) Limit(limit int) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBrokerageRecordDo) Offset(offset int) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBrokerageRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBrokerageRecordDo) Unscoped() IUserBrokerageRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBrokerageRecordDo) Create(values ...*model.UserBrokerageRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBrokerageRecordDo) CreateInBatches(values []*model.UserBrokerageRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBrokerageRecordDo) Save(values ...*model.UserBrokerageRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBrokerageRecordDo) First() (*model.UserBrokerageRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBrokerageRecord), nil
	}
}

func (u userBrokerageRecordDo) Take() (*model.UserBrokerageRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBrokerageRecord), nil
	}
}

func (u userBrokerageRecordDo) Last() (*model.UserBrokerageRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBrokerageRecord), nil
	}
}

func (u userBrokerageRecordDo) Find() ([]*model.UserBrokerageRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBrokerageRecord), err
}

func (u userBrokerageRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBrokerageRecord, err error) {
	buf := make([]*model.UserBrokerageRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBrokerageRecordDo) FindInBatches(result *[]*model.UserBrokerageRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBrokerageRecordDo) Attrs(attrs ...field.AssignExpr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBrokerageRecordDo) Assign(attrs ...field.AssignExpr) IUserBrokerageRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBrokerageRecordDo) Joins(fields ...field.RelationField) IUserBrokerageRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBrokerageRecordDo) Preload(fields ...field.RelationField) IUserBrokerageRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBrokerageRecordDo) FirstOrInit() (*model.UserBrokerageRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBrokerageRecord), nil
	}
}

func (u userBrokerageRecordDo) FirstOrCreate() (*model.UserBrokerageRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBrokerageRecord), nil
	}
}

func (u userBrokerageRecordDo) FindByPage(offset int, limit int) (result []*model.UserBrokerageRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBrokerageRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBrokerageRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBrokerageRecordDo) Delete(models ...*model.UserBrokerageRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBrokerageRecordDo) withDO(do gen.Dao) *userBrokerageRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
