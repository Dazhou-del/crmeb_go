// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newStoreProductAttr(db *gorm.DB, opts ...gen.DOOption) storeProductAttr {
	_storeProductAttr := storeProductAttr{}

	_storeProductAttr.storeProductAttrDo.UseDB(db, opts...)
	_storeProductAttr.storeProductAttrDo.UseModel(&model.StoreProductAttr{})

	tableName := _storeProductAttr.storeProductAttrDo.TableName()
	_storeProductAttr.ALL = field.NewAsterisk(tableName)
	_storeProductAttr.ID = field.NewInt64(tableName, "id")
	_storeProductAttr.ProductID = field.NewInt64(tableName, "product_id")
	_storeProductAttr.AttrName = field.NewString(tableName, "attr_name")
	_storeProductAttr.AttrValues = field.NewString(tableName, "attr_values")
	_storeProductAttr.Type = field.NewInt64(tableName, "type")
	_storeProductAttr.CreatedAt = field.NewInt64(tableName, "created_at")
	_storeProductAttr.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_storeProductAttr.DeletedAt = field.NewField(tableName, "deleted_at")

	_storeProductAttr.fillFieldMap()

	return _storeProductAttr
}

// storeProductAttr 商品属性表
type storeProductAttr struct {
	storeProductAttrDo storeProductAttrDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键
	ProductID  field.Int64  // 商品ID
	AttrName   field.String // 属性名
	AttrValues field.String // 属性值
	Type       field.Int64  // 活动类型 0=商品，1=秒杀，2=砍价，3=拼团
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s storeProductAttr) Table(newTableName string) *storeProductAttr {
	s.storeProductAttrDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storeProductAttr) As(alias string) *storeProductAttr {
	s.storeProductAttrDo.DO = *(s.storeProductAttrDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storeProductAttr) updateTableName(table string) *storeProductAttr {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.AttrName = field.NewString(table, "attr_name")
	s.AttrValues = field.NewString(table, "attr_values")
	s.Type = field.NewInt64(table, "type")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *storeProductAttr) WithContext(ctx context.Context) IStoreProductAttrDo {
	return s.storeProductAttrDo.WithContext(ctx)
}

func (s storeProductAttr) TableName() string { return s.storeProductAttrDo.TableName() }

func (s storeProductAttr) Alias() string { return s.storeProductAttrDo.Alias() }

func (s storeProductAttr) Columns(cols ...field.Expr) gen.Columns {
	return s.storeProductAttrDo.Columns(cols...)
}

func (s *storeProductAttr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storeProductAttr) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["attr_name"] = s.AttrName
	s.fieldMap["attr_values"] = s.AttrValues
	s.fieldMap["type"] = s.Type
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s storeProductAttr) clone(db *gorm.DB) storeProductAttr {
	s.storeProductAttrDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storeProductAttr) replaceDB(db *gorm.DB) storeProductAttr {
	s.storeProductAttrDo.ReplaceDB(db)
	return s
}

type storeProductAttrDo struct{ gen.DO }

type IStoreProductAttrDo interface {
	gen.SubQuery
	Debug() IStoreProductAttrDo
	WithContext(ctx context.Context) IStoreProductAttrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreProductAttrDo
	WriteDB() IStoreProductAttrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreProductAttrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreProductAttrDo
	Not(conds ...gen.Condition) IStoreProductAttrDo
	Or(conds ...gen.Condition) IStoreProductAttrDo
	Select(conds ...field.Expr) IStoreProductAttrDo
	Where(conds ...gen.Condition) IStoreProductAttrDo
	Order(conds ...field.Expr) IStoreProductAttrDo
	Distinct(cols ...field.Expr) IStoreProductAttrDo
	Omit(cols ...field.Expr) IStoreProductAttrDo
	Join(table schema.Tabler, on ...field.Expr) IStoreProductAttrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreProductAttrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreProductAttrDo
	Group(cols ...field.Expr) IStoreProductAttrDo
	Having(conds ...gen.Condition) IStoreProductAttrDo
	Limit(limit int) IStoreProductAttrDo
	Offset(offset int) IStoreProductAttrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreProductAttrDo
	Unscoped() IStoreProductAttrDo
	Create(values ...*model.StoreProductAttr) error
	CreateInBatches(values []*model.StoreProductAttr, batchSize int) error
	Save(values ...*model.StoreProductAttr) error
	First() (*model.StoreProductAttr, error)
	Take() (*model.StoreProductAttr, error)
	Last() (*model.StoreProductAttr, error)
	Find() ([]*model.StoreProductAttr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreProductAttr, err error)
	FindInBatches(result *[]*model.StoreProductAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StoreProductAttr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreProductAttrDo
	Assign(attrs ...field.AssignExpr) IStoreProductAttrDo
	Joins(fields ...field.RelationField) IStoreProductAttrDo
	Preload(fields ...field.RelationField) IStoreProductAttrDo
	FirstOrInit() (*model.StoreProductAttr, error)
	FirstOrCreate() (*model.StoreProductAttr, error)
	FindByPage(offset int, limit int) (result []*model.StoreProductAttr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreProductAttrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeProductAttrDo) Debug() IStoreProductAttrDo {
	return s.withDO(s.DO.Debug())
}

func (s storeProductAttrDo) WithContext(ctx context.Context) IStoreProductAttrDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeProductAttrDo) ReadDB() IStoreProductAttrDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeProductAttrDo) WriteDB() IStoreProductAttrDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeProductAttrDo) Session(config *gorm.Session) IStoreProductAttrDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeProductAttrDo) Clauses(conds ...clause.Expression) IStoreProductAttrDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeProductAttrDo) Returning(value interface{}, columns ...string) IStoreProductAttrDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeProductAttrDo) Not(conds ...gen.Condition) IStoreProductAttrDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeProductAttrDo) Or(conds ...gen.Condition) IStoreProductAttrDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeProductAttrDo) Select(conds ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeProductAttrDo) Where(conds ...gen.Condition) IStoreProductAttrDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeProductAttrDo) Order(conds ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeProductAttrDo) Distinct(cols ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeProductAttrDo) Omit(cols ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeProductAttrDo) Join(table schema.Tabler, on ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeProductAttrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeProductAttrDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeProductAttrDo) Group(cols ...field.Expr) IStoreProductAttrDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeProductAttrDo) Having(conds ...gen.Condition) IStoreProductAttrDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeProductAttrDo) Limit(limit int) IStoreProductAttrDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeProductAttrDo) Offset(offset int) IStoreProductAttrDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeProductAttrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreProductAttrDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeProductAttrDo) Unscoped() IStoreProductAttrDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeProductAttrDo) Create(values ...*model.StoreProductAttr) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeProductAttrDo) CreateInBatches(values []*model.StoreProductAttr, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeProductAttrDo) Save(values ...*model.StoreProductAttr) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeProductAttrDo) First() (*model.StoreProductAttr, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductAttr), nil
	}
}

func (s storeProductAttrDo) Take() (*model.StoreProductAttr, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductAttr), nil
	}
}

func (s storeProductAttrDo) Last() (*model.StoreProductAttr, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductAttr), nil
	}
}

func (s storeProductAttrDo) Find() ([]*model.StoreProductAttr, error) {
	result, err := s.DO.Find()
	return result.([]*model.StoreProductAttr), err
}

func (s storeProductAttrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreProductAttr, err error) {
	buf := make([]*model.StoreProductAttr, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeProductAttrDo) FindInBatches(result *[]*model.StoreProductAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeProductAttrDo) Attrs(attrs ...field.AssignExpr) IStoreProductAttrDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeProductAttrDo) Assign(attrs ...field.AssignExpr) IStoreProductAttrDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeProductAttrDo) Joins(fields ...field.RelationField) IStoreProductAttrDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeProductAttrDo) Preload(fields ...field.RelationField) IStoreProductAttrDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeProductAttrDo) FirstOrInit() (*model.StoreProductAttr, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductAttr), nil
	}
}

func (s storeProductAttrDo) FirstOrCreate() (*model.StoreProductAttr, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductAttr), nil
	}
}

func (s storeProductAttrDo) FindByPage(offset int, limit int) (result []*model.StoreProductAttr, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeProductAttrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeProductAttrDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeProductAttrDo) Delete(models ...*model.StoreProductAttr) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeProductAttrDo) withDO(do gen.Dao) *storeProductAttrDo {
	s.DO = *do.(*gen.DO)
	return s
}
