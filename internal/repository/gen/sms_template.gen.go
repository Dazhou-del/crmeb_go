// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSmsTemplate(db *gorm.DB, opts ...gen.DOOption) smsTemplate {
	_smsTemplate := smsTemplate{}

	_smsTemplate.smsTemplateDo.UseDB(db, opts...)
	_smsTemplate.smsTemplateDo.UseModel(&model.SmsTemplate{})

	tableName := _smsTemplate.smsTemplateDo.TableName()
	_smsTemplate.ALL = field.NewAsterisk(tableName)
	_smsTemplate.ID = field.NewInt64(tableName, "id")
	_smsTemplate.TempID = field.NewString(tableName, "temp_id")
	_smsTemplate.TempType = field.NewInt64(tableName, "temp_type")
	_smsTemplate.Title = field.NewString(tableName, "title")
	_smsTemplate.Type = field.NewString(tableName, "type")
	_smsTemplate.TempKey = field.NewString(tableName, "temp_key")
	_smsTemplate.Status = field.NewInt64(tableName, "status")
	_smsTemplate.Content = field.NewString(tableName, "content")
	_smsTemplate.CreatedAt = field.NewInt64(tableName, "created_at")
	_smsTemplate.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_smsTemplate.DeletedAt = field.NewField(tableName, "deleted_at")

	_smsTemplate.fillFieldMap()

	return _smsTemplate
}

// smsTemplate 短信模板表
type smsTemplate struct {
	smsTemplateDo smsTemplateDo

	ALL       field.Asterisk
	ID        field.Int64  // id
	TempID    field.String // 短信模板id
	TempType  field.Int64  // 模板类型
	Title     field.String // 模板说明
	Type      field.String // 类型
	TempKey   field.String // 模板编号
	Status    field.Int64  // 状态
	Content   field.String // 短息内容
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s smsTemplate) Table(newTableName string) *smsTemplate {
	s.smsTemplateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smsTemplate) As(alias string) *smsTemplate {
	s.smsTemplateDo.DO = *(s.smsTemplateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smsTemplate) updateTableName(table string) *smsTemplate {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.TempID = field.NewString(table, "temp_id")
	s.TempType = field.NewInt64(table, "temp_type")
	s.Title = field.NewString(table, "title")
	s.Type = field.NewString(table, "type")
	s.TempKey = field.NewString(table, "temp_key")
	s.Status = field.NewInt64(table, "status")
	s.Content = field.NewString(table, "content")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *smsTemplate) WithContext(ctx context.Context) ISmsTemplateDo {
	return s.smsTemplateDo.WithContext(ctx)
}

func (s smsTemplate) TableName() string { return s.smsTemplateDo.TableName() }

func (s smsTemplate) Alias() string { return s.smsTemplateDo.Alias() }

func (s smsTemplate) Columns(cols ...field.Expr) gen.Columns { return s.smsTemplateDo.Columns(cols...) }

func (s *smsTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smsTemplate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["temp_id"] = s.TempID
	s.fieldMap["temp_type"] = s.TempType
	s.fieldMap["title"] = s.Title
	s.fieldMap["type"] = s.Type
	s.fieldMap["temp_key"] = s.TempKey
	s.fieldMap["status"] = s.Status
	s.fieldMap["content"] = s.Content
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s smsTemplate) clone(db *gorm.DB) smsTemplate {
	s.smsTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smsTemplate) replaceDB(db *gorm.DB) smsTemplate {
	s.smsTemplateDo.ReplaceDB(db)
	return s
}

type smsTemplateDo struct{ gen.DO }

type ISmsTemplateDo interface {
	gen.SubQuery
	Debug() ISmsTemplateDo
	WithContext(ctx context.Context) ISmsTemplateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmsTemplateDo
	WriteDB() ISmsTemplateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmsTemplateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmsTemplateDo
	Not(conds ...gen.Condition) ISmsTemplateDo
	Or(conds ...gen.Condition) ISmsTemplateDo
	Select(conds ...field.Expr) ISmsTemplateDo
	Where(conds ...gen.Condition) ISmsTemplateDo
	Order(conds ...field.Expr) ISmsTemplateDo
	Distinct(cols ...field.Expr) ISmsTemplateDo
	Omit(cols ...field.Expr) ISmsTemplateDo
	Join(table schema.Tabler, on ...field.Expr) ISmsTemplateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmsTemplateDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmsTemplateDo
	Group(cols ...field.Expr) ISmsTemplateDo
	Having(conds ...gen.Condition) ISmsTemplateDo
	Limit(limit int) ISmsTemplateDo
	Offset(offset int) ISmsTemplateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsTemplateDo
	Unscoped() ISmsTemplateDo
	Create(values ...*model.SmsTemplate) error
	CreateInBatches(values []*model.SmsTemplate, batchSize int) error
	Save(values ...*model.SmsTemplate) error
	First() (*model.SmsTemplate, error)
	Take() (*model.SmsTemplate, error)
	Last() (*model.SmsTemplate, error)
	Find() ([]*model.SmsTemplate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsTemplate, err error)
	FindInBatches(result *[]*model.SmsTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmsTemplate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmsTemplateDo
	Assign(attrs ...field.AssignExpr) ISmsTemplateDo
	Joins(fields ...field.RelationField) ISmsTemplateDo
	Preload(fields ...field.RelationField) ISmsTemplateDo
	FirstOrInit() (*model.SmsTemplate, error)
	FirstOrCreate() (*model.SmsTemplate, error)
	FindByPage(offset int, limit int) (result []*model.SmsTemplate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmsTemplateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smsTemplateDo) Debug() ISmsTemplateDo {
	return s.withDO(s.DO.Debug())
}

func (s smsTemplateDo) WithContext(ctx context.Context) ISmsTemplateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smsTemplateDo) ReadDB() ISmsTemplateDo {
	return s.Clauses(dbresolver.Read)
}

func (s smsTemplateDo) WriteDB() ISmsTemplateDo {
	return s.Clauses(dbresolver.Write)
}

func (s smsTemplateDo) Session(config *gorm.Session) ISmsTemplateDo {
	return s.withDO(s.DO.Session(config))
}

func (s smsTemplateDo) Clauses(conds ...clause.Expression) ISmsTemplateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smsTemplateDo) Returning(value interface{}, columns ...string) ISmsTemplateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smsTemplateDo) Not(conds ...gen.Condition) ISmsTemplateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smsTemplateDo) Or(conds ...gen.Condition) ISmsTemplateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smsTemplateDo) Select(conds ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smsTemplateDo) Where(conds ...gen.Condition) ISmsTemplateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smsTemplateDo) Order(conds ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smsTemplateDo) Distinct(cols ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smsTemplateDo) Omit(cols ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smsTemplateDo) Join(table schema.Tabler, on ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smsTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smsTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smsTemplateDo) Group(cols ...field.Expr) ISmsTemplateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smsTemplateDo) Having(conds ...gen.Condition) ISmsTemplateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smsTemplateDo) Limit(limit int) ISmsTemplateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smsTemplateDo) Offset(offset int) ISmsTemplateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smsTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmsTemplateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smsTemplateDo) Unscoped() ISmsTemplateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smsTemplateDo) Create(values ...*model.SmsTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smsTemplateDo) CreateInBatches(values []*model.SmsTemplate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smsTemplateDo) Save(values ...*model.SmsTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smsTemplateDo) First() (*model.SmsTemplate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsTemplate), nil
	}
}

func (s smsTemplateDo) Take() (*model.SmsTemplate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsTemplate), nil
	}
}

func (s smsTemplateDo) Last() (*model.SmsTemplate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsTemplate), nil
	}
}

func (s smsTemplateDo) Find() ([]*model.SmsTemplate, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmsTemplate), err
}

func (s smsTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmsTemplate, err error) {
	buf := make([]*model.SmsTemplate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smsTemplateDo) FindInBatches(result *[]*model.SmsTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smsTemplateDo) Attrs(attrs ...field.AssignExpr) ISmsTemplateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smsTemplateDo) Assign(attrs ...field.AssignExpr) ISmsTemplateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smsTemplateDo) Joins(fields ...field.RelationField) ISmsTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smsTemplateDo) Preload(fields ...field.RelationField) ISmsTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smsTemplateDo) FirstOrInit() (*model.SmsTemplate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsTemplate), nil
	}
}

func (s smsTemplateDo) FirstOrCreate() (*model.SmsTemplate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmsTemplate), nil
	}
}

func (s smsTemplateDo) FindByPage(offset int, limit int) (result []*model.SmsTemplate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smsTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smsTemplateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smsTemplateDo) Delete(models ...*model.SmsTemplate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smsTemplateDo) withDO(do gen.Dao) *smsTemplateDo {
	s.DO = *do.(*gen.DO)
	return s
}
