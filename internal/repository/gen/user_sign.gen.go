// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newUserSign(db *gorm.DB, opts ...gen.DOOption) userSign {
	_userSign := userSign{}

	_userSign.userSignDo.UseDB(db, opts...)
	_userSign.userSignDo.UseModel(&model.UserSign{})

	tableName := _userSign.userSignDo.TableName()
	_userSign.ALL = field.NewAsterisk(tableName)
	_userSign.ID = field.NewInt64(tableName, "id")
	_userSign.UID = field.NewInt64(tableName, "uid")
	_userSign.Title = field.NewString(tableName, "title")
	_userSign.Number = field.NewInt64(tableName, "number")
	_userSign.Balance = field.NewInt64(tableName, "balance")
	_userSign.Type = field.NewInt64(tableName, "type")
	_userSign.CreateDay = field.NewTime(tableName, "create_day")
	_userSign.CreatedAt = field.NewInt64(tableName, "created_at")
	_userSign.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userSign.DeletedAt = field.NewField(tableName, "deleted_at")

	_userSign.fillFieldMap()

	return _userSign
}

// userSign 签到记录表
type userSign struct {
	userSignDo userSignDo

	ALL       field.Asterisk
	ID        field.Int64
	UID       field.Int64  // 用户uid
	Title     field.String // 签到说明
	Number    field.Int64  // 获得
	Balance   field.Int64  // 剩余
	Type      field.Int64  // 类型，1积分，2经验
	CreateDay field.Time   // 签到日期
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userSign) Table(newTableName string) *userSign {
	u.userSignDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSign) As(alias string) *userSign {
	u.userSignDo.DO = *(u.userSignDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userSign) updateTableName(table string) *userSign {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.Title = field.NewString(table, "title")
	u.Number = field.NewInt64(table, "number")
	u.Balance = field.NewInt64(table, "balance")
	u.Type = field.NewInt64(table, "type")
	u.CreateDay = field.NewTime(table, "create_day")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userSign) WithContext(ctx context.Context) IUserSignDo { return u.userSignDo.WithContext(ctx) }

func (u userSign) TableName() string { return u.userSignDo.TableName() }

func (u userSign) Alias() string { return u.userSignDo.Alias() }

func (u userSign) Columns(cols ...field.Expr) gen.Columns { return u.userSignDo.Columns(cols...) }

func (u *userSign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSign) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 10)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["title"] = u.Title
	u.fieldMap["number"] = u.Number
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["type"] = u.Type
	u.fieldMap["create_day"] = u.CreateDay
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userSign) clone(db *gorm.DB) userSign {
	u.userSignDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSign) replaceDB(db *gorm.DB) userSign {
	u.userSignDo.ReplaceDB(db)
	return u
}

type userSignDo struct{ gen.DO }

type IUserSignDo interface {
	gen.SubQuery
	Debug() IUserSignDo
	WithContext(ctx context.Context) IUserSignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSignDo
	WriteDB() IUserSignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserSignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserSignDo
	Not(conds ...gen.Condition) IUserSignDo
	Or(conds ...gen.Condition) IUserSignDo
	Select(conds ...field.Expr) IUserSignDo
	Where(conds ...gen.Condition) IUserSignDo
	Order(conds ...field.Expr) IUserSignDo
	Distinct(cols ...field.Expr) IUserSignDo
	Omit(cols ...field.Expr) IUserSignDo
	Join(table schema.Tabler, on ...field.Expr) IUserSignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSignDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSignDo
	Group(cols ...field.Expr) IUserSignDo
	Having(conds ...gen.Condition) IUserSignDo
	Limit(limit int) IUserSignDo
	Offset(offset int) IUserSignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSignDo
	Unscoped() IUserSignDo
	Create(values ...*model.UserSign) error
	CreateInBatches(values []*model.UserSign, batchSize int) error
	Save(values ...*model.UserSign) error
	First() (*model.UserSign, error)
	Take() (*model.UserSign, error)
	Last() (*model.UserSign, error)
	Find() ([]*model.UserSign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSign, err error)
	FindInBatches(result *[]*model.UserSign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSignDo
	Assign(attrs ...field.AssignExpr) IUserSignDo
	Joins(fields ...field.RelationField) IUserSignDo
	Preload(fields ...field.RelationField) IUserSignDo
	FirstOrInit() (*model.UserSign, error)
	FirstOrCreate() (*model.UserSign, error)
	FindByPage(offset int, limit int) (result []*model.UserSign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSignDo) Debug() IUserSignDo {
	return u.withDO(u.DO.Debug())
}

func (u userSignDo) WithContext(ctx context.Context) IUserSignDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSignDo) ReadDB() IUserSignDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSignDo) WriteDB() IUserSignDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSignDo) Session(config *gorm.Session) IUserSignDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSignDo) Clauses(conds ...clause.Expression) IUserSignDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSignDo) Returning(value interface{}, columns ...string) IUserSignDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSignDo) Not(conds ...gen.Condition) IUserSignDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSignDo) Or(conds ...gen.Condition) IUserSignDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSignDo) Select(conds ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSignDo) Where(conds ...gen.Condition) IUserSignDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSignDo) Order(conds ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSignDo) Distinct(cols ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSignDo) Omit(cols ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSignDo) Join(table schema.Tabler, on ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSignDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSignDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSignDo) Group(cols ...field.Expr) IUserSignDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSignDo) Having(conds ...gen.Condition) IUserSignDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSignDo) Limit(limit int) IUserSignDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSignDo) Offset(offset int) IUserSignDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserSignDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSignDo) Unscoped() IUserSignDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSignDo) Create(values ...*model.UserSign) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSignDo) CreateInBatches(values []*model.UserSign, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSignDo) Save(values ...*model.UserSign) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSignDo) First() (*model.UserSign, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSign), nil
	}
}

func (u userSignDo) Take() (*model.UserSign, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSign), nil
	}
}

func (u userSignDo) Last() (*model.UserSign, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSign), nil
	}
}

func (u userSignDo) Find() ([]*model.UserSign, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSign), err
}

func (u userSignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserSign, err error) {
	buf := make([]*model.UserSign, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSignDo) FindInBatches(result *[]*model.UserSign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSignDo) Attrs(attrs ...field.AssignExpr) IUserSignDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSignDo) Assign(attrs ...field.AssignExpr) IUserSignDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSignDo) Joins(fields ...field.RelationField) IUserSignDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSignDo) Preload(fields ...field.RelationField) IUserSignDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSignDo) FirstOrInit() (*model.UserSign, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSign), nil
	}
}

func (u userSignDo) FirstOrCreate() (*model.UserSign, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSign), nil
	}
}

func (u userSignDo) FindByPage(offset int, limit int) (result []*model.UserSign, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSignDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSignDo) Delete(models ...*model.UserSign) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSignDo) withDO(do gen.Dao) *userSignDo {
	u.DO = *do.(*gen.DO)
	return u
}
