// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreProductRule(db *gorm.DB, opts ...gen.DOOption) ebStoreProductRule {
	_ebStoreProductRule := ebStoreProductRule{}

	_ebStoreProductRule.ebStoreProductRuleDo.UseDB(db, opts...)
	_ebStoreProductRule.ebStoreProductRuleDo.UseModel(&model.EbStoreProductRule{})

	tableName := _ebStoreProductRule.ebStoreProductRuleDo.TableName()
	_ebStoreProductRule.ALL = field.NewAsterisk(tableName)
	_ebStoreProductRule.ID = field.NewInt32(tableName, "id")
	_ebStoreProductRule.RuleName = field.NewString(tableName, "rule_name")
	_ebStoreProductRule.RuleValue = field.NewString(tableName, "rule_value")

	_ebStoreProductRule.fillFieldMap()

	return _ebStoreProductRule
}

// ebStoreProductRule 商品规则值(规格)表
type ebStoreProductRule struct {
	ebStoreProductRuleDo ebStoreProductRuleDo

	ALL       field.Asterisk
	ID        field.Int32
	RuleName  field.String // 规格名称
	RuleValue field.String // 规格值

	fieldMap map[string]field.Expr
}

func (e ebStoreProductRule) Table(newTableName string) *ebStoreProductRule {
	e.ebStoreProductRuleDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreProductRule) As(alias string) *ebStoreProductRule {
	e.ebStoreProductRuleDo.DO = *(e.ebStoreProductRuleDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreProductRule) updateTableName(table string) *ebStoreProductRule {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.RuleName = field.NewString(table, "rule_name")
	e.RuleValue = field.NewString(table, "rule_value")

	e.fillFieldMap()

	return e
}

func (e *ebStoreProductRule) WithContext(ctx context.Context) IEbStoreProductRuleDo {
	return e.ebStoreProductRuleDo.WithContext(ctx)
}

func (e ebStoreProductRule) TableName() string { return e.ebStoreProductRuleDo.TableName() }

func (e ebStoreProductRule) Alias() string { return e.ebStoreProductRuleDo.Alias() }

func (e ebStoreProductRule) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreProductRuleDo.Columns(cols...)
}

func (e *ebStoreProductRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreProductRule) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 3)
	e.fieldMap["id"] = e.ID
	e.fieldMap["rule_name"] = e.RuleName
	e.fieldMap["rule_value"] = e.RuleValue
}

func (e ebStoreProductRule) clone(db *gorm.DB) ebStoreProductRule {
	e.ebStoreProductRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreProductRule) replaceDB(db *gorm.DB) ebStoreProductRule {
	e.ebStoreProductRuleDo.ReplaceDB(db)
	return e
}

type ebStoreProductRuleDo struct{ gen.DO }

type IEbStoreProductRuleDo interface {
	gen.SubQuery
	Debug() IEbStoreProductRuleDo
	WithContext(ctx context.Context) IEbStoreProductRuleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreProductRuleDo
	WriteDB() IEbStoreProductRuleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreProductRuleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreProductRuleDo
	Not(conds ...gen.Condition) IEbStoreProductRuleDo
	Or(conds ...gen.Condition) IEbStoreProductRuleDo
	Select(conds ...field.Expr) IEbStoreProductRuleDo
	Where(conds ...gen.Condition) IEbStoreProductRuleDo
	Order(conds ...field.Expr) IEbStoreProductRuleDo
	Distinct(cols ...field.Expr) IEbStoreProductRuleDo
	Omit(cols ...field.Expr) IEbStoreProductRuleDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreProductRuleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRuleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRuleDo
	Group(cols ...field.Expr) IEbStoreProductRuleDo
	Having(conds ...gen.Condition) IEbStoreProductRuleDo
	Limit(limit int) IEbStoreProductRuleDo
	Offset(offset int) IEbStoreProductRuleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductRuleDo
	Unscoped() IEbStoreProductRuleDo
	Create(values ...*model.EbStoreProductRule) error
	CreateInBatches(values []*model.EbStoreProductRule, batchSize int) error
	Save(values ...*model.EbStoreProductRule) error
	First() (*model.EbStoreProductRule, error)
	Take() (*model.EbStoreProductRule, error)
	Last() (*model.EbStoreProductRule, error)
	Find() ([]*model.EbStoreProductRule, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductRule, err error)
	FindInBatches(result *[]*model.EbStoreProductRule, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreProductRule) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreProductRuleDo
	Assign(attrs ...field.AssignExpr) IEbStoreProductRuleDo
	Joins(fields ...field.RelationField) IEbStoreProductRuleDo
	Preload(fields ...field.RelationField) IEbStoreProductRuleDo
	FirstOrInit() (*model.EbStoreProductRule, error)
	FirstOrCreate() (*model.EbStoreProductRule, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreProductRule, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreProductRuleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreProductRuleDo) Debug() IEbStoreProductRuleDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreProductRuleDo) WithContext(ctx context.Context) IEbStoreProductRuleDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreProductRuleDo) ReadDB() IEbStoreProductRuleDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreProductRuleDo) WriteDB() IEbStoreProductRuleDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreProductRuleDo) Session(config *gorm.Session) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreProductRuleDo) Clauses(conds ...clause.Expression) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreProductRuleDo) Returning(value interface{}, columns ...string) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreProductRuleDo) Not(conds ...gen.Condition) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreProductRuleDo) Or(conds ...gen.Condition) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreProductRuleDo) Select(conds ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreProductRuleDo) Where(conds ...gen.Condition) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreProductRuleDo) Order(conds ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreProductRuleDo) Distinct(cols ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreProductRuleDo) Omit(cols ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreProductRuleDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreProductRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreProductRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreProductRuleDo) Group(cols ...field.Expr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreProductRuleDo) Having(conds ...gen.Condition) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreProductRuleDo) Limit(limit int) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreProductRuleDo) Offset(offset int) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreProductRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreProductRuleDo) Unscoped() IEbStoreProductRuleDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreProductRuleDo) Create(values ...*model.EbStoreProductRule) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreProductRuleDo) CreateInBatches(values []*model.EbStoreProductRule, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreProductRuleDo) Save(values ...*model.EbStoreProductRule) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreProductRuleDo) First() (*model.EbStoreProductRule, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRule), nil
	}
}

func (e ebStoreProductRuleDo) Take() (*model.EbStoreProductRule, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRule), nil
	}
}

func (e ebStoreProductRuleDo) Last() (*model.EbStoreProductRule, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRule), nil
	}
}

func (e ebStoreProductRuleDo) Find() ([]*model.EbStoreProductRule, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreProductRule), err
}

func (e ebStoreProductRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductRule, err error) {
	buf := make([]*model.EbStoreProductRule, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreProductRuleDo) FindInBatches(result *[]*model.EbStoreProductRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreProductRuleDo) Attrs(attrs ...field.AssignExpr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreProductRuleDo) Assign(attrs ...field.AssignExpr) IEbStoreProductRuleDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreProductRuleDo) Joins(fields ...field.RelationField) IEbStoreProductRuleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreProductRuleDo) Preload(fields ...field.RelationField) IEbStoreProductRuleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreProductRuleDo) FirstOrInit() (*model.EbStoreProductRule, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRule), nil
	}
}

func (e ebStoreProductRuleDo) FirstOrCreate() (*model.EbStoreProductRule, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductRule), nil
	}
}

func (e ebStoreProductRuleDo) FindByPage(offset int, limit int) (result []*model.EbStoreProductRule, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreProductRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreProductRuleDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreProductRuleDo) Delete(models ...*model.EbStoreProductRule) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreProductRuleDo) withDO(do gen.Dao) *ebStoreProductRuleDo {
	e.DO = *do.(*gen.DO)
	return e
}
