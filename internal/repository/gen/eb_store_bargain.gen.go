// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreBargain(db *gorm.DB, opts ...gen.DOOption) ebStoreBargain {
	_ebStoreBargain := ebStoreBargain{}

	_ebStoreBargain.ebStoreBargainDo.UseDB(db, opts...)
	_ebStoreBargain.ebStoreBargainDo.UseModel(&model.EbStoreBargain{})

	tableName := _ebStoreBargain.ebStoreBargainDo.TableName()
	_ebStoreBargain.ALL = field.NewAsterisk(tableName)
	_ebStoreBargain.ID = field.NewInt32(tableName, "id")
	_ebStoreBargain.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreBargain.Title = field.NewString(tableName, "title")
	_ebStoreBargain.Image = field.NewString(tableName, "image")
	_ebStoreBargain.UnitName = field.NewString(tableName, "unit_name")
	_ebStoreBargain.Stock = field.NewInt32(tableName, "stock")
	_ebStoreBargain.Sales = field.NewInt32(tableName, "sales")
	_ebStoreBargain.Images = field.NewString(tableName, "images")
	_ebStoreBargain.StartTime = field.NewInt64(tableName, "start_time")
	_ebStoreBargain.StopTime = field.NewInt64(tableName, "stop_time")
	_ebStoreBargain.StoreName = field.NewString(tableName, "store_name")
	_ebStoreBargain.Price = field.NewFloat64(tableName, "price")
	_ebStoreBargain.MinPrice = field.NewFloat64(tableName, "min_price")
	_ebStoreBargain.Num = field.NewInt32(tableName, "num")
	_ebStoreBargain.BargainMaxPrice = field.NewFloat64(tableName, "bargain_max_price")
	_ebStoreBargain.BargainMinPrice = field.NewFloat64(tableName, "bargain_min_price")
	_ebStoreBargain.BargainNum = field.NewInt32(tableName, "bargain_num")
	_ebStoreBargain.Status = field.NewInt32(tableName, "status")
	_ebStoreBargain.GiveIntegral = field.NewInt32(tableName, "give_integral")
	_ebStoreBargain.Info = field.NewString(tableName, "info")
	_ebStoreBargain.Cost = field.NewFloat64(tableName, "cost")
	_ebStoreBargain.Sort = field.NewInt32(tableName, "sort")
	_ebStoreBargain.IsHot = field.NewInt32(tableName, "is_hot")
	_ebStoreBargain.IsDel = field.NewInt32(tableName, "is_del")
	_ebStoreBargain.AddTime = field.NewInt64(tableName, "add_time")
	_ebStoreBargain.IsPostage = field.NewInt32(tableName, "is_postage")
	_ebStoreBargain.Postage = field.NewFloat64(tableName, "postage")
	_ebStoreBargain.Rule = field.NewString(tableName, "rule")
	_ebStoreBargain.Look = field.NewInt32(tableName, "look")
	_ebStoreBargain.Share = field.NewInt32(tableName, "share")
	_ebStoreBargain.TempID = field.NewInt32(tableName, "temp_id")
	_ebStoreBargain.Weight = field.NewFloat64(tableName, "weight")
	_ebStoreBargain.Volume = field.NewFloat64(tableName, "volume")
	_ebStoreBargain.Quota = field.NewInt32(tableName, "quota")
	_ebStoreBargain.QuotaShow = field.NewInt32(tableName, "quota_show")
	_ebStoreBargain.PeopleNum = field.NewInt32(tableName, "people_num")

	_ebStoreBargain.fillFieldMap()

	return _ebStoreBargain
}

// ebStoreBargain 砍价表
type ebStoreBargain struct {
	ebStoreBargainDo ebStoreBargainDo

	ALL             field.Asterisk
	ID              field.Int32   // 砍价商品ID
	ProductID       field.Int32   // 关联商品ID
	Title           field.String  // 砍价活动名称
	Image           field.String  // 砍价活动图片
	UnitName        field.String  // 单位名称
	Stock           field.Int32   // 库存
	Sales           field.Int32   // 销量
	Images          field.String  // 砍价商品轮播图
	StartTime       field.Int64   // 砍价开启时间
	StopTime        field.Int64   // 砍价结束时间
	StoreName       field.String  // 砍价商品名称
	Price           field.Float64 // 砍价金额
	MinPrice        field.Float64 // 砍价商品最低价
	Num             field.Int32   // 购买数量限制——单个活动每个用户发起砍价次数限制
	BargainMaxPrice field.Float64 // 用户每次砍价的最大金额
	BargainMinPrice field.Float64 // 用户每次砍价的最小金额
	BargainNum      field.Int32   // 帮砍次数——单个商品用户可以帮砍的次数
	Status          field.Int32   // 砍价状态 0(到砍价时间不自动开启)  1(到砍价时间自动开启时间)
	GiveIntegral    field.Int32   // 反多少积分
	Info            field.String  // 砍价活动简介
	Cost            field.Float64 // 成本价
	Sort            field.Int32   // 排序
	IsHot           field.Int32   // 是否推荐0不推荐1推荐
	IsDel           field.Int32   // 是否删除 0未删除 1删除
	AddTime         field.Int64   // 添加时间
	IsPostage       field.Int32   // 是否包邮 0不包邮 1包邮
	Postage         field.Float64 // 邮费
	Rule            field.String  // 砍价规则
	Look            field.Int32   // 砍价商品浏览量
	Share           field.Int32   // 砍价商品分享量
	TempID          field.Int32   // 运费模板ID
	Weight          field.Float64 // 重量
	Volume          field.Float64 // 体积
	Quota           field.Int32   // 限购总数
	QuotaShow       field.Int32   // 限量总数显示
	PeopleNum       field.Int32   // 砍价人数——需要多少人砍价成功

	fieldMap map[string]field.Expr
}

func (e ebStoreBargain) Table(newTableName string) *ebStoreBargain {
	e.ebStoreBargainDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreBargain) As(alias string) *ebStoreBargain {
	e.ebStoreBargainDo.DO = *(e.ebStoreBargainDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreBargain) updateTableName(table string) *ebStoreBargain {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.ProductID = field.NewInt32(table, "product_id")
	e.Title = field.NewString(table, "title")
	e.Image = field.NewString(table, "image")
	e.UnitName = field.NewString(table, "unit_name")
	e.Stock = field.NewInt32(table, "stock")
	e.Sales = field.NewInt32(table, "sales")
	e.Images = field.NewString(table, "images")
	e.StartTime = field.NewInt64(table, "start_time")
	e.StopTime = field.NewInt64(table, "stop_time")
	e.StoreName = field.NewString(table, "store_name")
	e.Price = field.NewFloat64(table, "price")
	e.MinPrice = field.NewFloat64(table, "min_price")
	e.Num = field.NewInt32(table, "num")
	e.BargainMaxPrice = field.NewFloat64(table, "bargain_max_price")
	e.BargainMinPrice = field.NewFloat64(table, "bargain_min_price")
	e.BargainNum = field.NewInt32(table, "bargain_num")
	e.Status = field.NewInt32(table, "status")
	e.GiveIntegral = field.NewInt32(table, "give_integral")
	e.Info = field.NewString(table, "info")
	e.Cost = field.NewFloat64(table, "cost")
	e.Sort = field.NewInt32(table, "sort")
	e.IsHot = field.NewInt32(table, "is_hot")
	e.IsDel = field.NewInt32(table, "is_del")
	e.AddTime = field.NewInt64(table, "add_time")
	e.IsPostage = field.NewInt32(table, "is_postage")
	e.Postage = field.NewFloat64(table, "postage")
	e.Rule = field.NewString(table, "rule")
	e.Look = field.NewInt32(table, "look")
	e.Share = field.NewInt32(table, "share")
	e.TempID = field.NewInt32(table, "temp_id")
	e.Weight = field.NewFloat64(table, "weight")
	e.Volume = field.NewFloat64(table, "volume")
	e.Quota = field.NewInt32(table, "quota")
	e.QuotaShow = field.NewInt32(table, "quota_show")
	e.PeopleNum = field.NewInt32(table, "people_num")

	e.fillFieldMap()

	return e
}

func (e *ebStoreBargain) WithContext(ctx context.Context) IEbStoreBargainDo {
	return e.ebStoreBargainDo.WithContext(ctx)
}

func (e ebStoreBargain) TableName() string { return e.ebStoreBargainDo.TableName() }

func (e ebStoreBargain) Alias() string { return e.ebStoreBargainDo.Alias() }

func (e ebStoreBargain) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreBargainDo.Columns(cols...)
}

func (e *ebStoreBargain) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreBargain) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 36)
	e.fieldMap["id"] = e.ID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["title"] = e.Title
	e.fieldMap["image"] = e.Image
	e.fieldMap["unit_name"] = e.UnitName
	e.fieldMap["stock"] = e.Stock
	e.fieldMap["sales"] = e.Sales
	e.fieldMap["images"] = e.Images
	e.fieldMap["start_time"] = e.StartTime
	e.fieldMap["stop_time"] = e.StopTime
	e.fieldMap["store_name"] = e.StoreName
	e.fieldMap["price"] = e.Price
	e.fieldMap["min_price"] = e.MinPrice
	e.fieldMap["num"] = e.Num
	e.fieldMap["bargain_max_price"] = e.BargainMaxPrice
	e.fieldMap["bargain_min_price"] = e.BargainMinPrice
	e.fieldMap["bargain_num"] = e.BargainNum
	e.fieldMap["status"] = e.Status
	e.fieldMap["give_integral"] = e.GiveIntegral
	e.fieldMap["info"] = e.Info
	e.fieldMap["cost"] = e.Cost
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["is_hot"] = e.IsHot
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["add_time"] = e.AddTime
	e.fieldMap["is_postage"] = e.IsPostage
	e.fieldMap["postage"] = e.Postage
	e.fieldMap["rule"] = e.Rule
	e.fieldMap["look"] = e.Look
	e.fieldMap["share"] = e.Share
	e.fieldMap["temp_id"] = e.TempID
	e.fieldMap["weight"] = e.Weight
	e.fieldMap["volume"] = e.Volume
	e.fieldMap["quota"] = e.Quota
	e.fieldMap["quota_show"] = e.QuotaShow
	e.fieldMap["people_num"] = e.PeopleNum
}

func (e ebStoreBargain) clone(db *gorm.DB) ebStoreBargain {
	e.ebStoreBargainDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreBargain) replaceDB(db *gorm.DB) ebStoreBargain {
	e.ebStoreBargainDo.ReplaceDB(db)
	return e
}

type ebStoreBargainDo struct{ gen.DO }

type IEbStoreBargainDo interface {
	gen.SubQuery
	Debug() IEbStoreBargainDo
	WithContext(ctx context.Context) IEbStoreBargainDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreBargainDo
	WriteDB() IEbStoreBargainDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreBargainDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreBargainDo
	Not(conds ...gen.Condition) IEbStoreBargainDo
	Or(conds ...gen.Condition) IEbStoreBargainDo
	Select(conds ...field.Expr) IEbStoreBargainDo
	Where(conds ...gen.Condition) IEbStoreBargainDo
	Order(conds ...field.Expr) IEbStoreBargainDo
	Distinct(cols ...field.Expr) IEbStoreBargainDo
	Omit(cols ...field.Expr) IEbStoreBargainDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreBargainDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainDo
	Group(cols ...field.Expr) IEbStoreBargainDo
	Having(conds ...gen.Condition) IEbStoreBargainDo
	Limit(limit int) IEbStoreBargainDo
	Offset(offset int) IEbStoreBargainDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreBargainDo
	Unscoped() IEbStoreBargainDo
	Create(values ...*model.EbStoreBargain) error
	CreateInBatches(values []*model.EbStoreBargain, batchSize int) error
	Save(values ...*model.EbStoreBargain) error
	First() (*model.EbStoreBargain, error)
	Take() (*model.EbStoreBargain, error)
	Last() (*model.EbStoreBargain, error)
	Find() ([]*model.EbStoreBargain, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreBargain, err error)
	FindInBatches(result *[]*model.EbStoreBargain, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreBargain) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreBargainDo
	Assign(attrs ...field.AssignExpr) IEbStoreBargainDo
	Joins(fields ...field.RelationField) IEbStoreBargainDo
	Preload(fields ...field.RelationField) IEbStoreBargainDo
	FirstOrInit() (*model.EbStoreBargain, error)
	FirstOrCreate() (*model.EbStoreBargain, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreBargain, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreBargainDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreBargainDo) Debug() IEbStoreBargainDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreBargainDo) WithContext(ctx context.Context) IEbStoreBargainDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreBargainDo) ReadDB() IEbStoreBargainDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreBargainDo) WriteDB() IEbStoreBargainDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreBargainDo) Session(config *gorm.Session) IEbStoreBargainDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreBargainDo) Clauses(conds ...clause.Expression) IEbStoreBargainDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreBargainDo) Returning(value interface{}, columns ...string) IEbStoreBargainDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreBargainDo) Not(conds ...gen.Condition) IEbStoreBargainDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreBargainDo) Or(conds ...gen.Condition) IEbStoreBargainDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreBargainDo) Select(conds ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreBargainDo) Where(conds ...gen.Condition) IEbStoreBargainDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreBargainDo) Order(conds ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreBargainDo) Distinct(cols ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreBargainDo) Omit(cols ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreBargainDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreBargainDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreBargainDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreBargainDo) Group(cols ...field.Expr) IEbStoreBargainDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreBargainDo) Having(conds ...gen.Condition) IEbStoreBargainDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreBargainDo) Limit(limit int) IEbStoreBargainDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreBargainDo) Offset(offset int) IEbStoreBargainDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreBargainDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreBargainDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreBargainDo) Unscoped() IEbStoreBargainDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreBargainDo) Create(values ...*model.EbStoreBargain) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreBargainDo) CreateInBatches(values []*model.EbStoreBargain, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreBargainDo) Save(values ...*model.EbStoreBargain) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreBargainDo) First() (*model.EbStoreBargain, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargain), nil
	}
}

func (e ebStoreBargainDo) Take() (*model.EbStoreBargain, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargain), nil
	}
}

func (e ebStoreBargainDo) Last() (*model.EbStoreBargain, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargain), nil
	}
}

func (e ebStoreBargainDo) Find() ([]*model.EbStoreBargain, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreBargain), err
}

func (e ebStoreBargainDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreBargain, err error) {
	buf := make([]*model.EbStoreBargain, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreBargainDo) FindInBatches(result *[]*model.EbStoreBargain, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreBargainDo) Attrs(attrs ...field.AssignExpr) IEbStoreBargainDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreBargainDo) Assign(attrs ...field.AssignExpr) IEbStoreBargainDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreBargainDo) Joins(fields ...field.RelationField) IEbStoreBargainDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreBargainDo) Preload(fields ...field.RelationField) IEbStoreBargainDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreBargainDo) FirstOrInit() (*model.EbStoreBargain, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargain), nil
	}
}

func (e ebStoreBargainDo) FirstOrCreate() (*model.EbStoreBargain, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargain), nil
	}
}

func (e ebStoreBargainDo) FindByPage(offset int, limit int) (result []*model.EbStoreBargain, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreBargainDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreBargainDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreBargainDo) Delete(models ...*model.EbStoreBargain) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreBargainDo) withDO(do gen.Dao) *ebStoreBargainDo {
	e.DO = *do.(*gen.DO)
	return e
}
