// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserLevel(db *gorm.DB, opts ...gen.DOOption) ebUserLevel {
	_ebUserLevel := ebUserLevel{}

	_ebUserLevel.ebUserLevelDo.UseDB(db, opts...)
	_ebUserLevel.ebUserLevelDo.UseModel(&model.EbUserLevel{})

	tableName := _ebUserLevel.ebUserLevelDo.TableName()
	_ebUserLevel.ALL = field.NewAsterisk(tableName)
	_ebUserLevel.ID = field.NewInt32(tableName, "id")
	_ebUserLevel.UID = field.NewInt32(tableName, "uid")
	_ebUserLevel.LevelID = field.NewInt32(tableName, "level_id")
	_ebUserLevel.Grade = field.NewInt32(tableName, "grade")
	_ebUserLevel.Status = field.NewBool(tableName, "status")
	_ebUserLevel.Mark = field.NewString(tableName, "mark")
	_ebUserLevel.Remind = field.NewBool(tableName, "remind")
	_ebUserLevel.IsDel = field.NewBool(tableName, "is_del")
	_ebUserLevel.Discount = field.NewInt32(tableName, "discount")
	_ebUserLevel.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserLevel.UpdateTime = field.NewTime(tableName, "update_time")
	_ebUserLevel.ExpiredTime = field.NewTime(tableName, "expired_time")

	_ebUserLevel.fillFieldMap()

	return _ebUserLevel
}

// ebUserLevel 用户等级记录表
type ebUserLevel struct {
	ebUserLevelDo ebUserLevelDo

	ALL         field.Asterisk
	ID          field.Int32
	UID         field.Int32  // 用户uid
	LevelID     field.Int32  // 等级vip
	Grade       field.Int32  // 会员等级
	Status      field.Bool   // 0:禁止,1:正常
	Mark        field.String // 备注
	Remind      field.Bool   // 是否已通知
	IsDel       field.Bool   // 是否删除,0=未删除,1=删除
	Discount    field.Int32  // 享受折扣
	CreateTime  field.Time   // 创建时间
	UpdateTime  field.Time   // 更新时间
	ExpiredTime field.Time   // 过期时间

	fieldMap map[string]field.Expr
}

func (e ebUserLevel) Table(newTableName string) *ebUserLevel {
	e.ebUserLevelDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserLevel) As(alias string) *ebUserLevel {
	e.ebUserLevelDo.DO = *(e.ebUserLevelDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserLevel) updateTableName(table string) *ebUserLevel {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.LevelID = field.NewInt32(table, "level_id")
	e.Grade = field.NewInt32(table, "grade")
	e.Status = field.NewBool(table, "status")
	e.Mark = field.NewString(table, "mark")
	e.Remind = field.NewBool(table, "remind")
	e.IsDel = field.NewBool(table, "is_del")
	e.Discount = field.NewInt32(table, "discount")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.ExpiredTime = field.NewTime(table, "expired_time")

	e.fillFieldMap()

	return e
}

func (e *ebUserLevel) WithContext(ctx context.Context) IEbUserLevelDo {
	return e.ebUserLevelDo.WithContext(ctx)
}

func (e ebUserLevel) TableName() string { return e.ebUserLevelDo.TableName() }

func (e ebUserLevel) Alias() string { return e.ebUserLevelDo.Alias() }

func (e ebUserLevel) Columns(cols ...field.Expr) gen.Columns { return e.ebUserLevelDo.Columns(cols...) }

func (e *ebUserLevel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserLevel) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["level_id"] = e.LevelID
	e.fieldMap["grade"] = e.Grade
	e.fieldMap["status"] = e.Status
	e.fieldMap["mark"] = e.Mark
	e.fieldMap["remind"] = e.Remind
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["discount"] = e.Discount
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["expired_time"] = e.ExpiredTime
}

func (e ebUserLevel) clone(db *gorm.DB) ebUserLevel {
	e.ebUserLevelDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserLevel) replaceDB(db *gorm.DB) ebUserLevel {
	e.ebUserLevelDo.ReplaceDB(db)
	return e
}

type ebUserLevelDo struct{ gen.DO }

type IEbUserLevelDo interface {
	gen.SubQuery
	Debug() IEbUserLevelDo
	WithContext(ctx context.Context) IEbUserLevelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserLevelDo
	WriteDB() IEbUserLevelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserLevelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserLevelDo
	Not(conds ...gen.Condition) IEbUserLevelDo
	Or(conds ...gen.Condition) IEbUserLevelDo
	Select(conds ...field.Expr) IEbUserLevelDo
	Where(conds ...gen.Condition) IEbUserLevelDo
	Order(conds ...field.Expr) IEbUserLevelDo
	Distinct(cols ...field.Expr) IEbUserLevelDo
	Omit(cols ...field.Expr) IEbUserLevelDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserLevelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserLevelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserLevelDo
	Group(cols ...field.Expr) IEbUserLevelDo
	Having(conds ...gen.Condition) IEbUserLevelDo
	Limit(limit int) IEbUserLevelDo
	Offset(offset int) IEbUserLevelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserLevelDo
	Unscoped() IEbUserLevelDo
	Create(values ...*model.EbUserLevel) error
	CreateInBatches(values []*model.EbUserLevel, batchSize int) error
	Save(values ...*model.EbUserLevel) error
	First() (*model.EbUserLevel, error)
	Take() (*model.EbUserLevel, error)
	Last() (*model.EbUserLevel, error)
	Find() ([]*model.EbUserLevel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserLevel, err error)
	FindInBatches(result *[]*model.EbUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserLevel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserLevelDo
	Assign(attrs ...field.AssignExpr) IEbUserLevelDo
	Joins(fields ...field.RelationField) IEbUserLevelDo
	Preload(fields ...field.RelationField) IEbUserLevelDo
	FirstOrInit() (*model.EbUserLevel, error)
	FirstOrCreate() (*model.EbUserLevel, error)
	FindByPage(offset int, limit int) (result []*model.EbUserLevel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserLevelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserLevelDo) Debug() IEbUserLevelDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserLevelDo) WithContext(ctx context.Context) IEbUserLevelDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserLevelDo) ReadDB() IEbUserLevelDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserLevelDo) WriteDB() IEbUserLevelDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserLevelDo) Session(config *gorm.Session) IEbUserLevelDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserLevelDo) Clauses(conds ...clause.Expression) IEbUserLevelDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserLevelDo) Returning(value interface{}, columns ...string) IEbUserLevelDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserLevelDo) Not(conds ...gen.Condition) IEbUserLevelDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserLevelDo) Or(conds ...gen.Condition) IEbUserLevelDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserLevelDo) Select(conds ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserLevelDo) Where(conds ...gen.Condition) IEbUserLevelDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserLevelDo) Order(conds ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserLevelDo) Distinct(cols ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserLevelDo) Omit(cols ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserLevelDo) Join(table schema.Tabler, on ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserLevelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserLevelDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserLevelDo) Group(cols ...field.Expr) IEbUserLevelDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserLevelDo) Having(conds ...gen.Condition) IEbUserLevelDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserLevelDo) Limit(limit int) IEbUserLevelDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserLevelDo) Offset(offset int) IEbUserLevelDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserLevelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserLevelDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserLevelDo) Unscoped() IEbUserLevelDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserLevelDo) Create(values ...*model.EbUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserLevelDo) CreateInBatches(values []*model.EbUserLevel, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserLevelDo) Save(values ...*model.EbUserLevel) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserLevelDo) First() (*model.EbUserLevel, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserLevel), nil
	}
}

func (e ebUserLevelDo) Take() (*model.EbUserLevel, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserLevel), nil
	}
}

func (e ebUserLevelDo) Last() (*model.EbUserLevel, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserLevel), nil
	}
}

func (e ebUserLevelDo) Find() ([]*model.EbUserLevel, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserLevel), err
}

func (e ebUserLevelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserLevel, err error) {
	buf := make([]*model.EbUserLevel, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserLevelDo) FindInBatches(result *[]*model.EbUserLevel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserLevelDo) Attrs(attrs ...field.AssignExpr) IEbUserLevelDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserLevelDo) Assign(attrs ...field.AssignExpr) IEbUserLevelDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserLevelDo) Joins(fields ...field.RelationField) IEbUserLevelDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserLevelDo) Preload(fields ...field.RelationField) IEbUserLevelDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserLevelDo) FirstOrInit() (*model.EbUserLevel, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserLevel), nil
	}
}

func (e ebUserLevelDo) FirstOrCreate() (*model.EbUserLevel, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserLevel), nil
	}
}

func (e ebUserLevelDo) FindByPage(offset int, limit int) (result []*model.EbUserLevel, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserLevelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserLevelDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserLevelDo) Delete(models ...*model.EbUserLevel) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserLevelDo) withDO(do gen.Dao) *ebUserLevelDo {
	e.DO = *do.(*gen.DO)
	return e
}
