// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbExpress(db *gorm.DB, opts ...gen.DOOption) ebExpress {
	_ebExpress := ebExpress{}

	_ebExpress.ebExpressDo.UseDB(db, opts...)
	_ebExpress.ebExpressDo.UseModel(&model.EbExpress{})

	tableName := _ebExpress.ebExpressDo.TableName()
	_ebExpress.ALL = field.NewAsterisk(tableName)
	_ebExpress.ID = field.NewInt32(tableName, "id")
	_ebExpress.Code = field.NewString(tableName, "code")
	_ebExpress.Name = field.NewString(tableName, "name")
	_ebExpress.PartnerID = field.NewBool(tableName, "partner_id")
	_ebExpress.PartnerKey = field.NewBool(tableName, "partner_key")
	_ebExpress.Net = field.NewBool(tableName, "net")
	_ebExpress.Account = field.NewString(tableName, "account")
	_ebExpress.Password = field.NewString(tableName, "password")
	_ebExpress.NetName = field.NewString(tableName, "net_name")
	_ebExpress.Sort = field.NewInt32(tableName, "sort")
	_ebExpress.IsShow = field.NewBool(tableName, "is_show")
	_ebExpress.Status = field.NewBool(tableName, "status")

	_ebExpress.fillFieldMap()

	return _ebExpress
}

// ebExpress 快递公司表
type ebExpress struct {
	ebExpressDo ebExpressDo

	ALL        field.Asterisk
	ID         field.Int32  // 快递公司id
	Code       field.String // 快递公司简称
	Name       field.String // 快递公司全称
	PartnerID  field.Bool   // 是否需要月结账号
	PartnerKey field.Bool   // 是否需要月结密码
	Net        field.Bool   // 是否需要取件网店
	Account    field.String // 账号
	Password   field.String // 密码
	NetName    field.String // 网点名称
	Sort       field.Int32  // 排序
	IsShow     field.Bool   // 是否显示
	Status     field.Bool   // 是否可用

	fieldMap map[string]field.Expr
}

func (e ebExpress) Table(newTableName string) *ebExpress {
	e.ebExpressDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebExpress) As(alias string) *ebExpress {
	e.ebExpressDo.DO = *(e.ebExpressDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebExpress) updateTableName(table string) *ebExpress {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Code = field.NewString(table, "code")
	e.Name = field.NewString(table, "name")
	e.PartnerID = field.NewBool(table, "partner_id")
	e.PartnerKey = field.NewBool(table, "partner_key")
	e.Net = field.NewBool(table, "net")
	e.Account = field.NewString(table, "account")
	e.Password = field.NewString(table, "password")
	e.NetName = field.NewString(table, "net_name")
	e.Sort = field.NewInt32(table, "sort")
	e.IsShow = field.NewBool(table, "is_show")
	e.Status = field.NewBool(table, "status")

	e.fillFieldMap()

	return e
}

func (e *ebExpress) WithContext(ctx context.Context) IEbExpressDo {
	return e.ebExpressDo.WithContext(ctx)
}

func (e ebExpress) TableName() string { return e.ebExpressDo.TableName() }

func (e ebExpress) Alias() string { return e.ebExpressDo.Alias() }

func (e ebExpress) Columns(cols ...field.Expr) gen.Columns { return e.ebExpressDo.Columns(cols...) }

func (e *ebExpress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebExpress) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["code"] = e.Code
	e.fieldMap["name"] = e.Name
	e.fieldMap["partner_id"] = e.PartnerID
	e.fieldMap["partner_key"] = e.PartnerKey
	e.fieldMap["net"] = e.Net
	e.fieldMap["account"] = e.Account
	e.fieldMap["password"] = e.Password
	e.fieldMap["net_name"] = e.NetName
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["is_show"] = e.IsShow
	e.fieldMap["status"] = e.Status
}

func (e ebExpress) clone(db *gorm.DB) ebExpress {
	e.ebExpressDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebExpress) replaceDB(db *gorm.DB) ebExpress {
	e.ebExpressDo.ReplaceDB(db)
	return e
}

type ebExpressDo struct{ gen.DO }

type IEbExpressDo interface {
	gen.SubQuery
	Debug() IEbExpressDo
	WithContext(ctx context.Context) IEbExpressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbExpressDo
	WriteDB() IEbExpressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbExpressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbExpressDo
	Not(conds ...gen.Condition) IEbExpressDo
	Or(conds ...gen.Condition) IEbExpressDo
	Select(conds ...field.Expr) IEbExpressDo
	Where(conds ...gen.Condition) IEbExpressDo
	Order(conds ...field.Expr) IEbExpressDo
	Distinct(cols ...field.Expr) IEbExpressDo
	Omit(cols ...field.Expr) IEbExpressDo
	Join(table schema.Tabler, on ...field.Expr) IEbExpressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbExpressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbExpressDo
	Group(cols ...field.Expr) IEbExpressDo
	Having(conds ...gen.Condition) IEbExpressDo
	Limit(limit int) IEbExpressDo
	Offset(offset int) IEbExpressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbExpressDo
	Unscoped() IEbExpressDo
	Create(values ...*model.EbExpress) error
	CreateInBatches(values []*model.EbExpress, batchSize int) error
	Save(values ...*model.EbExpress) error
	First() (*model.EbExpress, error)
	Take() (*model.EbExpress, error)
	Last() (*model.EbExpress, error)
	Find() ([]*model.EbExpress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbExpress, err error)
	FindInBatches(result *[]*model.EbExpress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbExpress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbExpressDo
	Assign(attrs ...field.AssignExpr) IEbExpressDo
	Joins(fields ...field.RelationField) IEbExpressDo
	Preload(fields ...field.RelationField) IEbExpressDo
	FirstOrInit() (*model.EbExpress, error)
	FirstOrCreate() (*model.EbExpress, error)
	FindByPage(offset int, limit int) (result []*model.EbExpress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbExpressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebExpressDo) Debug() IEbExpressDo {
	return e.withDO(e.DO.Debug())
}

func (e ebExpressDo) WithContext(ctx context.Context) IEbExpressDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebExpressDo) ReadDB() IEbExpressDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebExpressDo) WriteDB() IEbExpressDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebExpressDo) Session(config *gorm.Session) IEbExpressDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebExpressDo) Clauses(conds ...clause.Expression) IEbExpressDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebExpressDo) Returning(value interface{}, columns ...string) IEbExpressDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebExpressDo) Not(conds ...gen.Condition) IEbExpressDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebExpressDo) Or(conds ...gen.Condition) IEbExpressDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebExpressDo) Select(conds ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebExpressDo) Where(conds ...gen.Condition) IEbExpressDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebExpressDo) Order(conds ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebExpressDo) Distinct(cols ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebExpressDo) Omit(cols ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebExpressDo) Join(table schema.Tabler, on ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebExpressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebExpressDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebExpressDo) Group(cols ...field.Expr) IEbExpressDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebExpressDo) Having(conds ...gen.Condition) IEbExpressDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebExpressDo) Limit(limit int) IEbExpressDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebExpressDo) Offset(offset int) IEbExpressDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebExpressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbExpressDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebExpressDo) Unscoped() IEbExpressDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebExpressDo) Create(values ...*model.EbExpress) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebExpressDo) CreateInBatches(values []*model.EbExpress, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebExpressDo) Save(values ...*model.EbExpress) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebExpressDo) First() (*model.EbExpress, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbExpress), nil
	}
}

func (e ebExpressDo) Take() (*model.EbExpress, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbExpress), nil
	}
}

func (e ebExpressDo) Last() (*model.EbExpress, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbExpress), nil
	}
}

func (e ebExpressDo) Find() ([]*model.EbExpress, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbExpress), err
}

func (e ebExpressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbExpress, err error) {
	buf := make([]*model.EbExpress, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebExpressDo) FindInBatches(result *[]*model.EbExpress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebExpressDo) Attrs(attrs ...field.AssignExpr) IEbExpressDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebExpressDo) Assign(attrs ...field.AssignExpr) IEbExpressDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebExpressDo) Joins(fields ...field.RelationField) IEbExpressDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebExpressDo) Preload(fields ...field.RelationField) IEbExpressDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebExpressDo) FirstOrInit() (*model.EbExpress, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbExpress), nil
	}
}

func (e ebExpressDo) FirstOrCreate() (*model.EbExpress, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbExpress), nil
	}
}

func (e ebExpressDo) FindByPage(offset int, limit int) (result []*model.EbExpress, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebExpressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebExpressDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebExpressDo) Delete(models ...*model.EbExpress) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebExpressDo) withDO(do gen.Dao) *ebExpressDo {
	e.DO = *do.(*gen.DO)
	return e
}
