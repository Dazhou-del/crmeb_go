// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreBargainUser(db *gorm.DB, opts ...gen.DOOption) ebStoreBargainUser {
	_ebStoreBargainUser := ebStoreBargainUser{}

	_ebStoreBargainUser.ebStoreBargainUserDo.UseDB(db, opts...)
	_ebStoreBargainUser.ebStoreBargainUserDo.UseModel(&model.EbStoreBargainUser{})

	tableName := _ebStoreBargainUser.ebStoreBargainUserDo.TableName()
	_ebStoreBargainUser.ALL = field.NewAsterisk(tableName)
	_ebStoreBargainUser.ID = field.NewInt32(tableName, "id")
	_ebStoreBargainUser.UID = field.NewInt32(tableName, "uid")
	_ebStoreBargainUser.BargainID = field.NewInt32(tableName, "bargain_id")
	_ebStoreBargainUser.BargainPriceMin = field.NewFloat64(tableName, "bargain_price_min")
	_ebStoreBargainUser.BargainPrice = field.NewFloat64(tableName, "bargain_price")
	_ebStoreBargainUser.Price = field.NewFloat64(tableName, "price")
	_ebStoreBargainUser.Status = field.NewInt32(tableName, "status")
	_ebStoreBargainUser.AddTime = field.NewInt64(tableName, "add_time")
	_ebStoreBargainUser.IsDel = field.NewBool(tableName, "is_del")

	_ebStoreBargainUser.fillFieldMap()

	return _ebStoreBargainUser
}

// ebStoreBargainUser 用户参与砍价表
type ebStoreBargainUser struct {
	ebStoreBargainUserDo ebStoreBargainUserDo

	ALL             field.Asterisk
	ID              field.Int32   // 用户参与砍价表ID
	UID             field.Int32   // 用户ID
	BargainID       field.Int32   // 砍价商品id
	BargainPriceMin field.Float64 // 砍价的最低价
	BargainPrice    field.Float64 // 砍价金额
	Price           field.Float64 // 砍掉的价格
	Status          field.Int32   // 状态 1参与中 2 活动结束参与失败 3活动结束参与成功
	AddTime         field.Int64   // 参与时间
	IsDel           field.Bool    // 是否取消

	fieldMap map[string]field.Expr
}

func (e ebStoreBargainUser) Table(newTableName string) *ebStoreBargainUser {
	e.ebStoreBargainUserDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreBargainUser) As(alias string) *ebStoreBargainUser {
	e.ebStoreBargainUserDo.DO = *(e.ebStoreBargainUserDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreBargainUser) updateTableName(table string) *ebStoreBargainUser {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.BargainID = field.NewInt32(table, "bargain_id")
	e.BargainPriceMin = field.NewFloat64(table, "bargain_price_min")
	e.BargainPrice = field.NewFloat64(table, "bargain_price")
	e.Price = field.NewFloat64(table, "price")
	e.Status = field.NewInt32(table, "status")
	e.AddTime = field.NewInt64(table, "add_time")
	e.IsDel = field.NewBool(table, "is_del")

	e.fillFieldMap()

	return e
}

func (e *ebStoreBargainUser) WithContext(ctx context.Context) IEbStoreBargainUserDo {
	return e.ebStoreBargainUserDo.WithContext(ctx)
}

func (e ebStoreBargainUser) TableName() string { return e.ebStoreBargainUserDo.TableName() }

func (e ebStoreBargainUser) Alias() string { return e.ebStoreBargainUserDo.Alias() }

func (e ebStoreBargainUser) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreBargainUserDo.Columns(cols...)
}

func (e *ebStoreBargainUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreBargainUser) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["bargain_id"] = e.BargainID
	e.fieldMap["bargain_price_min"] = e.BargainPriceMin
	e.fieldMap["bargain_price"] = e.BargainPrice
	e.fieldMap["price"] = e.Price
	e.fieldMap["status"] = e.Status
	e.fieldMap["add_time"] = e.AddTime
	e.fieldMap["is_del"] = e.IsDel
}

func (e ebStoreBargainUser) clone(db *gorm.DB) ebStoreBargainUser {
	e.ebStoreBargainUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreBargainUser) replaceDB(db *gorm.DB) ebStoreBargainUser {
	e.ebStoreBargainUserDo.ReplaceDB(db)
	return e
}

type ebStoreBargainUserDo struct{ gen.DO }

type IEbStoreBargainUserDo interface {
	gen.SubQuery
	Debug() IEbStoreBargainUserDo
	WithContext(ctx context.Context) IEbStoreBargainUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreBargainUserDo
	WriteDB() IEbStoreBargainUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreBargainUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreBargainUserDo
	Not(conds ...gen.Condition) IEbStoreBargainUserDo
	Or(conds ...gen.Condition) IEbStoreBargainUserDo
	Select(conds ...field.Expr) IEbStoreBargainUserDo
	Where(conds ...gen.Condition) IEbStoreBargainUserDo
	Order(conds ...field.Expr) IEbStoreBargainUserDo
	Distinct(cols ...field.Expr) IEbStoreBargainUserDo
	Omit(cols ...field.Expr) IEbStoreBargainUserDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserDo
	Group(cols ...field.Expr) IEbStoreBargainUserDo
	Having(conds ...gen.Condition) IEbStoreBargainUserDo
	Limit(limit int) IEbStoreBargainUserDo
	Offset(offset int) IEbStoreBargainUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreBargainUserDo
	Unscoped() IEbStoreBargainUserDo
	Create(values ...*model.EbStoreBargainUser) error
	CreateInBatches(values []*model.EbStoreBargainUser, batchSize int) error
	Save(values ...*model.EbStoreBargainUser) error
	First() (*model.EbStoreBargainUser, error)
	Take() (*model.EbStoreBargainUser, error)
	Last() (*model.EbStoreBargainUser, error)
	Find() ([]*model.EbStoreBargainUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreBargainUser, err error)
	FindInBatches(result *[]*model.EbStoreBargainUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreBargainUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreBargainUserDo
	Assign(attrs ...field.AssignExpr) IEbStoreBargainUserDo
	Joins(fields ...field.RelationField) IEbStoreBargainUserDo
	Preload(fields ...field.RelationField) IEbStoreBargainUserDo
	FirstOrInit() (*model.EbStoreBargainUser, error)
	FirstOrCreate() (*model.EbStoreBargainUser, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreBargainUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreBargainUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreBargainUserDo) Debug() IEbStoreBargainUserDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreBargainUserDo) WithContext(ctx context.Context) IEbStoreBargainUserDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreBargainUserDo) ReadDB() IEbStoreBargainUserDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreBargainUserDo) WriteDB() IEbStoreBargainUserDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreBargainUserDo) Session(config *gorm.Session) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreBargainUserDo) Clauses(conds ...clause.Expression) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreBargainUserDo) Returning(value interface{}, columns ...string) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreBargainUserDo) Not(conds ...gen.Condition) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreBargainUserDo) Or(conds ...gen.Condition) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreBargainUserDo) Select(conds ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreBargainUserDo) Where(conds ...gen.Condition) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreBargainUserDo) Order(conds ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreBargainUserDo) Distinct(cols ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreBargainUserDo) Omit(cols ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreBargainUserDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreBargainUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreBargainUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreBargainUserDo) Group(cols ...field.Expr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreBargainUserDo) Having(conds ...gen.Condition) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreBargainUserDo) Limit(limit int) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreBargainUserDo) Offset(offset int) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreBargainUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreBargainUserDo) Unscoped() IEbStoreBargainUserDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreBargainUserDo) Create(values ...*model.EbStoreBargainUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreBargainUserDo) CreateInBatches(values []*model.EbStoreBargainUser, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreBargainUserDo) Save(values ...*model.EbStoreBargainUser) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreBargainUserDo) First() (*model.EbStoreBargainUser, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUser), nil
	}
}

func (e ebStoreBargainUserDo) Take() (*model.EbStoreBargainUser, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUser), nil
	}
}

func (e ebStoreBargainUserDo) Last() (*model.EbStoreBargainUser, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUser), nil
	}
}

func (e ebStoreBargainUserDo) Find() ([]*model.EbStoreBargainUser, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreBargainUser), err
}

func (e ebStoreBargainUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreBargainUser, err error) {
	buf := make([]*model.EbStoreBargainUser, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreBargainUserDo) FindInBatches(result *[]*model.EbStoreBargainUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreBargainUserDo) Attrs(attrs ...field.AssignExpr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreBargainUserDo) Assign(attrs ...field.AssignExpr) IEbStoreBargainUserDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreBargainUserDo) Joins(fields ...field.RelationField) IEbStoreBargainUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreBargainUserDo) Preload(fields ...field.RelationField) IEbStoreBargainUserDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreBargainUserDo) FirstOrInit() (*model.EbStoreBargainUser, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUser), nil
	}
}

func (e ebStoreBargainUserDo) FirstOrCreate() (*model.EbStoreBargainUser, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreBargainUser), nil
	}
}

func (e ebStoreBargainUserDo) FindByPage(offset int, limit int) (result []*model.EbStoreBargainUser, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreBargainUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreBargainUserDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreBargainUserDo) Delete(models ...*model.EbStoreBargainUser) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreBargainUserDo) withDO(do gen.Dao) *ebStoreBargainUserDo {
	e.DO = *do.(*gen.DO)
	return e
}
