// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newStoreProductCoupon(db *gorm.DB, opts ...gen.DOOption) storeProductCoupon {
	_storeProductCoupon := storeProductCoupon{}

	_storeProductCoupon.storeProductCouponDo.UseDB(db, opts...)
	_storeProductCoupon.storeProductCouponDo.UseModel(&model.StoreProductCoupon{})

	tableName := _storeProductCoupon.storeProductCouponDo.TableName()
	_storeProductCoupon.ALL = field.NewAsterisk(tableName)
	_storeProductCoupon.ID = field.NewInt64(tableName, "id")
	_storeProductCoupon.ProductID = field.NewInt64(tableName, "product_id")
	_storeProductCoupon.IssueCouponID = field.NewInt64(tableName, "issue_coupon_id")
	_storeProductCoupon.AddTime = field.NewInt64(tableName, "add_time")
	_storeProductCoupon.CreatedAt = field.NewInt64(tableName, "created_at")
	_storeProductCoupon.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_storeProductCoupon.DeletedAt = field.NewField(tableName, "deleted_at")

	_storeProductCoupon.fillFieldMap()

	return _storeProductCoupon
}

// storeProductCoupon 商品优惠券表
type storeProductCoupon struct {
	storeProductCouponDo storeProductCouponDo

	ALL           field.Asterisk
	ID            field.Int64
	ProductID     field.Int64 // 商品id
	IssueCouponID field.Int64 // 优惠劵id
	AddTime       field.Int64 // 添加时间
	CreatedAt     field.Int64 // 创建时间
	UpdatedAt     field.Int64 // 修改时间
	DeletedAt     field.Field // 是否删除

	fieldMap map[string]field.Expr
}

func (s storeProductCoupon) Table(newTableName string) *storeProductCoupon {
	s.storeProductCouponDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storeProductCoupon) As(alias string) *storeProductCoupon {
	s.storeProductCouponDo.DO = *(s.storeProductCouponDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storeProductCoupon) updateTableName(table string) *storeProductCoupon {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.IssueCouponID = field.NewInt64(table, "issue_coupon_id")
	s.AddTime = field.NewInt64(table, "add_time")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *storeProductCoupon) WithContext(ctx context.Context) IStoreProductCouponDo {
	return s.storeProductCouponDo.WithContext(ctx)
}

func (s storeProductCoupon) TableName() string { return s.storeProductCouponDo.TableName() }

func (s storeProductCoupon) Alias() string { return s.storeProductCouponDo.Alias() }

func (s storeProductCoupon) Columns(cols ...field.Expr) gen.Columns {
	return s.storeProductCouponDo.Columns(cols...)
}

func (s *storeProductCoupon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storeProductCoupon) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["issue_coupon_id"] = s.IssueCouponID
	s.fieldMap["add_time"] = s.AddTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s storeProductCoupon) clone(db *gorm.DB) storeProductCoupon {
	s.storeProductCouponDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storeProductCoupon) replaceDB(db *gorm.DB) storeProductCoupon {
	s.storeProductCouponDo.ReplaceDB(db)
	return s
}

type storeProductCouponDo struct{ gen.DO }

type IStoreProductCouponDo interface {
	gen.SubQuery
	Debug() IStoreProductCouponDo
	WithContext(ctx context.Context) IStoreProductCouponDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreProductCouponDo
	WriteDB() IStoreProductCouponDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreProductCouponDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreProductCouponDo
	Not(conds ...gen.Condition) IStoreProductCouponDo
	Or(conds ...gen.Condition) IStoreProductCouponDo
	Select(conds ...field.Expr) IStoreProductCouponDo
	Where(conds ...gen.Condition) IStoreProductCouponDo
	Order(conds ...field.Expr) IStoreProductCouponDo
	Distinct(cols ...field.Expr) IStoreProductCouponDo
	Omit(cols ...field.Expr) IStoreProductCouponDo
	Join(table schema.Tabler, on ...field.Expr) IStoreProductCouponDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreProductCouponDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreProductCouponDo
	Group(cols ...field.Expr) IStoreProductCouponDo
	Having(conds ...gen.Condition) IStoreProductCouponDo
	Limit(limit int) IStoreProductCouponDo
	Offset(offset int) IStoreProductCouponDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreProductCouponDo
	Unscoped() IStoreProductCouponDo
	Create(values ...*model.StoreProductCoupon) error
	CreateInBatches(values []*model.StoreProductCoupon, batchSize int) error
	Save(values ...*model.StoreProductCoupon) error
	First() (*model.StoreProductCoupon, error)
	Take() (*model.StoreProductCoupon, error)
	Last() (*model.StoreProductCoupon, error)
	Find() ([]*model.StoreProductCoupon, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreProductCoupon, err error)
	FindInBatches(result *[]*model.StoreProductCoupon, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StoreProductCoupon) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreProductCouponDo
	Assign(attrs ...field.AssignExpr) IStoreProductCouponDo
	Joins(fields ...field.RelationField) IStoreProductCouponDo
	Preload(fields ...field.RelationField) IStoreProductCouponDo
	FirstOrInit() (*model.StoreProductCoupon, error)
	FirstOrCreate() (*model.StoreProductCoupon, error)
	FindByPage(offset int, limit int) (result []*model.StoreProductCoupon, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreProductCouponDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeProductCouponDo) Debug() IStoreProductCouponDo {
	return s.withDO(s.DO.Debug())
}

func (s storeProductCouponDo) WithContext(ctx context.Context) IStoreProductCouponDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeProductCouponDo) ReadDB() IStoreProductCouponDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeProductCouponDo) WriteDB() IStoreProductCouponDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeProductCouponDo) Session(config *gorm.Session) IStoreProductCouponDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeProductCouponDo) Clauses(conds ...clause.Expression) IStoreProductCouponDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeProductCouponDo) Returning(value interface{}, columns ...string) IStoreProductCouponDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeProductCouponDo) Not(conds ...gen.Condition) IStoreProductCouponDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeProductCouponDo) Or(conds ...gen.Condition) IStoreProductCouponDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeProductCouponDo) Select(conds ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeProductCouponDo) Where(conds ...gen.Condition) IStoreProductCouponDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeProductCouponDo) Order(conds ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeProductCouponDo) Distinct(cols ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeProductCouponDo) Omit(cols ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeProductCouponDo) Join(table schema.Tabler, on ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeProductCouponDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeProductCouponDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeProductCouponDo) Group(cols ...field.Expr) IStoreProductCouponDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeProductCouponDo) Having(conds ...gen.Condition) IStoreProductCouponDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeProductCouponDo) Limit(limit int) IStoreProductCouponDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeProductCouponDo) Offset(offset int) IStoreProductCouponDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeProductCouponDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreProductCouponDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeProductCouponDo) Unscoped() IStoreProductCouponDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeProductCouponDo) Create(values ...*model.StoreProductCoupon) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeProductCouponDo) CreateInBatches(values []*model.StoreProductCoupon, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeProductCouponDo) Save(values ...*model.StoreProductCoupon) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeProductCouponDo) First() (*model.StoreProductCoupon, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCoupon), nil
	}
}

func (s storeProductCouponDo) Take() (*model.StoreProductCoupon, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCoupon), nil
	}
}

func (s storeProductCouponDo) Last() (*model.StoreProductCoupon, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCoupon), nil
	}
}

func (s storeProductCouponDo) Find() ([]*model.StoreProductCoupon, error) {
	result, err := s.DO.Find()
	return result.([]*model.StoreProductCoupon), err
}

func (s storeProductCouponDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreProductCoupon, err error) {
	buf := make([]*model.StoreProductCoupon, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeProductCouponDo) FindInBatches(result *[]*model.StoreProductCoupon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeProductCouponDo) Attrs(attrs ...field.AssignExpr) IStoreProductCouponDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeProductCouponDo) Assign(attrs ...field.AssignExpr) IStoreProductCouponDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeProductCouponDo) Joins(fields ...field.RelationField) IStoreProductCouponDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeProductCouponDo) Preload(fields ...field.RelationField) IStoreProductCouponDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeProductCouponDo) FirstOrInit() (*model.StoreProductCoupon, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCoupon), nil
	}
}

func (s storeProductCouponDo) FirstOrCreate() (*model.StoreProductCoupon, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCoupon), nil
	}
}

func (s storeProductCouponDo) FindByPage(offset int, limit int) (result []*model.StoreProductCoupon, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeProductCouponDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeProductCouponDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeProductCouponDo) Delete(models ...*model.StoreProductCoupon) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeProductCouponDo) withDO(do gen.Dao) *storeProductCouponDo {
	s.DO = *do.(*gen.DO)
	return s
}
