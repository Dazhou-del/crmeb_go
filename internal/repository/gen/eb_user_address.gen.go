// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserAddress(db *gorm.DB, opts ...gen.DOOption) ebUserAddress {
	_ebUserAddress := ebUserAddress{}

	_ebUserAddress.ebUserAddressDo.UseDB(db, opts...)
	_ebUserAddress.ebUserAddressDo.UseModel(&model.EbUserAddress{})

	tableName := _ebUserAddress.ebUserAddressDo.TableName()
	_ebUserAddress.ALL = field.NewAsterisk(tableName)
	_ebUserAddress.ID = field.NewInt32(tableName, "id")
	_ebUserAddress.UID = field.NewInt32(tableName, "uid")
	_ebUserAddress.RealName = field.NewString(tableName, "real_name")
	_ebUserAddress.Phone = field.NewString(tableName, "phone")
	_ebUserAddress.Province = field.NewString(tableName, "province")
	_ebUserAddress.City = field.NewString(tableName, "city")
	_ebUserAddress.CityID = field.NewInt32(tableName, "city_id")
	_ebUserAddress.District = field.NewString(tableName, "district")
	_ebUserAddress.Detail = field.NewString(tableName, "detail")
	_ebUserAddress.PostCode = field.NewInt32(tableName, "post_code")
	_ebUserAddress.Longitude = field.NewString(tableName, "longitude")
	_ebUserAddress.Latitude = field.NewString(tableName, "latitude")
	_ebUserAddress.IsDefault = field.NewInt32(tableName, "is_default")
	_ebUserAddress.IsDel = field.NewInt32(tableName, "is_del")
	_ebUserAddress.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserAddress.UpdateTime = field.NewTime(tableName, "update_time")

	_ebUserAddress.fillFieldMap()

	return _ebUserAddress
}

// ebUserAddress 用户地址表
type ebUserAddress struct {
	ebUserAddressDo ebUserAddressDo

	ALL        field.Asterisk
	ID         field.Int32  // 用户地址id
	UID        field.Int32  // 用户id
	RealName   field.String // 收货人姓名
	Phone      field.String // 收货人电话
	Province   field.String // 收货人所在省
	City       field.String // 收货人所在市
	CityID     field.Int32  // 城市id
	District   field.String // 收货人所在区
	Detail     field.String // 收货人详细地址
	PostCode   field.Int32  // 邮编
	Longitude  field.String // 经度
	Latitude   field.String // 纬度
	IsDefault  field.Int32  // 是否默认
	IsDel      field.Int32  // 是否删除
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebUserAddress) Table(newTableName string) *ebUserAddress {
	e.ebUserAddressDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserAddress) As(alias string) *ebUserAddress {
	e.ebUserAddressDo.DO = *(e.ebUserAddressDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserAddress) updateTableName(table string) *ebUserAddress {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.RealName = field.NewString(table, "real_name")
	e.Phone = field.NewString(table, "phone")
	e.Province = field.NewString(table, "province")
	e.City = field.NewString(table, "city")
	e.CityID = field.NewInt32(table, "city_id")
	e.District = field.NewString(table, "district")
	e.Detail = field.NewString(table, "detail")
	e.PostCode = field.NewInt32(table, "post_code")
	e.Longitude = field.NewString(table, "longitude")
	e.Latitude = field.NewString(table, "latitude")
	e.IsDefault = field.NewInt32(table, "is_default")
	e.IsDel = field.NewInt32(table, "is_del")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebUserAddress) WithContext(ctx context.Context) IEbUserAddressDo {
	return e.ebUserAddressDo.WithContext(ctx)
}

func (e ebUserAddress) TableName() string { return e.ebUserAddressDo.TableName() }

func (e ebUserAddress) Alias() string { return e.ebUserAddressDo.Alias() }

func (e ebUserAddress) Columns(cols ...field.Expr) gen.Columns {
	return e.ebUserAddressDo.Columns(cols...)
}

func (e *ebUserAddress) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserAddress) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 16)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["real_name"] = e.RealName
	e.fieldMap["phone"] = e.Phone
	e.fieldMap["province"] = e.Province
	e.fieldMap["city"] = e.City
	e.fieldMap["city_id"] = e.CityID
	e.fieldMap["district"] = e.District
	e.fieldMap["detail"] = e.Detail
	e.fieldMap["post_code"] = e.PostCode
	e.fieldMap["longitude"] = e.Longitude
	e.fieldMap["latitude"] = e.Latitude
	e.fieldMap["is_default"] = e.IsDefault
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebUserAddress) clone(db *gorm.DB) ebUserAddress {
	e.ebUserAddressDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserAddress) replaceDB(db *gorm.DB) ebUserAddress {
	e.ebUserAddressDo.ReplaceDB(db)
	return e
}

type ebUserAddressDo struct{ gen.DO }

type IEbUserAddressDo interface {
	gen.SubQuery
	Debug() IEbUserAddressDo
	WithContext(ctx context.Context) IEbUserAddressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserAddressDo
	WriteDB() IEbUserAddressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserAddressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserAddressDo
	Not(conds ...gen.Condition) IEbUserAddressDo
	Or(conds ...gen.Condition) IEbUserAddressDo
	Select(conds ...field.Expr) IEbUserAddressDo
	Where(conds ...gen.Condition) IEbUserAddressDo
	Order(conds ...field.Expr) IEbUserAddressDo
	Distinct(cols ...field.Expr) IEbUserAddressDo
	Omit(cols ...field.Expr) IEbUserAddressDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserAddressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserAddressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserAddressDo
	Group(cols ...field.Expr) IEbUserAddressDo
	Having(conds ...gen.Condition) IEbUserAddressDo
	Limit(limit int) IEbUserAddressDo
	Offset(offset int) IEbUserAddressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserAddressDo
	Unscoped() IEbUserAddressDo
	Create(values ...*model.EbUserAddress) error
	CreateInBatches(values []*model.EbUserAddress, batchSize int) error
	Save(values ...*model.EbUserAddress) error
	First() (*model.EbUserAddress, error)
	Take() (*model.EbUserAddress, error)
	Last() (*model.EbUserAddress, error)
	Find() ([]*model.EbUserAddress, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserAddress, err error)
	FindInBatches(result *[]*model.EbUserAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserAddress) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserAddressDo
	Assign(attrs ...field.AssignExpr) IEbUserAddressDo
	Joins(fields ...field.RelationField) IEbUserAddressDo
	Preload(fields ...field.RelationField) IEbUserAddressDo
	FirstOrInit() (*model.EbUserAddress, error)
	FirstOrCreate() (*model.EbUserAddress, error)
	FindByPage(offset int, limit int) (result []*model.EbUserAddress, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserAddressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserAddressDo) Debug() IEbUserAddressDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserAddressDo) WithContext(ctx context.Context) IEbUserAddressDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserAddressDo) ReadDB() IEbUserAddressDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserAddressDo) WriteDB() IEbUserAddressDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserAddressDo) Session(config *gorm.Session) IEbUserAddressDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserAddressDo) Clauses(conds ...clause.Expression) IEbUserAddressDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserAddressDo) Returning(value interface{}, columns ...string) IEbUserAddressDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserAddressDo) Not(conds ...gen.Condition) IEbUserAddressDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserAddressDo) Or(conds ...gen.Condition) IEbUserAddressDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserAddressDo) Select(conds ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserAddressDo) Where(conds ...gen.Condition) IEbUserAddressDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserAddressDo) Order(conds ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserAddressDo) Distinct(cols ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserAddressDo) Omit(cols ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserAddressDo) Join(table schema.Tabler, on ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserAddressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserAddressDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserAddressDo) Group(cols ...field.Expr) IEbUserAddressDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserAddressDo) Having(conds ...gen.Condition) IEbUserAddressDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserAddressDo) Limit(limit int) IEbUserAddressDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserAddressDo) Offset(offset int) IEbUserAddressDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserAddressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserAddressDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserAddressDo) Unscoped() IEbUserAddressDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserAddressDo) Create(values ...*model.EbUserAddress) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserAddressDo) CreateInBatches(values []*model.EbUserAddress, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserAddressDo) Save(values ...*model.EbUserAddress) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserAddressDo) First() (*model.EbUserAddress, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserAddress), nil
	}
}

func (e ebUserAddressDo) Take() (*model.EbUserAddress, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserAddress), nil
	}
}

func (e ebUserAddressDo) Last() (*model.EbUserAddress, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserAddress), nil
	}
}

func (e ebUserAddressDo) Find() ([]*model.EbUserAddress, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserAddress), err
}

func (e ebUserAddressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserAddress, err error) {
	buf := make([]*model.EbUserAddress, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserAddressDo) FindInBatches(result *[]*model.EbUserAddress, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserAddressDo) Attrs(attrs ...field.AssignExpr) IEbUserAddressDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserAddressDo) Assign(attrs ...field.AssignExpr) IEbUserAddressDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserAddressDo) Joins(fields ...field.RelationField) IEbUserAddressDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserAddressDo) Preload(fields ...field.RelationField) IEbUserAddressDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserAddressDo) FirstOrInit() (*model.EbUserAddress, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserAddress), nil
	}
}

func (e ebUserAddressDo) FirstOrCreate() (*model.EbUserAddress, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserAddress), nil
	}
}

func (e ebUserAddressDo) FindByPage(offset int, limit int) (result []*model.EbUserAddress, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserAddressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserAddressDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserAddressDo) Delete(models ...*model.EbUserAddress) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserAddressDo) withDO(do gen.Dao) *ebUserAddressDo {
	e.DO = *do.(*gen.DO)
	return e
}
