// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreCoupon(db *gorm.DB, opts ...gen.DOOption) ebStoreCoupon {
	_ebStoreCoupon := ebStoreCoupon{}

	_ebStoreCoupon.ebStoreCouponDo.UseDB(db, opts...)
	_ebStoreCoupon.ebStoreCouponDo.UseModel(&model.EbStoreCoupon{})

	tableName := _ebStoreCoupon.ebStoreCouponDo.TableName()
	_ebStoreCoupon.ALL = field.NewAsterisk(tableName)
	_ebStoreCoupon.ID = field.NewInt32(tableName, "id")
	_ebStoreCoupon.Name = field.NewString(tableName, "name")
	_ebStoreCoupon.Money = field.NewFloat64(tableName, "money")
	_ebStoreCoupon.IsLimited = field.NewBool(tableName, "is_limited")
	_ebStoreCoupon.Total = field.NewInt32(tableName, "total")
	_ebStoreCoupon.LastTotal = field.NewInt32(tableName, "last_total")
	_ebStoreCoupon.UseType = field.NewInt32(tableName, "use_type")
	_ebStoreCoupon.PrimaryKey = field.NewString(tableName, "primary_key")
	_ebStoreCoupon.MinPrice = field.NewFloat64(tableName, "min_price")
	_ebStoreCoupon.ReceiveStartTime = field.NewTime(tableName, "receive_start_time")
	_ebStoreCoupon.ReceiveEndTime = field.NewTime(tableName, "receive_end_time")
	_ebStoreCoupon.IsFixedTime = field.NewBool(tableName, "is_fixed_time")
	_ebStoreCoupon.UseStartTime = field.NewTime(tableName, "use_start_time")
	_ebStoreCoupon.UseEndTime = field.NewTime(tableName, "use_end_time")
	_ebStoreCoupon.Day = field.NewInt32(tableName, "day")
	_ebStoreCoupon.Type = field.NewInt32(tableName, "type")
	_ebStoreCoupon.Sort = field.NewInt32(tableName, "sort")
	_ebStoreCoupon.Status = field.NewInt32(tableName, "status")
	_ebStoreCoupon.IsDel = field.NewInt32(tableName, "is_del")
	_ebStoreCoupon.CreateTime = field.NewTime(tableName, "create_time")
	_ebStoreCoupon.UpdateTime = field.NewTime(tableName, "update_time")

	_ebStoreCoupon.fillFieldMap()

	return _ebStoreCoupon
}

// ebStoreCoupon 优惠券表
type ebStoreCoupon struct {
	ebStoreCouponDo ebStoreCouponDo

	ALL              field.Asterisk
	ID               field.Int32   // 优惠券表ID
	Name             field.String  // 优惠券名称
	Money            field.Float64 // 兑换的优惠券面值
	IsLimited        field.Bool    // 是否限量, 默认0 不限量， 1限量
	Total            field.Int32   // 发放总数
	LastTotal        field.Int32   // 剩余数量
	UseType          field.Int32   // 使用类型 1 全场通用, 2 商品券, 3 品类券
	PrimaryKey       field.String  // 所属商品id / 分类id
	MinPrice         field.Float64 // 最低消费，0代表不限制
	ReceiveStartTime field.Time    // 可领取开始时间
	ReceiveEndTime   field.Time    // 可领取结束时间
	IsFixedTime      field.Bool    // 是否固定使用时间, 默认0 否， 1是
	UseStartTime     field.Time    // 可使用时间范围 开始时间
	UseEndTime       field.Time    // 可使用时间范围 结束时间
	Day              field.Int32   // 天数
	Type             field.Int32   // 优惠券类型 1 手动领取, 2 新人券, 3 赠送券
	Sort             field.Int32   // 排序
	Status           field.Int32   // 状态（0：关闭，1：开启）
	IsDel            field.Int32   // 是否删除 状态（0：否，1：是）
	CreateTime       field.Time    // 创建时间
	UpdateTime       field.Time    // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebStoreCoupon) Table(newTableName string) *ebStoreCoupon {
	e.ebStoreCouponDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreCoupon) As(alias string) *ebStoreCoupon {
	e.ebStoreCouponDo.DO = *(e.ebStoreCouponDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreCoupon) updateTableName(table string) *ebStoreCoupon {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.Money = field.NewFloat64(table, "money")
	e.IsLimited = field.NewBool(table, "is_limited")
	e.Total = field.NewInt32(table, "total")
	e.LastTotal = field.NewInt32(table, "last_total")
	e.UseType = field.NewInt32(table, "use_type")
	e.PrimaryKey = field.NewString(table, "primary_key")
	e.MinPrice = field.NewFloat64(table, "min_price")
	e.ReceiveStartTime = field.NewTime(table, "receive_start_time")
	e.ReceiveEndTime = field.NewTime(table, "receive_end_time")
	e.IsFixedTime = field.NewBool(table, "is_fixed_time")
	e.UseStartTime = field.NewTime(table, "use_start_time")
	e.UseEndTime = field.NewTime(table, "use_end_time")
	e.Day = field.NewInt32(table, "day")
	e.Type = field.NewInt32(table, "type")
	e.Sort = field.NewInt32(table, "sort")
	e.Status = field.NewInt32(table, "status")
	e.IsDel = field.NewInt32(table, "is_del")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebStoreCoupon) WithContext(ctx context.Context) IEbStoreCouponDo {
	return e.ebStoreCouponDo.WithContext(ctx)
}

func (e ebStoreCoupon) TableName() string { return e.ebStoreCouponDo.TableName() }

func (e ebStoreCoupon) Alias() string { return e.ebStoreCouponDo.Alias() }

func (e ebStoreCoupon) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreCouponDo.Columns(cols...)
}

func (e *ebStoreCoupon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreCoupon) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 21)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["money"] = e.Money
	e.fieldMap["is_limited"] = e.IsLimited
	e.fieldMap["total"] = e.Total
	e.fieldMap["last_total"] = e.LastTotal
	e.fieldMap["use_type"] = e.UseType
	e.fieldMap["primary_key"] = e.PrimaryKey
	e.fieldMap["min_price"] = e.MinPrice
	e.fieldMap["receive_start_time"] = e.ReceiveStartTime
	e.fieldMap["receive_end_time"] = e.ReceiveEndTime
	e.fieldMap["is_fixed_time"] = e.IsFixedTime
	e.fieldMap["use_start_time"] = e.UseStartTime
	e.fieldMap["use_end_time"] = e.UseEndTime
	e.fieldMap["day"] = e.Day
	e.fieldMap["type"] = e.Type
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["status"] = e.Status
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebStoreCoupon) clone(db *gorm.DB) ebStoreCoupon {
	e.ebStoreCouponDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreCoupon) replaceDB(db *gorm.DB) ebStoreCoupon {
	e.ebStoreCouponDo.ReplaceDB(db)
	return e
}

type ebStoreCouponDo struct{ gen.DO }

type IEbStoreCouponDo interface {
	gen.SubQuery
	Debug() IEbStoreCouponDo
	WithContext(ctx context.Context) IEbStoreCouponDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreCouponDo
	WriteDB() IEbStoreCouponDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreCouponDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreCouponDo
	Not(conds ...gen.Condition) IEbStoreCouponDo
	Or(conds ...gen.Condition) IEbStoreCouponDo
	Select(conds ...field.Expr) IEbStoreCouponDo
	Where(conds ...gen.Condition) IEbStoreCouponDo
	Order(conds ...field.Expr) IEbStoreCouponDo
	Distinct(cols ...field.Expr) IEbStoreCouponDo
	Omit(cols ...field.Expr) IEbStoreCouponDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreCouponDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreCouponDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreCouponDo
	Group(cols ...field.Expr) IEbStoreCouponDo
	Having(conds ...gen.Condition) IEbStoreCouponDo
	Limit(limit int) IEbStoreCouponDo
	Offset(offset int) IEbStoreCouponDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreCouponDo
	Unscoped() IEbStoreCouponDo
	Create(values ...*model.EbStoreCoupon) error
	CreateInBatches(values []*model.EbStoreCoupon, batchSize int) error
	Save(values ...*model.EbStoreCoupon) error
	First() (*model.EbStoreCoupon, error)
	Take() (*model.EbStoreCoupon, error)
	Last() (*model.EbStoreCoupon, error)
	Find() ([]*model.EbStoreCoupon, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreCoupon, err error)
	FindInBatches(result *[]*model.EbStoreCoupon, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreCoupon) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreCouponDo
	Assign(attrs ...field.AssignExpr) IEbStoreCouponDo
	Joins(fields ...field.RelationField) IEbStoreCouponDo
	Preload(fields ...field.RelationField) IEbStoreCouponDo
	FirstOrInit() (*model.EbStoreCoupon, error)
	FirstOrCreate() (*model.EbStoreCoupon, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreCoupon, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreCouponDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreCouponDo) Debug() IEbStoreCouponDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreCouponDo) WithContext(ctx context.Context) IEbStoreCouponDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreCouponDo) ReadDB() IEbStoreCouponDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreCouponDo) WriteDB() IEbStoreCouponDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreCouponDo) Session(config *gorm.Session) IEbStoreCouponDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreCouponDo) Clauses(conds ...clause.Expression) IEbStoreCouponDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreCouponDo) Returning(value interface{}, columns ...string) IEbStoreCouponDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreCouponDo) Not(conds ...gen.Condition) IEbStoreCouponDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreCouponDo) Or(conds ...gen.Condition) IEbStoreCouponDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreCouponDo) Select(conds ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreCouponDo) Where(conds ...gen.Condition) IEbStoreCouponDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreCouponDo) Order(conds ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreCouponDo) Distinct(cols ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreCouponDo) Omit(cols ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreCouponDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreCouponDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreCouponDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreCouponDo) Group(cols ...field.Expr) IEbStoreCouponDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreCouponDo) Having(conds ...gen.Condition) IEbStoreCouponDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreCouponDo) Limit(limit int) IEbStoreCouponDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreCouponDo) Offset(offset int) IEbStoreCouponDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreCouponDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreCouponDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreCouponDo) Unscoped() IEbStoreCouponDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreCouponDo) Create(values ...*model.EbStoreCoupon) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreCouponDo) CreateInBatches(values []*model.EbStoreCoupon, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreCouponDo) Save(values ...*model.EbStoreCoupon) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreCouponDo) First() (*model.EbStoreCoupon, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreCoupon), nil
	}
}

func (e ebStoreCouponDo) Take() (*model.EbStoreCoupon, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreCoupon), nil
	}
}

func (e ebStoreCouponDo) Last() (*model.EbStoreCoupon, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreCoupon), nil
	}
}

func (e ebStoreCouponDo) Find() ([]*model.EbStoreCoupon, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreCoupon), err
}

func (e ebStoreCouponDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreCoupon, err error) {
	buf := make([]*model.EbStoreCoupon, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreCouponDo) FindInBatches(result *[]*model.EbStoreCoupon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreCouponDo) Attrs(attrs ...field.AssignExpr) IEbStoreCouponDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreCouponDo) Assign(attrs ...field.AssignExpr) IEbStoreCouponDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreCouponDo) Joins(fields ...field.RelationField) IEbStoreCouponDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreCouponDo) Preload(fields ...field.RelationField) IEbStoreCouponDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreCouponDo) FirstOrInit() (*model.EbStoreCoupon, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreCoupon), nil
	}
}

func (e ebStoreCouponDo) FirstOrCreate() (*model.EbStoreCoupon, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreCoupon), nil
	}
}

func (e ebStoreCouponDo) FindByPage(offset int, limit int) (result []*model.EbStoreCoupon, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreCouponDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreCouponDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreCouponDo) Delete(models ...*model.EbStoreCoupon) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreCouponDo) withDO(do gen.Dao) *ebStoreCouponDo {
	e.DO = *do.(*gen.DO)
	return e
}
