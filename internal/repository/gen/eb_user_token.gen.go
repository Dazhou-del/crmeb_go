// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserToken(db *gorm.DB, opts ...gen.DOOption) ebUserToken {
	_ebUserToken := ebUserToken{}

	_ebUserToken.ebUserTokenDo.UseDB(db, opts...)
	_ebUserToken.ebUserTokenDo.UseModel(&model.EbUserToken{})

	tableName := _ebUserToken.ebUserTokenDo.TableName()
	_ebUserToken.ALL = field.NewAsterisk(tableName)
	_ebUserToken.ID = field.NewInt32(tableName, "id")
	_ebUserToken.UID = field.NewInt32(tableName, "uid")
	_ebUserToken.Token = field.NewString(tableName, "token")
	_ebUserToken.Type = field.NewBool(tableName, "type")
	_ebUserToken.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserToken.ExpiresTime = field.NewTime(tableName, "expires_time")
	_ebUserToken.LoginIP = field.NewString(tableName, "login_ip")

	_ebUserToken.fillFieldMap()

	return _ebUserToken
}

type ebUserToken struct {
	ebUserTokenDo ebUserTokenDo

	ALL         field.Asterisk
	ID          field.Int32
	UID         field.Int32  // 用户 id
	Token       field.String // token
	Type        field.Bool   // 类型，1 公众号， 2 小程序, 3 unionid, 5AppIos,6AppAndroid,7ios
	CreateTime  field.Time   // 创建时间
	ExpiresTime field.Time   // 到期时间
	LoginIP     field.String // 登录ip

	fieldMap map[string]field.Expr
}

func (e ebUserToken) Table(newTableName string) *ebUserToken {
	e.ebUserTokenDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserToken) As(alias string) *ebUserToken {
	e.ebUserTokenDo.DO = *(e.ebUserTokenDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserToken) updateTableName(table string) *ebUserToken {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.Token = field.NewString(table, "token")
	e.Type = field.NewBool(table, "type")
	e.CreateTime = field.NewTime(table, "create_time")
	e.ExpiresTime = field.NewTime(table, "expires_time")
	e.LoginIP = field.NewString(table, "login_ip")

	e.fillFieldMap()

	return e
}

func (e *ebUserToken) WithContext(ctx context.Context) IEbUserTokenDo {
	return e.ebUserTokenDo.WithContext(ctx)
}

func (e ebUserToken) TableName() string { return e.ebUserTokenDo.TableName() }

func (e ebUserToken) Alias() string { return e.ebUserTokenDo.Alias() }

func (e ebUserToken) Columns(cols ...field.Expr) gen.Columns { return e.ebUserTokenDo.Columns(cols...) }

func (e *ebUserToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserToken) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["token"] = e.Token
	e.fieldMap["type"] = e.Type
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["expires_time"] = e.ExpiresTime
	e.fieldMap["login_ip"] = e.LoginIP
}

func (e ebUserToken) clone(db *gorm.DB) ebUserToken {
	e.ebUserTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserToken) replaceDB(db *gorm.DB) ebUserToken {
	e.ebUserTokenDo.ReplaceDB(db)
	return e
}

type ebUserTokenDo struct{ gen.DO }

type IEbUserTokenDo interface {
	gen.SubQuery
	Debug() IEbUserTokenDo
	WithContext(ctx context.Context) IEbUserTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserTokenDo
	WriteDB() IEbUserTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserTokenDo
	Not(conds ...gen.Condition) IEbUserTokenDo
	Or(conds ...gen.Condition) IEbUserTokenDo
	Select(conds ...field.Expr) IEbUserTokenDo
	Where(conds ...gen.Condition) IEbUserTokenDo
	Order(conds ...field.Expr) IEbUserTokenDo
	Distinct(cols ...field.Expr) IEbUserTokenDo
	Omit(cols ...field.Expr) IEbUserTokenDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserTokenDo
	Group(cols ...field.Expr) IEbUserTokenDo
	Having(conds ...gen.Condition) IEbUserTokenDo
	Limit(limit int) IEbUserTokenDo
	Offset(offset int) IEbUserTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserTokenDo
	Unscoped() IEbUserTokenDo
	Create(values ...*model.EbUserToken) error
	CreateInBatches(values []*model.EbUserToken, batchSize int) error
	Save(values ...*model.EbUserToken) error
	First() (*model.EbUserToken, error)
	Take() (*model.EbUserToken, error)
	Last() (*model.EbUserToken, error)
	Find() ([]*model.EbUserToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserToken, err error)
	FindInBatches(result *[]*model.EbUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserTokenDo
	Assign(attrs ...field.AssignExpr) IEbUserTokenDo
	Joins(fields ...field.RelationField) IEbUserTokenDo
	Preload(fields ...field.RelationField) IEbUserTokenDo
	FirstOrInit() (*model.EbUserToken, error)
	FirstOrCreate() (*model.EbUserToken, error)
	FindByPage(offset int, limit int) (result []*model.EbUserToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserTokenDo) Debug() IEbUserTokenDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserTokenDo) WithContext(ctx context.Context) IEbUserTokenDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserTokenDo) ReadDB() IEbUserTokenDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserTokenDo) WriteDB() IEbUserTokenDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserTokenDo) Session(config *gorm.Session) IEbUserTokenDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserTokenDo) Clauses(conds ...clause.Expression) IEbUserTokenDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserTokenDo) Returning(value interface{}, columns ...string) IEbUserTokenDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserTokenDo) Not(conds ...gen.Condition) IEbUserTokenDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserTokenDo) Or(conds ...gen.Condition) IEbUserTokenDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserTokenDo) Select(conds ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserTokenDo) Where(conds ...gen.Condition) IEbUserTokenDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserTokenDo) Order(conds ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserTokenDo) Distinct(cols ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserTokenDo) Omit(cols ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserTokenDo) Join(table schema.Tabler, on ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserTokenDo) Group(cols ...field.Expr) IEbUserTokenDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserTokenDo) Having(conds ...gen.Condition) IEbUserTokenDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserTokenDo) Limit(limit int) IEbUserTokenDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserTokenDo) Offset(offset int) IEbUserTokenDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserTokenDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserTokenDo) Unscoped() IEbUserTokenDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserTokenDo) Create(values ...*model.EbUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserTokenDo) CreateInBatches(values []*model.EbUserToken, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserTokenDo) Save(values ...*model.EbUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserTokenDo) First() (*model.EbUserToken, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserToken), nil
	}
}

func (e ebUserTokenDo) Take() (*model.EbUserToken, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserToken), nil
	}
}

func (e ebUserTokenDo) Last() (*model.EbUserToken, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserToken), nil
	}
}

func (e ebUserTokenDo) Find() ([]*model.EbUserToken, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserToken), err
}

func (e ebUserTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserToken, err error) {
	buf := make([]*model.EbUserToken, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserTokenDo) FindInBatches(result *[]*model.EbUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserTokenDo) Attrs(attrs ...field.AssignExpr) IEbUserTokenDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserTokenDo) Assign(attrs ...field.AssignExpr) IEbUserTokenDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserTokenDo) Joins(fields ...field.RelationField) IEbUserTokenDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserTokenDo) Preload(fields ...field.RelationField) IEbUserTokenDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserTokenDo) FirstOrInit() (*model.EbUserToken, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserToken), nil
	}
}

func (e ebUserTokenDo) FirstOrCreate() (*model.EbUserToken, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserToken), nil
	}
}

func (e ebUserTokenDo) FindByPage(offset int, limit int) (result []*model.EbUserToken, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserTokenDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserTokenDo) Delete(models ...*model.EbUserToken) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserTokenDo) withDO(do gen.Dao) *ebUserTokenDo {
	e.DO = *do.(*gen.DO)
	return e
}
