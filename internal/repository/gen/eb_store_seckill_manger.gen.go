// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreSeckillManger(db *gorm.DB, opts ...gen.DOOption) ebStoreSeckillManger {
	_ebStoreSeckillManger := ebStoreSeckillManger{}

	_ebStoreSeckillManger.ebStoreSeckillMangerDo.UseDB(db, opts...)
	_ebStoreSeckillManger.ebStoreSeckillMangerDo.UseModel(&model.EbStoreSeckillManger{})

	tableName := _ebStoreSeckillManger.ebStoreSeckillMangerDo.TableName()
	_ebStoreSeckillManger.ALL = field.NewAsterisk(tableName)
	_ebStoreSeckillManger.ID = field.NewInt32(tableName, "id")
	_ebStoreSeckillManger.Name = field.NewString(tableName, "name")
	_ebStoreSeckillManger.StartTime = field.NewInt32(tableName, "start_time")
	_ebStoreSeckillManger.EndTime = field.NewInt32(tableName, "end_time")
	_ebStoreSeckillManger.Img = field.NewString(tableName, "img")
	_ebStoreSeckillManger.SilderImgs = field.NewString(tableName, "silder_imgs")
	_ebStoreSeckillManger.Sort = field.NewInt32(tableName, "sort")
	_ebStoreSeckillManger.Status = field.NewInt32(tableName, "status")
	_ebStoreSeckillManger.CreateTime = field.NewTime(tableName, "create_time")
	_ebStoreSeckillManger.UpdateTime = field.NewTime(tableName, "update_time")
	_ebStoreSeckillManger.IsDel = field.NewInt32(tableName, "is_del")

	_ebStoreSeckillManger.fillFieldMap()

	return _ebStoreSeckillManger
}

type ebStoreSeckillManger struct {
	ebStoreSeckillMangerDo ebStoreSeckillMangerDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String // 秒杀名称
	StartTime  field.Int32  // 秒杀开始时间段
	EndTime    field.Int32  // 秒杀结束时间段
	Img        field.String // 主图
	SilderImgs field.String // 轮播图
	Sort       field.Int32  // 排序
	Status     field.Int32  // 状态 0=关闭 1=开启
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间
	IsDel      field.Int32  // 删除标记 0=为删除 1=删除

	fieldMap map[string]field.Expr
}

func (e ebStoreSeckillManger) Table(newTableName string) *ebStoreSeckillManger {
	e.ebStoreSeckillMangerDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreSeckillManger) As(alias string) *ebStoreSeckillManger {
	e.ebStoreSeckillMangerDo.DO = *(e.ebStoreSeckillMangerDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreSeckillManger) updateTableName(table string) *ebStoreSeckillManger {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Name = field.NewString(table, "name")
	e.StartTime = field.NewInt32(table, "start_time")
	e.EndTime = field.NewInt32(table, "end_time")
	e.Img = field.NewString(table, "img")
	e.SilderImgs = field.NewString(table, "silder_imgs")
	e.Sort = field.NewInt32(table, "sort")
	e.Status = field.NewInt32(table, "status")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.IsDel = field.NewInt32(table, "is_del")

	e.fillFieldMap()

	return e
}

func (e *ebStoreSeckillManger) WithContext(ctx context.Context) IEbStoreSeckillMangerDo {
	return e.ebStoreSeckillMangerDo.WithContext(ctx)
}

func (e ebStoreSeckillManger) TableName() string { return e.ebStoreSeckillMangerDo.TableName() }

func (e ebStoreSeckillManger) Alias() string { return e.ebStoreSeckillMangerDo.Alias() }

func (e ebStoreSeckillManger) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreSeckillMangerDo.Columns(cols...)
}

func (e *ebStoreSeckillManger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreSeckillManger) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["name"] = e.Name
	e.fieldMap["start_time"] = e.StartTime
	e.fieldMap["end_time"] = e.EndTime
	e.fieldMap["img"] = e.Img
	e.fieldMap["silder_imgs"] = e.SilderImgs
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["status"] = e.Status
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["is_del"] = e.IsDel
}

func (e ebStoreSeckillManger) clone(db *gorm.DB) ebStoreSeckillManger {
	e.ebStoreSeckillMangerDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreSeckillManger) replaceDB(db *gorm.DB) ebStoreSeckillManger {
	e.ebStoreSeckillMangerDo.ReplaceDB(db)
	return e
}

type ebStoreSeckillMangerDo struct{ gen.DO }

type IEbStoreSeckillMangerDo interface {
	gen.SubQuery
	Debug() IEbStoreSeckillMangerDo
	WithContext(ctx context.Context) IEbStoreSeckillMangerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreSeckillMangerDo
	WriteDB() IEbStoreSeckillMangerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreSeckillMangerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreSeckillMangerDo
	Not(conds ...gen.Condition) IEbStoreSeckillMangerDo
	Or(conds ...gen.Condition) IEbStoreSeckillMangerDo
	Select(conds ...field.Expr) IEbStoreSeckillMangerDo
	Where(conds ...gen.Condition) IEbStoreSeckillMangerDo
	Order(conds ...field.Expr) IEbStoreSeckillMangerDo
	Distinct(cols ...field.Expr) IEbStoreSeckillMangerDo
	Omit(cols ...field.Expr) IEbStoreSeckillMangerDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreSeckillMangerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreSeckillMangerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreSeckillMangerDo
	Group(cols ...field.Expr) IEbStoreSeckillMangerDo
	Having(conds ...gen.Condition) IEbStoreSeckillMangerDo
	Limit(limit int) IEbStoreSeckillMangerDo
	Offset(offset int) IEbStoreSeckillMangerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreSeckillMangerDo
	Unscoped() IEbStoreSeckillMangerDo
	Create(values ...*model.EbStoreSeckillManger) error
	CreateInBatches(values []*model.EbStoreSeckillManger, batchSize int) error
	Save(values ...*model.EbStoreSeckillManger) error
	First() (*model.EbStoreSeckillManger, error)
	Take() (*model.EbStoreSeckillManger, error)
	Last() (*model.EbStoreSeckillManger, error)
	Find() ([]*model.EbStoreSeckillManger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreSeckillManger, err error)
	FindInBatches(result *[]*model.EbStoreSeckillManger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreSeckillManger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreSeckillMangerDo
	Assign(attrs ...field.AssignExpr) IEbStoreSeckillMangerDo
	Joins(fields ...field.RelationField) IEbStoreSeckillMangerDo
	Preload(fields ...field.RelationField) IEbStoreSeckillMangerDo
	FirstOrInit() (*model.EbStoreSeckillManger, error)
	FirstOrCreate() (*model.EbStoreSeckillManger, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreSeckillManger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreSeckillMangerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreSeckillMangerDo) Debug() IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreSeckillMangerDo) WithContext(ctx context.Context) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreSeckillMangerDo) ReadDB() IEbStoreSeckillMangerDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreSeckillMangerDo) WriteDB() IEbStoreSeckillMangerDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreSeckillMangerDo) Session(config *gorm.Session) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreSeckillMangerDo) Clauses(conds ...clause.Expression) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreSeckillMangerDo) Returning(value interface{}, columns ...string) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreSeckillMangerDo) Not(conds ...gen.Condition) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreSeckillMangerDo) Or(conds ...gen.Condition) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreSeckillMangerDo) Select(conds ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreSeckillMangerDo) Where(conds ...gen.Condition) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreSeckillMangerDo) Order(conds ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreSeckillMangerDo) Distinct(cols ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreSeckillMangerDo) Omit(cols ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreSeckillMangerDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreSeckillMangerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreSeckillMangerDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreSeckillMangerDo) Group(cols ...field.Expr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreSeckillMangerDo) Having(conds ...gen.Condition) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreSeckillMangerDo) Limit(limit int) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreSeckillMangerDo) Offset(offset int) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreSeckillMangerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreSeckillMangerDo) Unscoped() IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreSeckillMangerDo) Create(values ...*model.EbStoreSeckillManger) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreSeckillMangerDo) CreateInBatches(values []*model.EbStoreSeckillManger, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreSeckillMangerDo) Save(values ...*model.EbStoreSeckillManger) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreSeckillMangerDo) First() (*model.EbStoreSeckillManger, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreSeckillManger), nil
	}
}

func (e ebStoreSeckillMangerDo) Take() (*model.EbStoreSeckillManger, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreSeckillManger), nil
	}
}

func (e ebStoreSeckillMangerDo) Last() (*model.EbStoreSeckillManger, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreSeckillManger), nil
	}
}

func (e ebStoreSeckillMangerDo) Find() ([]*model.EbStoreSeckillManger, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreSeckillManger), err
}

func (e ebStoreSeckillMangerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreSeckillManger, err error) {
	buf := make([]*model.EbStoreSeckillManger, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreSeckillMangerDo) FindInBatches(result *[]*model.EbStoreSeckillManger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreSeckillMangerDo) Attrs(attrs ...field.AssignExpr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreSeckillMangerDo) Assign(attrs ...field.AssignExpr) IEbStoreSeckillMangerDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreSeckillMangerDo) Joins(fields ...field.RelationField) IEbStoreSeckillMangerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreSeckillMangerDo) Preload(fields ...field.RelationField) IEbStoreSeckillMangerDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreSeckillMangerDo) FirstOrInit() (*model.EbStoreSeckillManger, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreSeckillManger), nil
	}
}

func (e ebStoreSeckillMangerDo) FirstOrCreate() (*model.EbStoreSeckillManger, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreSeckillManger), nil
	}
}

func (e ebStoreSeckillMangerDo) FindByPage(offset int, limit int) (result []*model.EbStoreSeckillManger, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreSeckillMangerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreSeckillMangerDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreSeckillMangerDo) Delete(models ...*model.EbStoreSeckillManger) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreSeckillMangerDo) withDO(do gen.Dao) *ebStoreSeckillMangerDo {
	e.DO = *do.(*gen.DO)
	return e
}
