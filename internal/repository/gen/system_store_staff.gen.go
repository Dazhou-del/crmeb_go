// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSystemStoreStaff(db *gorm.DB, opts ...gen.DOOption) systemStoreStaff {
	_systemStoreStaff := systemStoreStaff{}

	_systemStoreStaff.systemStoreStaffDo.UseDB(db, opts...)
	_systemStoreStaff.systemStoreStaffDo.UseModel(&model.SystemStoreStaff{})

	tableName := _systemStoreStaff.systemStoreStaffDo.TableName()
	_systemStoreStaff.ALL = field.NewAsterisk(tableName)
	_systemStoreStaff.ID = field.NewInt64(tableName, "id")
	_systemStoreStaff.UID = field.NewInt64(tableName, "uid")
	_systemStoreStaff.Avatar = field.NewString(tableName, "avatar")
	_systemStoreStaff.StoreID = field.NewInt64(tableName, "store_id")
	_systemStoreStaff.StaffName = field.NewString(tableName, "staff_name")
	_systemStoreStaff.Phone = field.NewString(tableName, "phone")
	_systemStoreStaff.VerifyStatus = field.NewInt64(tableName, "verify_status")
	_systemStoreStaff.Status = field.NewInt64(tableName, "status")
	_systemStoreStaff.CreatedAt = field.NewInt64(tableName, "created_at")
	_systemStoreStaff.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_systemStoreStaff.DeletedAt = field.NewField(tableName, "deleted_at")

	_systemStoreStaff.fillFieldMap()

	return _systemStoreStaff
}

// systemStoreStaff 门店店员表
type systemStoreStaff struct {
	systemStoreStaffDo systemStoreStaffDo

	ALL          field.Asterisk
	ID           field.Int64
	UID          field.Int64  // 管理员id
	Avatar       field.String // 店员头像
	StoreID      field.Int64  // 门店id
	StaffName    field.String // 店员名称
	Phone        field.String // 手机号码
	VerifyStatus field.Int64  // 核销开关
	Status       field.Int64  // 状态
	CreatedAt    field.Int64
	UpdatedAt    field.Int64
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (s systemStoreStaff) Table(newTableName string) *systemStoreStaff {
	s.systemStoreStaffDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemStoreStaff) As(alias string) *systemStoreStaff {
	s.systemStoreStaffDo.DO = *(s.systemStoreStaffDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemStoreStaff) updateTableName(table string) *systemStoreStaff {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UID = field.NewInt64(table, "uid")
	s.Avatar = field.NewString(table, "avatar")
	s.StoreID = field.NewInt64(table, "store_id")
	s.StaffName = field.NewString(table, "staff_name")
	s.Phone = field.NewString(table, "phone")
	s.VerifyStatus = field.NewInt64(table, "verify_status")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *systemStoreStaff) WithContext(ctx context.Context) ISystemStoreStaffDo {
	return s.systemStoreStaffDo.WithContext(ctx)
}

func (s systemStoreStaff) TableName() string { return s.systemStoreStaffDo.TableName() }

func (s systemStoreStaff) Alias() string { return s.systemStoreStaffDo.Alias() }

func (s systemStoreStaff) Columns(cols ...field.Expr) gen.Columns {
	return s.systemStoreStaffDo.Columns(cols...)
}

func (s *systemStoreStaff) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemStoreStaff) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["uid"] = s.UID
	s.fieldMap["avatar"] = s.Avatar
	s.fieldMap["store_id"] = s.StoreID
	s.fieldMap["staff_name"] = s.StaffName
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["verify_status"] = s.VerifyStatus
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s systemStoreStaff) clone(db *gorm.DB) systemStoreStaff {
	s.systemStoreStaffDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemStoreStaff) replaceDB(db *gorm.DB) systemStoreStaff {
	s.systemStoreStaffDo.ReplaceDB(db)
	return s
}

type systemStoreStaffDo struct{ gen.DO }

type ISystemStoreStaffDo interface {
	gen.SubQuery
	Debug() ISystemStoreStaffDo
	WithContext(ctx context.Context) ISystemStoreStaffDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemStoreStaffDo
	WriteDB() ISystemStoreStaffDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemStoreStaffDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemStoreStaffDo
	Not(conds ...gen.Condition) ISystemStoreStaffDo
	Or(conds ...gen.Condition) ISystemStoreStaffDo
	Select(conds ...field.Expr) ISystemStoreStaffDo
	Where(conds ...gen.Condition) ISystemStoreStaffDo
	Order(conds ...field.Expr) ISystemStoreStaffDo
	Distinct(cols ...field.Expr) ISystemStoreStaffDo
	Omit(cols ...field.Expr) ISystemStoreStaffDo
	Join(table schema.Tabler, on ...field.Expr) ISystemStoreStaffDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemStoreStaffDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemStoreStaffDo
	Group(cols ...field.Expr) ISystemStoreStaffDo
	Having(conds ...gen.Condition) ISystemStoreStaffDo
	Limit(limit int) ISystemStoreStaffDo
	Offset(offset int) ISystemStoreStaffDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemStoreStaffDo
	Unscoped() ISystemStoreStaffDo
	Create(values ...*model.SystemStoreStaff) error
	CreateInBatches(values []*model.SystemStoreStaff, batchSize int) error
	Save(values ...*model.SystemStoreStaff) error
	First() (*model.SystemStoreStaff, error)
	Take() (*model.SystemStoreStaff, error)
	Last() (*model.SystemStoreStaff, error)
	Find() ([]*model.SystemStoreStaff, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemStoreStaff, err error)
	FindInBatches(result *[]*model.SystemStoreStaff, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemStoreStaff) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemStoreStaffDo
	Assign(attrs ...field.AssignExpr) ISystemStoreStaffDo
	Joins(fields ...field.RelationField) ISystemStoreStaffDo
	Preload(fields ...field.RelationField) ISystemStoreStaffDo
	FirstOrInit() (*model.SystemStoreStaff, error)
	FirstOrCreate() (*model.SystemStoreStaff, error)
	FindByPage(offset int, limit int) (result []*model.SystemStoreStaff, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemStoreStaffDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemStoreStaffDo) Debug() ISystemStoreStaffDo {
	return s.withDO(s.DO.Debug())
}

func (s systemStoreStaffDo) WithContext(ctx context.Context) ISystemStoreStaffDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemStoreStaffDo) ReadDB() ISystemStoreStaffDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemStoreStaffDo) WriteDB() ISystemStoreStaffDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemStoreStaffDo) Session(config *gorm.Session) ISystemStoreStaffDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemStoreStaffDo) Clauses(conds ...clause.Expression) ISystemStoreStaffDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemStoreStaffDo) Returning(value interface{}, columns ...string) ISystemStoreStaffDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemStoreStaffDo) Not(conds ...gen.Condition) ISystemStoreStaffDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemStoreStaffDo) Or(conds ...gen.Condition) ISystemStoreStaffDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemStoreStaffDo) Select(conds ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemStoreStaffDo) Where(conds ...gen.Condition) ISystemStoreStaffDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemStoreStaffDo) Order(conds ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemStoreStaffDo) Distinct(cols ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemStoreStaffDo) Omit(cols ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemStoreStaffDo) Join(table schema.Tabler, on ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemStoreStaffDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemStoreStaffDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemStoreStaffDo) Group(cols ...field.Expr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemStoreStaffDo) Having(conds ...gen.Condition) ISystemStoreStaffDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemStoreStaffDo) Limit(limit int) ISystemStoreStaffDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemStoreStaffDo) Offset(offset int) ISystemStoreStaffDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemStoreStaffDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemStoreStaffDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemStoreStaffDo) Unscoped() ISystemStoreStaffDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemStoreStaffDo) Create(values ...*model.SystemStoreStaff) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemStoreStaffDo) CreateInBatches(values []*model.SystemStoreStaff, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemStoreStaffDo) Save(values ...*model.SystemStoreStaff) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemStoreStaffDo) First() (*model.SystemStoreStaff, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemStoreStaff), nil
	}
}

func (s systemStoreStaffDo) Take() (*model.SystemStoreStaff, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemStoreStaff), nil
	}
}

func (s systemStoreStaffDo) Last() (*model.SystemStoreStaff, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemStoreStaff), nil
	}
}

func (s systemStoreStaffDo) Find() ([]*model.SystemStoreStaff, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemStoreStaff), err
}

func (s systemStoreStaffDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemStoreStaff, err error) {
	buf := make([]*model.SystemStoreStaff, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemStoreStaffDo) FindInBatches(result *[]*model.SystemStoreStaff, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemStoreStaffDo) Attrs(attrs ...field.AssignExpr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemStoreStaffDo) Assign(attrs ...field.AssignExpr) ISystemStoreStaffDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemStoreStaffDo) Joins(fields ...field.RelationField) ISystemStoreStaffDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemStoreStaffDo) Preload(fields ...field.RelationField) ISystemStoreStaffDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemStoreStaffDo) FirstOrInit() (*model.SystemStoreStaff, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemStoreStaff), nil
	}
}

func (s systemStoreStaffDo) FirstOrCreate() (*model.SystemStoreStaff, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemStoreStaff), nil
	}
}

func (s systemStoreStaffDo) FindByPage(offset int, limit int) (result []*model.SystemStoreStaff, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemStoreStaffDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemStoreStaffDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemStoreStaffDo) Delete(models ...*model.SystemStoreStaff) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemStoreStaffDo) withDO(do gen.Dao) *systemStoreStaffDo {
	s.DO = *do.(*gen.DO)
	return s
}
