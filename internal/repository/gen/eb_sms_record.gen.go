// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSmsRecord(db *gorm.DB, opts ...gen.DOOption) ebSmsRecord {
	_ebSmsRecord := ebSmsRecord{}

	_ebSmsRecord.ebSmsRecordDo.UseDB(db, opts...)
	_ebSmsRecord.ebSmsRecordDo.UseModel(&model.EbSmsRecord{})

	tableName := _ebSmsRecord.ebSmsRecordDo.TableName()
	_ebSmsRecord.ALL = field.NewAsterisk(tableName)
	_ebSmsRecord.ID = field.NewInt32(tableName, "id")
	_ebSmsRecord.UID = field.NewString(tableName, "uid")
	_ebSmsRecord.Phone = field.NewString(tableName, "phone")
	_ebSmsRecord.Content = field.NewString(tableName, "content")
	_ebSmsRecord.AddIP = field.NewString(tableName, "add_ip")
	_ebSmsRecord.CreateTime = field.NewTime(tableName, "create_time")
	_ebSmsRecord.Template = field.NewString(tableName, "template")
	_ebSmsRecord.Resultcode = field.NewInt32(tableName, "resultcode")
	_ebSmsRecord.RecordID = field.NewInt32(tableName, "record_id")
	_ebSmsRecord.Memo = field.NewString(tableName, "memo")

	_ebSmsRecord.fillFieldMap()

	return _ebSmsRecord
}

// ebSmsRecord 短信发送记录表
type ebSmsRecord struct {
	ebSmsRecordDo ebSmsRecordDo

	ALL        field.Asterisk
	ID         field.Int32  // 短信发送记录编号
	UID        field.String // 短信平台账号
	Phone      field.String // 接受短信的手机号
	Content    field.String // 短信内容
	AddIP      field.String // 添加记录ip
	CreateTime field.Time   // 创建时间
	Template   field.String // 短信模板ID
	Resultcode field.Int32  // 状态码 100=成功,130=失败,131=空号,132=停机,133=关机,134=无状态
	RecordID   field.Int32  // 发送记录id
	Memo       field.String // 短信平台返回信息

	fieldMap map[string]field.Expr
}

func (e ebSmsRecord) Table(newTableName string) *ebSmsRecord {
	e.ebSmsRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSmsRecord) As(alias string) *ebSmsRecord {
	e.ebSmsRecordDo.DO = *(e.ebSmsRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSmsRecord) updateTableName(table string) *ebSmsRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewString(table, "uid")
	e.Phone = field.NewString(table, "phone")
	e.Content = field.NewString(table, "content")
	e.AddIP = field.NewString(table, "add_ip")
	e.CreateTime = field.NewTime(table, "create_time")
	e.Template = field.NewString(table, "template")
	e.Resultcode = field.NewInt32(table, "resultcode")
	e.RecordID = field.NewInt32(table, "record_id")
	e.Memo = field.NewString(table, "memo")

	e.fillFieldMap()

	return e
}

func (e *ebSmsRecord) WithContext(ctx context.Context) IEbSmsRecordDo {
	return e.ebSmsRecordDo.WithContext(ctx)
}

func (e ebSmsRecord) TableName() string { return e.ebSmsRecordDo.TableName() }

func (e ebSmsRecord) Alias() string { return e.ebSmsRecordDo.Alias() }

func (e ebSmsRecord) Columns(cols ...field.Expr) gen.Columns { return e.ebSmsRecordDo.Columns(cols...) }

func (e *ebSmsRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSmsRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["phone"] = e.Phone
	e.fieldMap["content"] = e.Content
	e.fieldMap["add_ip"] = e.AddIP
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["template"] = e.Template
	e.fieldMap["resultcode"] = e.Resultcode
	e.fieldMap["record_id"] = e.RecordID
	e.fieldMap["memo"] = e.Memo
}

func (e ebSmsRecord) clone(db *gorm.DB) ebSmsRecord {
	e.ebSmsRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSmsRecord) replaceDB(db *gorm.DB) ebSmsRecord {
	e.ebSmsRecordDo.ReplaceDB(db)
	return e
}

type ebSmsRecordDo struct{ gen.DO }

type IEbSmsRecordDo interface {
	gen.SubQuery
	Debug() IEbSmsRecordDo
	WithContext(ctx context.Context) IEbSmsRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSmsRecordDo
	WriteDB() IEbSmsRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSmsRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSmsRecordDo
	Not(conds ...gen.Condition) IEbSmsRecordDo
	Or(conds ...gen.Condition) IEbSmsRecordDo
	Select(conds ...field.Expr) IEbSmsRecordDo
	Where(conds ...gen.Condition) IEbSmsRecordDo
	Order(conds ...field.Expr) IEbSmsRecordDo
	Distinct(cols ...field.Expr) IEbSmsRecordDo
	Omit(cols ...field.Expr) IEbSmsRecordDo
	Join(table schema.Tabler, on ...field.Expr) IEbSmsRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSmsRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSmsRecordDo
	Group(cols ...field.Expr) IEbSmsRecordDo
	Having(conds ...gen.Condition) IEbSmsRecordDo
	Limit(limit int) IEbSmsRecordDo
	Offset(offset int) IEbSmsRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSmsRecordDo
	Unscoped() IEbSmsRecordDo
	Create(values ...*model.EbSmsRecord) error
	CreateInBatches(values []*model.EbSmsRecord, batchSize int) error
	Save(values ...*model.EbSmsRecord) error
	First() (*model.EbSmsRecord, error)
	Take() (*model.EbSmsRecord, error)
	Last() (*model.EbSmsRecord, error)
	Find() ([]*model.EbSmsRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSmsRecord, err error)
	FindInBatches(result *[]*model.EbSmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSmsRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSmsRecordDo
	Assign(attrs ...field.AssignExpr) IEbSmsRecordDo
	Joins(fields ...field.RelationField) IEbSmsRecordDo
	Preload(fields ...field.RelationField) IEbSmsRecordDo
	FirstOrInit() (*model.EbSmsRecord, error)
	FirstOrCreate() (*model.EbSmsRecord, error)
	FindByPage(offset int, limit int) (result []*model.EbSmsRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSmsRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSmsRecordDo) Debug() IEbSmsRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSmsRecordDo) WithContext(ctx context.Context) IEbSmsRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSmsRecordDo) ReadDB() IEbSmsRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSmsRecordDo) WriteDB() IEbSmsRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSmsRecordDo) Session(config *gorm.Session) IEbSmsRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSmsRecordDo) Clauses(conds ...clause.Expression) IEbSmsRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSmsRecordDo) Returning(value interface{}, columns ...string) IEbSmsRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSmsRecordDo) Not(conds ...gen.Condition) IEbSmsRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSmsRecordDo) Or(conds ...gen.Condition) IEbSmsRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSmsRecordDo) Select(conds ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSmsRecordDo) Where(conds ...gen.Condition) IEbSmsRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSmsRecordDo) Order(conds ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSmsRecordDo) Distinct(cols ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSmsRecordDo) Omit(cols ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSmsRecordDo) Join(table schema.Tabler, on ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSmsRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSmsRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSmsRecordDo) Group(cols ...field.Expr) IEbSmsRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSmsRecordDo) Having(conds ...gen.Condition) IEbSmsRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSmsRecordDo) Limit(limit int) IEbSmsRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSmsRecordDo) Offset(offset int) IEbSmsRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSmsRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSmsRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSmsRecordDo) Unscoped() IEbSmsRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSmsRecordDo) Create(values ...*model.EbSmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSmsRecordDo) CreateInBatches(values []*model.EbSmsRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSmsRecordDo) Save(values ...*model.EbSmsRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSmsRecordDo) First() (*model.EbSmsRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsRecord), nil
	}
}

func (e ebSmsRecordDo) Take() (*model.EbSmsRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsRecord), nil
	}
}

func (e ebSmsRecordDo) Last() (*model.EbSmsRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsRecord), nil
	}
}

func (e ebSmsRecordDo) Find() ([]*model.EbSmsRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSmsRecord), err
}

func (e ebSmsRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSmsRecord, err error) {
	buf := make([]*model.EbSmsRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSmsRecordDo) FindInBatches(result *[]*model.EbSmsRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSmsRecordDo) Attrs(attrs ...field.AssignExpr) IEbSmsRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSmsRecordDo) Assign(attrs ...field.AssignExpr) IEbSmsRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSmsRecordDo) Joins(fields ...field.RelationField) IEbSmsRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSmsRecordDo) Preload(fields ...field.RelationField) IEbSmsRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSmsRecordDo) FirstOrInit() (*model.EbSmsRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsRecord), nil
	}
}

func (e ebSmsRecordDo) FirstOrCreate() (*model.EbSmsRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSmsRecord), nil
	}
}

func (e ebSmsRecordDo) FindByPage(offset int, limit int) (result []*model.EbSmsRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSmsRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSmsRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSmsRecordDo) Delete(models ...*model.EbSmsRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSmsRecordDo) withDO(do gen.Dao) *ebSmsRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}
