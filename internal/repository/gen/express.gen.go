// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newExpress(db *gorm.DB, opts ...gen.DOOption) express {
	_express := express{}

	_express.expressDo.UseDB(db, opts...)
	_express.expressDo.UseModel(&model.Express{})

	tableName := _express.expressDo.TableName()
	_express.ALL = field.NewAsterisk(tableName)
	_express.ID = field.NewInt64(tableName, "id")
	_express.Code = field.NewString(tableName, "code")
	_express.Name = field.NewString(tableName, "name")
	_express.PartnerID = field.NewInt64(tableName, "partner_id")
	_express.PartnerKey = field.NewInt64(tableName, "partner_key")
	_express.Net = field.NewInt64(tableName, "net")
	_express.Account = field.NewString(tableName, "account")
	_express.Password = field.NewString(tableName, "password")
	_express.NetName = field.NewString(tableName, "net_name")
	_express.Sort = field.NewInt64(tableName, "sort")
	_express.IsShow = field.NewInt64(tableName, "is_show")
	_express.Status = field.NewInt64(tableName, "status")
	_express.CreatedAt = field.NewInt64(tableName, "created_at")
	_express.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_express.DeletedAt = field.NewField(tableName, "deleted_at")

	_express.fillFieldMap()

	return _express
}

// express 快递公司表
type express struct {
	expressDo expressDo

	ALL        field.Asterisk
	ID         field.Int64  // 快递公司id
	Code       field.String // 快递公司简称
	Name       field.String // 快递公司全称
	PartnerID  field.Int64  // 是否需要月结账号
	PartnerKey field.Int64  // 是否需要月结密码
	Net        field.Int64  // 是否需要取件网店
	Account    field.String // 账号
	Password   field.String // 密码
	NetName    field.String // 网点名称
	Sort       field.Int64  // 排序
	IsShow     field.Int64  // 是否显示
	Status     field.Int64  // 是否可用
	CreatedAt  field.Int64  // 创建时间
	UpdatedAt  field.Int64  // 修改时间
	DeletedAt  field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (e express) Table(newTableName string) *express {
	e.expressDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e express) As(alias string) *express {
	e.expressDo.DO = *(e.expressDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *express) updateTableName(table string) *express {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Code = field.NewString(table, "code")
	e.Name = field.NewString(table, "name")
	e.PartnerID = field.NewInt64(table, "partner_id")
	e.PartnerKey = field.NewInt64(table, "partner_key")
	e.Net = field.NewInt64(table, "net")
	e.Account = field.NewString(table, "account")
	e.Password = field.NewString(table, "password")
	e.NetName = field.NewString(table, "net_name")
	e.Sort = field.NewInt64(table, "sort")
	e.IsShow = field.NewInt64(table, "is_show")
	e.Status = field.NewInt64(table, "status")
	e.CreatedAt = field.NewInt64(table, "created_at")
	e.UpdatedAt = field.NewInt64(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *express) WithContext(ctx context.Context) IExpressDo { return e.expressDo.WithContext(ctx) }

func (e express) TableName() string { return e.expressDo.TableName() }

func (e express) Alias() string { return e.expressDo.Alias() }

func (e express) Columns(cols ...field.Expr) gen.Columns { return e.expressDo.Columns(cols...) }

func (e *express) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *express) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 15)
	e.fieldMap["id"] = e.ID
	e.fieldMap["code"] = e.Code
	e.fieldMap["name"] = e.Name
	e.fieldMap["partner_id"] = e.PartnerID
	e.fieldMap["partner_key"] = e.PartnerKey
	e.fieldMap["net"] = e.Net
	e.fieldMap["account"] = e.Account
	e.fieldMap["password"] = e.Password
	e.fieldMap["net_name"] = e.NetName
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["is_show"] = e.IsShow
	e.fieldMap["status"] = e.Status
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e express) clone(db *gorm.DB) express {
	e.expressDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e express) replaceDB(db *gorm.DB) express {
	e.expressDo.ReplaceDB(db)
	return e
}

type expressDo struct{ gen.DO }

type IExpressDo interface {
	gen.SubQuery
	Debug() IExpressDo
	WithContext(ctx context.Context) IExpressDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExpressDo
	WriteDB() IExpressDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExpressDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExpressDo
	Not(conds ...gen.Condition) IExpressDo
	Or(conds ...gen.Condition) IExpressDo
	Select(conds ...field.Expr) IExpressDo
	Where(conds ...gen.Condition) IExpressDo
	Order(conds ...field.Expr) IExpressDo
	Distinct(cols ...field.Expr) IExpressDo
	Omit(cols ...field.Expr) IExpressDo
	Join(table schema.Tabler, on ...field.Expr) IExpressDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExpressDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExpressDo
	Group(cols ...field.Expr) IExpressDo
	Having(conds ...gen.Condition) IExpressDo
	Limit(limit int) IExpressDo
	Offset(offset int) IExpressDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExpressDo
	Unscoped() IExpressDo
	Create(values ...*model.Express) error
	CreateInBatches(values []*model.Express, batchSize int) error
	Save(values ...*model.Express) error
	First() (*model.Express, error)
	Take() (*model.Express, error)
	Last() (*model.Express, error)
	Find() ([]*model.Express, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Express, err error)
	FindInBatches(result *[]*model.Express, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Express) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExpressDo
	Assign(attrs ...field.AssignExpr) IExpressDo
	Joins(fields ...field.RelationField) IExpressDo
	Preload(fields ...field.RelationField) IExpressDo
	FirstOrInit() (*model.Express, error)
	FirstOrCreate() (*model.Express, error)
	FindByPage(offset int, limit int) (result []*model.Express, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExpressDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e expressDo) Debug() IExpressDo {
	return e.withDO(e.DO.Debug())
}

func (e expressDo) WithContext(ctx context.Context) IExpressDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e expressDo) ReadDB() IExpressDo {
	return e.Clauses(dbresolver.Read)
}

func (e expressDo) WriteDB() IExpressDo {
	return e.Clauses(dbresolver.Write)
}

func (e expressDo) Session(config *gorm.Session) IExpressDo {
	return e.withDO(e.DO.Session(config))
}

func (e expressDo) Clauses(conds ...clause.Expression) IExpressDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e expressDo) Returning(value interface{}, columns ...string) IExpressDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e expressDo) Not(conds ...gen.Condition) IExpressDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e expressDo) Or(conds ...gen.Condition) IExpressDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e expressDo) Select(conds ...field.Expr) IExpressDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e expressDo) Where(conds ...gen.Condition) IExpressDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e expressDo) Order(conds ...field.Expr) IExpressDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e expressDo) Distinct(cols ...field.Expr) IExpressDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e expressDo) Omit(cols ...field.Expr) IExpressDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e expressDo) Join(table schema.Tabler, on ...field.Expr) IExpressDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e expressDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExpressDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e expressDo) RightJoin(table schema.Tabler, on ...field.Expr) IExpressDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e expressDo) Group(cols ...field.Expr) IExpressDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e expressDo) Having(conds ...gen.Condition) IExpressDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e expressDo) Limit(limit int) IExpressDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e expressDo) Offset(offset int) IExpressDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e expressDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExpressDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e expressDo) Unscoped() IExpressDo {
	return e.withDO(e.DO.Unscoped())
}

func (e expressDo) Create(values ...*model.Express) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e expressDo) CreateInBatches(values []*model.Express, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e expressDo) Save(values ...*model.Express) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e expressDo) First() (*model.Express, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Express), nil
	}
}

func (e expressDo) Take() (*model.Express, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Express), nil
	}
}

func (e expressDo) Last() (*model.Express, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Express), nil
	}
}

func (e expressDo) Find() ([]*model.Express, error) {
	result, err := e.DO.Find()
	return result.([]*model.Express), err
}

func (e expressDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Express, err error) {
	buf := make([]*model.Express, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e expressDo) FindInBatches(result *[]*model.Express, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e expressDo) Attrs(attrs ...field.AssignExpr) IExpressDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e expressDo) Assign(attrs ...field.AssignExpr) IExpressDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e expressDo) Joins(fields ...field.RelationField) IExpressDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e expressDo) Preload(fields ...field.RelationField) IExpressDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e expressDo) FirstOrInit() (*model.Express, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Express), nil
	}
}

func (e expressDo) FirstOrCreate() (*model.Express, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Express), nil
	}
}

func (e expressDo) FindByPage(offset int, limit int) (result []*model.Express, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e expressDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e expressDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e expressDo) Delete(models ...*model.Express) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *expressDo) withDO(do gen.Dao) *expressDo {
	e.DO = *do.(*gen.DO)
	return e
}
