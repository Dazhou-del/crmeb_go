// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserExtract(db *gorm.DB, opts ...gen.DOOption) ebUserExtract {
	_ebUserExtract := ebUserExtract{}

	_ebUserExtract.ebUserExtractDo.UseDB(db, opts...)
	_ebUserExtract.ebUserExtractDo.UseModel(&model.EbUserExtract{})

	tableName := _ebUserExtract.ebUserExtractDo.TableName()
	_ebUserExtract.ALL = field.NewAsterisk(tableName)
	_ebUserExtract.ID = field.NewInt32(tableName, "id")
	_ebUserExtract.UID = field.NewInt32(tableName, "uid")
	_ebUserExtract.RealName = field.NewString(tableName, "real_name")
	_ebUserExtract.ExtractType = field.NewString(tableName, "extract_type")
	_ebUserExtract.BankCode = field.NewString(tableName, "bank_code")
	_ebUserExtract.BankAddress = field.NewString(tableName, "bank_address")
	_ebUserExtract.AlipayCode = field.NewString(tableName, "alipay_code")
	_ebUserExtract.ExtractPrice = field.NewFloat64(tableName, "extract_price")
	_ebUserExtract.Mark = field.NewString(tableName, "mark")
	_ebUserExtract.Balance = field.NewFloat64(tableName, "balance")
	_ebUserExtract.FailMsg = field.NewString(tableName, "fail_msg")
	_ebUserExtract.Status = field.NewInt32(tableName, "status")
	_ebUserExtract.Wechat = field.NewString(tableName, "wechat")
	_ebUserExtract.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserExtract.UpdateTime = field.NewTime(tableName, "update_time")
	_ebUserExtract.FailTime = field.NewTime(tableName, "fail_time")
	_ebUserExtract.BankName = field.NewString(tableName, "bank_name")
	_ebUserExtract.QrcodeURL = field.NewString(tableName, "qrcode_url")

	_ebUserExtract.fillFieldMap()

	return _ebUserExtract
}

// ebUserExtract 用户提现表
type ebUserExtract struct {
	ebUserExtractDo ebUserExtractDo

	ALL          field.Asterisk
	ID           field.Int32
	UID          field.Int32
	RealName     field.String  // 名称
	ExtractType  field.String  // bank = 银行卡 alipay = 支付宝 weixin=微信
	BankCode     field.String  // 银行卡
	BankAddress  field.String  // 开户地址
	AlipayCode   field.String  // 支付宝账号
	ExtractPrice field.Float64 // 提现金额
	Mark         field.String
	Balance      field.Float64
	FailMsg      field.String // 无效原因
	Status       field.Int32  // -1 未通过 0 审核中 1 已提现
	Wechat       field.String // 微信号
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	FailTime     field.Time   // 失败时间
	BankName     field.String // 银行名称
	QrcodeURL    field.String // 微信收款二维码

	fieldMap map[string]field.Expr
}

func (e ebUserExtract) Table(newTableName string) *ebUserExtract {
	e.ebUserExtractDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserExtract) As(alias string) *ebUserExtract {
	e.ebUserExtractDo.DO = *(e.ebUserExtractDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserExtract) updateTableName(table string) *ebUserExtract {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.RealName = field.NewString(table, "real_name")
	e.ExtractType = field.NewString(table, "extract_type")
	e.BankCode = field.NewString(table, "bank_code")
	e.BankAddress = field.NewString(table, "bank_address")
	e.AlipayCode = field.NewString(table, "alipay_code")
	e.ExtractPrice = field.NewFloat64(table, "extract_price")
	e.Mark = field.NewString(table, "mark")
	e.Balance = field.NewFloat64(table, "balance")
	e.FailMsg = field.NewString(table, "fail_msg")
	e.Status = field.NewInt32(table, "status")
	e.Wechat = field.NewString(table, "wechat")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.FailTime = field.NewTime(table, "fail_time")
	e.BankName = field.NewString(table, "bank_name")
	e.QrcodeURL = field.NewString(table, "qrcode_url")

	e.fillFieldMap()

	return e
}

func (e *ebUserExtract) WithContext(ctx context.Context) IEbUserExtractDo {
	return e.ebUserExtractDo.WithContext(ctx)
}

func (e ebUserExtract) TableName() string { return e.ebUserExtractDo.TableName() }

func (e ebUserExtract) Alias() string { return e.ebUserExtractDo.Alias() }

func (e ebUserExtract) Columns(cols ...field.Expr) gen.Columns {
	return e.ebUserExtractDo.Columns(cols...)
}

func (e *ebUserExtract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserExtract) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 18)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["real_name"] = e.RealName
	e.fieldMap["extract_type"] = e.ExtractType
	e.fieldMap["bank_code"] = e.BankCode
	e.fieldMap["bank_address"] = e.BankAddress
	e.fieldMap["alipay_code"] = e.AlipayCode
	e.fieldMap["extract_price"] = e.ExtractPrice
	e.fieldMap["mark"] = e.Mark
	e.fieldMap["balance"] = e.Balance
	e.fieldMap["fail_msg"] = e.FailMsg
	e.fieldMap["status"] = e.Status
	e.fieldMap["wechat"] = e.Wechat
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["fail_time"] = e.FailTime
	e.fieldMap["bank_name"] = e.BankName
	e.fieldMap["qrcode_url"] = e.QrcodeURL
}

func (e ebUserExtract) clone(db *gorm.DB) ebUserExtract {
	e.ebUserExtractDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserExtract) replaceDB(db *gorm.DB) ebUserExtract {
	e.ebUserExtractDo.ReplaceDB(db)
	return e
}

type ebUserExtractDo struct{ gen.DO }

type IEbUserExtractDo interface {
	gen.SubQuery
	Debug() IEbUserExtractDo
	WithContext(ctx context.Context) IEbUserExtractDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserExtractDo
	WriteDB() IEbUserExtractDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserExtractDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserExtractDo
	Not(conds ...gen.Condition) IEbUserExtractDo
	Or(conds ...gen.Condition) IEbUserExtractDo
	Select(conds ...field.Expr) IEbUserExtractDo
	Where(conds ...gen.Condition) IEbUserExtractDo
	Order(conds ...field.Expr) IEbUserExtractDo
	Distinct(cols ...field.Expr) IEbUserExtractDo
	Omit(cols ...field.Expr) IEbUserExtractDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserExtractDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserExtractDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserExtractDo
	Group(cols ...field.Expr) IEbUserExtractDo
	Having(conds ...gen.Condition) IEbUserExtractDo
	Limit(limit int) IEbUserExtractDo
	Offset(offset int) IEbUserExtractDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserExtractDo
	Unscoped() IEbUserExtractDo
	Create(values ...*model.EbUserExtract) error
	CreateInBatches(values []*model.EbUserExtract, batchSize int) error
	Save(values ...*model.EbUserExtract) error
	First() (*model.EbUserExtract, error)
	Take() (*model.EbUserExtract, error)
	Last() (*model.EbUserExtract, error)
	Find() ([]*model.EbUserExtract, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserExtract, err error)
	FindInBatches(result *[]*model.EbUserExtract, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserExtract) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserExtractDo
	Assign(attrs ...field.AssignExpr) IEbUserExtractDo
	Joins(fields ...field.RelationField) IEbUserExtractDo
	Preload(fields ...field.RelationField) IEbUserExtractDo
	FirstOrInit() (*model.EbUserExtract, error)
	FirstOrCreate() (*model.EbUserExtract, error)
	FindByPage(offset int, limit int) (result []*model.EbUserExtract, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserExtractDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserExtractDo) Debug() IEbUserExtractDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserExtractDo) WithContext(ctx context.Context) IEbUserExtractDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserExtractDo) ReadDB() IEbUserExtractDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserExtractDo) WriteDB() IEbUserExtractDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserExtractDo) Session(config *gorm.Session) IEbUserExtractDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserExtractDo) Clauses(conds ...clause.Expression) IEbUserExtractDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserExtractDo) Returning(value interface{}, columns ...string) IEbUserExtractDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserExtractDo) Not(conds ...gen.Condition) IEbUserExtractDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserExtractDo) Or(conds ...gen.Condition) IEbUserExtractDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserExtractDo) Select(conds ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserExtractDo) Where(conds ...gen.Condition) IEbUserExtractDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserExtractDo) Order(conds ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserExtractDo) Distinct(cols ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserExtractDo) Omit(cols ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserExtractDo) Join(table schema.Tabler, on ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserExtractDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserExtractDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserExtractDo) Group(cols ...field.Expr) IEbUserExtractDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserExtractDo) Having(conds ...gen.Condition) IEbUserExtractDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserExtractDo) Limit(limit int) IEbUserExtractDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserExtractDo) Offset(offset int) IEbUserExtractDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserExtractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserExtractDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserExtractDo) Unscoped() IEbUserExtractDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserExtractDo) Create(values ...*model.EbUserExtract) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserExtractDo) CreateInBatches(values []*model.EbUserExtract, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserExtractDo) Save(values ...*model.EbUserExtract) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserExtractDo) First() (*model.EbUserExtract, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExtract), nil
	}
}

func (e ebUserExtractDo) Take() (*model.EbUserExtract, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExtract), nil
	}
}

func (e ebUserExtractDo) Last() (*model.EbUserExtract, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExtract), nil
	}
}

func (e ebUserExtractDo) Find() ([]*model.EbUserExtract, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserExtract), err
}

func (e ebUserExtractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserExtract, err error) {
	buf := make([]*model.EbUserExtract, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserExtractDo) FindInBatches(result *[]*model.EbUserExtract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserExtractDo) Attrs(attrs ...field.AssignExpr) IEbUserExtractDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserExtractDo) Assign(attrs ...field.AssignExpr) IEbUserExtractDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserExtractDo) Joins(fields ...field.RelationField) IEbUserExtractDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserExtractDo) Preload(fields ...field.RelationField) IEbUserExtractDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserExtractDo) FirstOrInit() (*model.EbUserExtract, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExtract), nil
	}
}

func (e ebUserExtractDo) FirstOrCreate() (*model.EbUserExtract, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserExtract), nil
	}
}

func (e ebUserExtractDo) FindByPage(offset int, limit int) (result []*model.EbUserExtract, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserExtractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserExtractDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserExtractDo) Delete(models ...*model.EbUserExtract) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserExtractDo) withDO(do gen.Dao) *ebUserExtractDo {
	e.DO = *do.(*gen.DO)
	return e
}
