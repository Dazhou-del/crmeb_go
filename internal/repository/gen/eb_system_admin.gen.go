// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemAdmin(db *gorm.DB, opts ...gen.DOOption) ebSystemAdmin {
	_ebSystemAdmin := ebSystemAdmin{}

	_ebSystemAdmin.ebSystemAdminDo.UseDB(db, opts...)
	_ebSystemAdmin.ebSystemAdminDo.UseModel(&model.EbSystemAdmin{})

	tableName := _ebSystemAdmin.ebSystemAdminDo.TableName()
	_ebSystemAdmin.ALL = field.NewAsterisk(tableName)
	_ebSystemAdmin.ID = field.NewInt32(tableName, "id")
	_ebSystemAdmin.Account = field.NewString(tableName, "account")
	_ebSystemAdmin.Pwd = field.NewString(tableName, "pwd")
	_ebSystemAdmin.RealName = field.NewString(tableName, "real_name")
	_ebSystemAdmin.Roles = field.NewString(tableName, "roles")
	_ebSystemAdmin.LastIP = field.NewString(tableName, "last_ip")
	_ebSystemAdmin.UpdateTime = field.NewTime(tableName, "update_time")
	_ebSystemAdmin.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemAdmin.LoginCount = field.NewInt32(tableName, "login_count")
	_ebSystemAdmin.Level = field.NewInt32(tableName, "level")
	_ebSystemAdmin.Status = field.NewInt32(tableName, "status")
	_ebSystemAdmin.IsDel = field.NewInt32(tableName, "is_del")
	_ebSystemAdmin.Phone = field.NewString(tableName, "phone")
	_ebSystemAdmin.IsSms = field.NewInt32(tableName, "is_sms")

	_ebSystemAdmin.fillFieldMap()

	return _ebSystemAdmin
}

// ebSystemAdmin 后台管理员表
type ebSystemAdmin struct {
	ebSystemAdminDo ebSystemAdminDo

	ALL        field.Asterisk
	ID         field.Int32  // 后台管理员表ID
	Account    field.String // 后台管理员账号
	Pwd        field.String // 后台管理员密码
	RealName   field.String // 后台管理员姓名
	Roles      field.String // 后台管理员权限(menus_id)
	LastIP     field.String // 后台管理员最后一次登录ip
	UpdateTime field.Time   // 后台管理员最后一次登录时间
	CreateTime field.Time   // 后台管理员添加时间
	LoginCount field.Int32  // 登录次数
	Level      field.Int32  // 后台管理员级别
	Status     field.Int32  // 后台管理员状态 1有效0无效
	IsDel      field.Int32
	Phone      field.String // 手机号码
	IsSms      field.Int32  // 是否接收短信

	fieldMap map[string]field.Expr
}

func (e ebSystemAdmin) Table(newTableName string) *ebSystemAdmin {
	e.ebSystemAdminDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemAdmin) As(alias string) *ebSystemAdmin {
	e.ebSystemAdminDo.DO = *(e.ebSystemAdminDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemAdmin) updateTableName(table string) *ebSystemAdmin {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Account = field.NewString(table, "account")
	e.Pwd = field.NewString(table, "pwd")
	e.RealName = field.NewString(table, "real_name")
	e.Roles = field.NewString(table, "roles")
	e.LastIP = field.NewString(table, "last_ip")
	e.UpdateTime = field.NewTime(table, "update_time")
	e.CreateTime = field.NewTime(table, "create_time")
	e.LoginCount = field.NewInt32(table, "login_count")
	e.Level = field.NewInt32(table, "level")
	e.Status = field.NewInt32(table, "status")
	e.IsDel = field.NewInt32(table, "is_del")
	e.Phone = field.NewString(table, "phone")
	e.IsSms = field.NewInt32(table, "is_sms")

	e.fillFieldMap()

	return e
}

func (e *ebSystemAdmin) WithContext(ctx context.Context) IEbSystemAdminDo {
	return e.ebSystemAdminDo.WithContext(ctx)
}

func (e ebSystemAdmin) TableName() string { return e.ebSystemAdminDo.TableName() }

func (e ebSystemAdmin) Alias() string { return e.ebSystemAdminDo.Alias() }

func (e ebSystemAdmin) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemAdminDo.Columns(cols...)
}

func (e *ebSystemAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemAdmin) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 14)
	e.fieldMap["id"] = e.ID
	e.fieldMap["account"] = e.Account
	e.fieldMap["pwd"] = e.Pwd
	e.fieldMap["real_name"] = e.RealName
	e.fieldMap["roles"] = e.Roles
	e.fieldMap["last_ip"] = e.LastIP
	e.fieldMap["update_time"] = e.UpdateTime
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["login_count"] = e.LoginCount
	e.fieldMap["level"] = e.Level
	e.fieldMap["status"] = e.Status
	e.fieldMap["is_del"] = e.IsDel
	e.fieldMap["phone"] = e.Phone
	e.fieldMap["is_sms"] = e.IsSms
}

func (e ebSystemAdmin) clone(db *gorm.DB) ebSystemAdmin {
	e.ebSystemAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemAdmin) replaceDB(db *gorm.DB) ebSystemAdmin {
	e.ebSystemAdminDo.ReplaceDB(db)
	return e
}

type ebSystemAdminDo struct{ gen.DO }

type IEbSystemAdminDo interface {
	gen.SubQuery
	Debug() IEbSystemAdminDo
	WithContext(ctx context.Context) IEbSystemAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemAdminDo
	WriteDB() IEbSystemAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemAdminDo
	Not(conds ...gen.Condition) IEbSystemAdminDo
	Or(conds ...gen.Condition) IEbSystemAdminDo
	Select(conds ...field.Expr) IEbSystemAdminDo
	Where(conds ...gen.Condition) IEbSystemAdminDo
	Order(conds ...field.Expr) IEbSystemAdminDo
	Distinct(cols ...field.Expr) IEbSystemAdminDo
	Omit(cols ...field.Expr) IEbSystemAdminDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemAdminDo
	Group(cols ...field.Expr) IEbSystemAdminDo
	Having(conds ...gen.Condition) IEbSystemAdminDo
	Limit(limit int) IEbSystemAdminDo
	Offset(offset int) IEbSystemAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemAdminDo
	Unscoped() IEbSystemAdminDo
	Create(values ...*model.EbSystemAdmin) error
	CreateInBatches(values []*model.EbSystemAdmin, batchSize int) error
	Save(values ...*model.EbSystemAdmin) error
	First() (*model.EbSystemAdmin, error)
	Take() (*model.EbSystemAdmin, error)
	Last() (*model.EbSystemAdmin, error)
	Find() ([]*model.EbSystemAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemAdmin, err error)
	FindInBatches(result *[]*model.EbSystemAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemAdminDo
	Assign(attrs ...field.AssignExpr) IEbSystemAdminDo
	Joins(fields ...field.RelationField) IEbSystemAdminDo
	Preload(fields ...field.RelationField) IEbSystemAdminDo
	FirstOrInit() (*model.EbSystemAdmin, error)
	FirstOrCreate() (*model.EbSystemAdmin, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemAdminDo) Debug() IEbSystemAdminDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemAdminDo) WithContext(ctx context.Context) IEbSystemAdminDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemAdminDo) ReadDB() IEbSystemAdminDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemAdminDo) WriteDB() IEbSystemAdminDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemAdminDo) Session(config *gorm.Session) IEbSystemAdminDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemAdminDo) Clauses(conds ...clause.Expression) IEbSystemAdminDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemAdminDo) Returning(value interface{}, columns ...string) IEbSystemAdminDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemAdminDo) Not(conds ...gen.Condition) IEbSystemAdminDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemAdminDo) Or(conds ...gen.Condition) IEbSystemAdminDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemAdminDo) Select(conds ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemAdminDo) Where(conds ...gen.Condition) IEbSystemAdminDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemAdminDo) Order(conds ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemAdminDo) Distinct(cols ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemAdminDo) Omit(cols ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemAdminDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemAdminDo) Group(cols ...field.Expr) IEbSystemAdminDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemAdminDo) Having(conds ...gen.Condition) IEbSystemAdminDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemAdminDo) Limit(limit int) IEbSystemAdminDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemAdminDo) Offset(offset int) IEbSystemAdminDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemAdminDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemAdminDo) Unscoped() IEbSystemAdminDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemAdminDo) Create(values ...*model.EbSystemAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemAdminDo) CreateInBatches(values []*model.EbSystemAdmin, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemAdminDo) Save(values ...*model.EbSystemAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemAdminDo) First() (*model.EbSystemAdmin, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAdmin), nil
	}
}

func (e ebSystemAdminDo) Take() (*model.EbSystemAdmin, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAdmin), nil
	}
}

func (e ebSystemAdminDo) Last() (*model.EbSystemAdmin, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAdmin), nil
	}
}

func (e ebSystemAdminDo) Find() ([]*model.EbSystemAdmin, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemAdmin), err
}

func (e ebSystemAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemAdmin, err error) {
	buf := make([]*model.EbSystemAdmin, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemAdminDo) FindInBatches(result *[]*model.EbSystemAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemAdminDo) Attrs(attrs ...field.AssignExpr) IEbSystemAdminDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemAdminDo) Assign(attrs ...field.AssignExpr) IEbSystemAdminDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemAdminDo) Joins(fields ...field.RelationField) IEbSystemAdminDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemAdminDo) Preload(fields ...field.RelationField) IEbSystemAdminDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemAdminDo) FirstOrInit() (*model.EbSystemAdmin, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAdmin), nil
	}
}

func (e ebSystemAdminDo) FirstOrCreate() (*model.EbSystemAdmin, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAdmin), nil
	}
}

func (e ebSystemAdminDo) FindByPage(offset int, limit int) (result []*model.EbSystemAdmin, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemAdminDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemAdminDo) Delete(models ...*model.EbSystemAdmin) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemAdminDo) withDO(do gen.Dao) *ebSystemAdminDo {
	e.DO = *do.(*gen.DO)
	return e
}
