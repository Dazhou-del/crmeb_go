// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreProductAttr(db *gorm.DB, opts ...gen.DOOption) ebStoreProductAttr {
	_ebStoreProductAttr := ebStoreProductAttr{}

	_ebStoreProductAttr.ebStoreProductAttrDo.UseDB(db, opts...)
	_ebStoreProductAttr.ebStoreProductAttrDo.UseModel(&model.EbStoreProductAttr{})

	tableName := _ebStoreProductAttr.ebStoreProductAttrDo.TableName()
	_ebStoreProductAttr.ALL = field.NewAsterisk(tableName)
	_ebStoreProductAttr.ID = field.NewInt32(tableName, "id")
	_ebStoreProductAttr.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreProductAttr.AttrName = field.NewString(tableName, "attr_name")
	_ebStoreProductAttr.AttrValues = field.NewString(tableName, "attr_values")
	_ebStoreProductAttr.Type = field.NewBool(tableName, "type")
	_ebStoreProductAttr.IsDel = field.NewBool(tableName, "is_del")

	_ebStoreProductAttr.fillFieldMap()

	return _ebStoreProductAttr
}

// ebStoreProductAttr 商品属性表
type ebStoreProductAttr struct {
	ebStoreProductAttrDo ebStoreProductAttrDo

	ALL        field.Asterisk
	ID         field.Int32  // 主键
	ProductID  field.Int32  // 商品ID
	AttrName   field.String // 属性名
	AttrValues field.String // 属性值
	Type       field.Bool   // 活动类型 0=商品，1=秒杀，2=砍价，3=拼团
	IsDel      field.Bool   // 是否删除,0-否，1-是

	fieldMap map[string]field.Expr
}

func (e ebStoreProductAttr) Table(newTableName string) *ebStoreProductAttr {
	e.ebStoreProductAttrDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreProductAttr) As(alias string) *ebStoreProductAttr {
	e.ebStoreProductAttrDo.DO = *(e.ebStoreProductAttrDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreProductAttr) updateTableName(table string) *ebStoreProductAttr {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.ProductID = field.NewInt32(table, "product_id")
	e.AttrName = field.NewString(table, "attr_name")
	e.AttrValues = field.NewString(table, "attr_values")
	e.Type = field.NewBool(table, "type")
	e.IsDel = field.NewBool(table, "is_del")

	e.fillFieldMap()

	return e
}

func (e *ebStoreProductAttr) WithContext(ctx context.Context) IEbStoreProductAttrDo {
	return e.ebStoreProductAttrDo.WithContext(ctx)
}

func (e ebStoreProductAttr) TableName() string { return e.ebStoreProductAttrDo.TableName() }

func (e ebStoreProductAttr) Alias() string { return e.ebStoreProductAttrDo.Alias() }

func (e ebStoreProductAttr) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreProductAttrDo.Columns(cols...)
}

func (e *ebStoreProductAttr) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreProductAttr) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["attr_name"] = e.AttrName
	e.fieldMap["attr_values"] = e.AttrValues
	e.fieldMap["type"] = e.Type
	e.fieldMap["is_del"] = e.IsDel
}

func (e ebStoreProductAttr) clone(db *gorm.DB) ebStoreProductAttr {
	e.ebStoreProductAttrDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreProductAttr) replaceDB(db *gorm.DB) ebStoreProductAttr {
	e.ebStoreProductAttrDo.ReplaceDB(db)
	return e
}

type ebStoreProductAttrDo struct{ gen.DO }

type IEbStoreProductAttrDo interface {
	gen.SubQuery
	Debug() IEbStoreProductAttrDo
	WithContext(ctx context.Context) IEbStoreProductAttrDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreProductAttrDo
	WriteDB() IEbStoreProductAttrDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreProductAttrDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreProductAttrDo
	Not(conds ...gen.Condition) IEbStoreProductAttrDo
	Or(conds ...gen.Condition) IEbStoreProductAttrDo
	Select(conds ...field.Expr) IEbStoreProductAttrDo
	Where(conds ...gen.Condition) IEbStoreProductAttrDo
	Order(conds ...field.Expr) IEbStoreProductAttrDo
	Distinct(cols ...field.Expr) IEbStoreProductAttrDo
	Omit(cols ...field.Expr) IEbStoreProductAttrDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrDo
	Group(cols ...field.Expr) IEbStoreProductAttrDo
	Having(conds ...gen.Condition) IEbStoreProductAttrDo
	Limit(limit int) IEbStoreProductAttrDo
	Offset(offset int) IEbStoreProductAttrDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductAttrDo
	Unscoped() IEbStoreProductAttrDo
	Create(values ...*model.EbStoreProductAttr) error
	CreateInBatches(values []*model.EbStoreProductAttr, batchSize int) error
	Save(values ...*model.EbStoreProductAttr) error
	First() (*model.EbStoreProductAttr, error)
	Take() (*model.EbStoreProductAttr, error)
	Last() (*model.EbStoreProductAttr, error)
	Find() ([]*model.EbStoreProductAttr, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductAttr, err error)
	FindInBatches(result *[]*model.EbStoreProductAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreProductAttr) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreProductAttrDo
	Assign(attrs ...field.AssignExpr) IEbStoreProductAttrDo
	Joins(fields ...field.RelationField) IEbStoreProductAttrDo
	Preload(fields ...field.RelationField) IEbStoreProductAttrDo
	FirstOrInit() (*model.EbStoreProductAttr, error)
	FirstOrCreate() (*model.EbStoreProductAttr, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreProductAttr, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreProductAttrDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreProductAttrDo) Debug() IEbStoreProductAttrDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreProductAttrDo) WithContext(ctx context.Context) IEbStoreProductAttrDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreProductAttrDo) ReadDB() IEbStoreProductAttrDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreProductAttrDo) WriteDB() IEbStoreProductAttrDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreProductAttrDo) Session(config *gorm.Session) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreProductAttrDo) Clauses(conds ...clause.Expression) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreProductAttrDo) Returning(value interface{}, columns ...string) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreProductAttrDo) Not(conds ...gen.Condition) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreProductAttrDo) Or(conds ...gen.Condition) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreProductAttrDo) Select(conds ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreProductAttrDo) Where(conds ...gen.Condition) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreProductAttrDo) Order(conds ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreProductAttrDo) Distinct(cols ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreProductAttrDo) Omit(cols ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreProductAttrDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreProductAttrDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreProductAttrDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreProductAttrDo) Group(cols ...field.Expr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreProductAttrDo) Having(conds ...gen.Condition) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreProductAttrDo) Limit(limit int) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreProductAttrDo) Offset(offset int) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreProductAttrDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreProductAttrDo) Unscoped() IEbStoreProductAttrDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreProductAttrDo) Create(values ...*model.EbStoreProductAttr) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreProductAttrDo) CreateInBatches(values []*model.EbStoreProductAttr, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreProductAttrDo) Save(values ...*model.EbStoreProductAttr) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreProductAttrDo) First() (*model.EbStoreProductAttr, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttr), nil
	}
}

func (e ebStoreProductAttrDo) Take() (*model.EbStoreProductAttr, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttr), nil
	}
}

func (e ebStoreProductAttrDo) Last() (*model.EbStoreProductAttr, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttr), nil
	}
}

func (e ebStoreProductAttrDo) Find() ([]*model.EbStoreProductAttr, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreProductAttr), err
}

func (e ebStoreProductAttrDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductAttr, err error) {
	buf := make([]*model.EbStoreProductAttr, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreProductAttrDo) FindInBatches(result *[]*model.EbStoreProductAttr, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreProductAttrDo) Attrs(attrs ...field.AssignExpr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreProductAttrDo) Assign(attrs ...field.AssignExpr) IEbStoreProductAttrDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreProductAttrDo) Joins(fields ...field.RelationField) IEbStoreProductAttrDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreProductAttrDo) Preload(fields ...field.RelationField) IEbStoreProductAttrDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreProductAttrDo) FirstOrInit() (*model.EbStoreProductAttr, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttr), nil
	}
}

func (e ebStoreProductAttrDo) FirstOrCreate() (*model.EbStoreProductAttr, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductAttr), nil
	}
}

func (e ebStoreProductAttrDo) FindByPage(offset int, limit int) (result []*model.EbStoreProductAttr, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreProductAttrDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreProductAttrDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreProductAttrDo) Delete(models ...*model.EbStoreProductAttr) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreProductAttrDo) withDO(do gen.Dao) *ebStoreProductAttrDo {
	e.DO = *do.(*gen.DO)
	return e
}
