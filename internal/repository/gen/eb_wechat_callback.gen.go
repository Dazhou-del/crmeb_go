// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbWechatCallback(db *gorm.DB, opts ...gen.DOOption) ebWechatCallback {
	_ebWechatCallback := ebWechatCallback{}

	_ebWechatCallback.ebWechatCallbackDo.UseDB(db, opts...)
	_ebWechatCallback.ebWechatCallbackDo.UseModel(&model.EbWechatCallback{})

	tableName := _ebWechatCallback.ebWechatCallbackDo.TableName()
	_ebWechatCallback.ALL = field.NewAsterisk(tableName)
	_ebWechatCallback.ID = field.NewInt32(tableName, "id")
	_ebWechatCallback.ToUserName = field.NewString(tableName, "to_user_name")
	_ebWechatCallback.FromUserName = field.NewString(tableName, "from_user_name")
	_ebWechatCallback.CreateTime = field.NewInt64(tableName, "create_time")
	_ebWechatCallback.MsgType = field.NewString(tableName, "msg_type")
	_ebWechatCallback.Event = field.NewString(tableName, "event")
	_ebWechatCallback.Content = field.NewString(tableName, "content")
	_ebWechatCallback.AddTime = field.NewTime(tableName, "add_time")

	_ebWechatCallback.fillFieldMap()

	return _ebWechatCallback
}

// ebWechatCallback 微信回调表
type ebWechatCallback struct {
	ebWechatCallbackDo ebWechatCallbackDo

	ALL          field.Asterisk
	ID           field.Int32  // 主键ID
	ToUserName   field.String // 商家小程序名称
	FromUserName field.String // 微信团队的 OpenID(固定值)
	CreateTime   field.Int64  // 事件时间,Unix时间戳
	MsgType      field.String // 消息类型
	Event        field.String // 事件类型
	Content      field.String // 内容
	AddTime      field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e ebWechatCallback) Table(newTableName string) *ebWechatCallback {
	e.ebWechatCallbackDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebWechatCallback) As(alias string) *ebWechatCallback {
	e.ebWechatCallbackDo.DO = *(e.ebWechatCallbackDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebWechatCallback) updateTableName(table string) *ebWechatCallback {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.ToUserName = field.NewString(table, "to_user_name")
	e.FromUserName = field.NewString(table, "from_user_name")
	e.CreateTime = field.NewInt64(table, "create_time")
	e.MsgType = field.NewString(table, "msg_type")
	e.Event = field.NewString(table, "event")
	e.Content = field.NewString(table, "content")
	e.AddTime = field.NewTime(table, "add_time")

	e.fillFieldMap()

	return e
}

func (e *ebWechatCallback) WithContext(ctx context.Context) IEbWechatCallbackDo {
	return e.ebWechatCallbackDo.WithContext(ctx)
}

func (e ebWechatCallback) TableName() string { return e.ebWechatCallbackDo.TableName() }

func (e ebWechatCallback) Alias() string { return e.ebWechatCallbackDo.Alias() }

func (e ebWechatCallback) Columns(cols ...field.Expr) gen.Columns {
	return e.ebWechatCallbackDo.Columns(cols...)
}

func (e *ebWechatCallback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebWechatCallback) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 8)
	e.fieldMap["id"] = e.ID
	e.fieldMap["to_user_name"] = e.ToUserName
	e.fieldMap["from_user_name"] = e.FromUserName
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["msg_type"] = e.MsgType
	e.fieldMap["event"] = e.Event
	e.fieldMap["content"] = e.Content
	e.fieldMap["add_time"] = e.AddTime
}

func (e ebWechatCallback) clone(db *gorm.DB) ebWechatCallback {
	e.ebWechatCallbackDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebWechatCallback) replaceDB(db *gorm.DB) ebWechatCallback {
	e.ebWechatCallbackDo.ReplaceDB(db)
	return e
}

type ebWechatCallbackDo struct{ gen.DO }

type IEbWechatCallbackDo interface {
	gen.SubQuery
	Debug() IEbWechatCallbackDo
	WithContext(ctx context.Context) IEbWechatCallbackDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbWechatCallbackDo
	WriteDB() IEbWechatCallbackDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbWechatCallbackDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbWechatCallbackDo
	Not(conds ...gen.Condition) IEbWechatCallbackDo
	Or(conds ...gen.Condition) IEbWechatCallbackDo
	Select(conds ...field.Expr) IEbWechatCallbackDo
	Where(conds ...gen.Condition) IEbWechatCallbackDo
	Order(conds ...field.Expr) IEbWechatCallbackDo
	Distinct(cols ...field.Expr) IEbWechatCallbackDo
	Omit(cols ...field.Expr) IEbWechatCallbackDo
	Join(table schema.Tabler, on ...field.Expr) IEbWechatCallbackDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbWechatCallbackDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbWechatCallbackDo
	Group(cols ...field.Expr) IEbWechatCallbackDo
	Having(conds ...gen.Condition) IEbWechatCallbackDo
	Limit(limit int) IEbWechatCallbackDo
	Offset(offset int) IEbWechatCallbackDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbWechatCallbackDo
	Unscoped() IEbWechatCallbackDo
	Create(values ...*model.EbWechatCallback) error
	CreateInBatches(values []*model.EbWechatCallback, batchSize int) error
	Save(values ...*model.EbWechatCallback) error
	First() (*model.EbWechatCallback, error)
	Take() (*model.EbWechatCallback, error)
	Last() (*model.EbWechatCallback, error)
	Find() ([]*model.EbWechatCallback, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbWechatCallback, err error)
	FindInBatches(result *[]*model.EbWechatCallback, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbWechatCallback) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbWechatCallbackDo
	Assign(attrs ...field.AssignExpr) IEbWechatCallbackDo
	Joins(fields ...field.RelationField) IEbWechatCallbackDo
	Preload(fields ...field.RelationField) IEbWechatCallbackDo
	FirstOrInit() (*model.EbWechatCallback, error)
	FirstOrCreate() (*model.EbWechatCallback, error)
	FindByPage(offset int, limit int) (result []*model.EbWechatCallback, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbWechatCallbackDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebWechatCallbackDo) Debug() IEbWechatCallbackDo {
	return e.withDO(e.DO.Debug())
}

func (e ebWechatCallbackDo) WithContext(ctx context.Context) IEbWechatCallbackDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebWechatCallbackDo) ReadDB() IEbWechatCallbackDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebWechatCallbackDo) WriteDB() IEbWechatCallbackDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebWechatCallbackDo) Session(config *gorm.Session) IEbWechatCallbackDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebWechatCallbackDo) Clauses(conds ...clause.Expression) IEbWechatCallbackDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebWechatCallbackDo) Returning(value interface{}, columns ...string) IEbWechatCallbackDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebWechatCallbackDo) Not(conds ...gen.Condition) IEbWechatCallbackDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebWechatCallbackDo) Or(conds ...gen.Condition) IEbWechatCallbackDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebWechatCallbackDo) Select(conds ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebWechatCallbackDo) Where(conds ...gen.Condition) IEbWechatCallbackDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebWechatCallbackDo) Order(conds ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebWechatCallbackDo) Distinct(cols ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebWechatCallbackDo) Omit(cols ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebWechatCallbackDo) Join(table schema.Tabler, on ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebWechatCallbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebWechatCallbackDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebWechatCallbackDo) Group(cols ...field.Expr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebWechatCallbackDo) Having(conds ...gen.Condition) IEbWechatCallbackDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebWechatCallbackDo) Limit(limit int) IEbWechatCallbackDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebWechatCallbackDo) Offset(offset int) IEbWechatCallbackDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebWechatCallbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbWechatCallbackDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebWechatCallbackDo) Unscoped() IEbWechatCallbackDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebWechatCallbackDo) Create(values ...*model.EbWechatCallback) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebWechatCallbackDo) CreateInBatches(values []*model.EbWechatCallback, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebWechatCallbackDo) Save(values ...*model.EbWechatCallback) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebWechatCallbackDo) First() (*model.EbWechatCallback, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatCallback), nil
	}
}

func (e ebWechatCallbackDo) Take() (*model.EbWechatCallback, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatCallback), nil
	}
}

func (e ebWechatCallbackDo) Last() (*model.EbWechatCallback, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatCallback), nil
	}
}

func (e ebWechatCallbackDo) Find() ([]*model.EbWechatCallback, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbWechatCallback), err
}

func (e ebWechatCallbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbWechatCallback, err error) {
	buf := make([]*model.EbWechatCallback, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebWechatCallbackDo) FindInBatches(result *[]*model.EbWechatCallback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebWechatCallbackDo) Attrs(attrs ...field.AssignExpr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebWechatCallbackDo) Assign(attrs ...field.AssignExpr) IEbWechatCallbackDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebWechatCallbackDo) Joins(fields ...field.RelationField) IEbWechatCallbackDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebWechatCallbackDo) Preload(fields ...field.RelationField) IEbWechatCallbackDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebWechatCallbackDo) FirstOrInit() (*model.EbWechatCallback, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatCallback), nil
	}
}

func (e ebWechatCallbackDo) FirstOrCreate() (*model.EbWechatCallback, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbWechatCallback), nil
	}
}

func (e ebWechatCallbackDo) FindByPage(offset int, limit int) (result []*model.EbWechatCallback, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebWechatCallbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebWechatCallbackDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebWechatCallbackDo) Delete(models ...*model.EbWechatCallback) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebWechatCallbackDo) withDO(do gen.Dao) *ebWechatCallbackDo {
	e.DO = *do.(*gen.DO)
	return e
}
