// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemRole(db *gorm.DB, opts ...gen.DOOption) ebSystemRole {
	_ebSystemRole := ebSystemRole{}

	_ebSystemRole.ebSystemRoleDo.UseDB(db, opts...)
	_ebSystemRole.ebSystemRoleDo.UseModel(&model.EbSystemRole{})

	tableName := _ebSystemRole.ebSystemRoleDo.TableName()
	_ebSystemRole.ALL = field.NewAsterisk(tableName)
	_ebSystemRole.ID = field.NewInt32(tableName, "id")
	_ebSystemRole.RoleName = field.NewString(tableName, "role_name")
	_ebSystemRole.Rules = field.NewString(tableName, "rules")
	_ebSystemRole.Level = field.NewInt32(tableName, "level")
	_ebSystemRole.Status = field.NewInt32(tableName, "status")
	_ebSystemRole.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemRole.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemRole.fillFieldMap()

	return _ebSystemRole
}

// ebSystemRole 身份管理表
type ebSystemRole struct {
	ebSystemRoleDo ebSystemRoleDo

	ALL        field.Asterisk
	ID         field.Int32  // 身份管理id
	RoleName   field.String // 身份管理名称
	Rules      field.String // 身份管理权限(menus_id)
	Level      field.Int32
	Status     field.Int32 // 状态
	CreateTime field.Time  // 创建时间
	UpdateTime field.Time  // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemRole) Table(newTableName string) *ebSystemRole {
	e.ebSystemRoleDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemRole) As(alias string) *ebSystemRole {
	e.ebSystemRoleDo.DO = *(e.ebSystemRoleDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemRole) updateTableName(table string) *ebSystemRole {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.RoleName = field.NewString(table, "role_name")
	e.Rules = field.NewString(table, "rules")
	e.Level = field.NewInt32(table, "level")
	e.Status = field.NewInt32(table, "status")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemRole) WithContext(ctx context.Context) IEbSystemRoleDo {
	return e.ebSystemRoleDo.WithContext(ctx)
}

func (e ebSystemRole) TableName() string { return e.ebSystemRoleDo.TableName() }

func (e ebSystemRole) Alias() string { return e.ebSystemRoleDo.Alias() }

func (e ebSystemRole) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemRoleDo.Columns(cols...)
}

func (e *ebSystemRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemRole) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["id"] = e.ID
	e.fieldMap["role_name"] = e.RoleName
	e.fieldMap["rules"] = e.Rules
	e.fieldMap["level"] = e.Level
	e.fieldMap["status"] = e.Status
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemRole) clone(db *gorm.DB) ebSystemRole {
	e.ebSystemRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemRole) replaceDB(db *gorm.DB) ebSystemRole {
	e.ebSystemRoleDo.ReplaceDB(db)
	return e
}

type ebSystemRoleDo struct{ gen.DO }

type IEbSystemRoleDo interface {
	gen.SubQuery
	Debug() IEbSystemRoleDo
	WithContext(ctx context.Context) IEbSystemRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemRoleDo
	WriteDB() IEbSystemRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemRoleDo
	Not(conds ...gen.Condition) IEbSystemRoleDo
	Or(conds ...gen.Condition) IEbSystemRoleDo
	Select(conds ...field.Expr) IEbSystemRoleDo
	Where(conds ...gen.Condition) IEbSystemRoleDo
	Order(conds ...field.Expr) IEbSystemRoleDo
	Distinct(cols ...field.Expr) IEbSystemRoleDo
	Omit(cols ...field.Expr) IEbSystemRoleDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemRoleDo
	Group(cols ...field.Expr) IEbSystemRoleDo
	Having(conds ...gen.Condition) IEbSystemRoleDo
	Limit(limit int) IEbSystemRoleDo
	Offset(offset int) IEbSystemRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemRoleDo
	Unscoped() IEbSystemRoleDo
	Create(values ...*model.EbSystemRole) error
	CreateInBatches(values []*model.EbSystemRole, batchSize int) error
	Save(values ...*model.EbSystemRole) error
	First() (*model.EbSystemRole, error)
	Take() (*model.EbSystemRole, error)
	Last() (*model.EbSystemRole, error)
	Find() ([]*model.EbSystemRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemRole, err error)
	FindInBatches(result *[]*model.EbSystemRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemRoleDo
	Assign(attrs ...field.AssignExpr) IEbSystemRoleDo
	Joins(fields ...field.RelationField) IEbSystemRoleDo
	Preload(fields ...field.RelationField) IEbSystemRoleDo
	FirstOrInit() (*model.EbSystemRole, error)
	FirstOrCreate() (*model.EbSystemRole, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemRoleDo) Debug() IEbSystemRoleDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemRoleDo) WithContext(ctx context.Context) IEbSystemRoleDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemRoleDo) ReadDB() IEbSystemRoleDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemRoleDo) WriteDB() IEbSystemRoleDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemRoleDo) Session(config *gorm.Session) IEbSystemRoleDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemRoleDo) Clauses(conds ...clause.Expression) IEbSystemRoleDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemRoleDo) Returning(value interface{}, columns ...string) IEbSystemRoleDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemRoleDo) Not(conds ...gen.Condition) IEbSystemRoleDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemRoleDo) Or(conds ...gen.Condition) IEbSystemRoleDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemRoleDo) Select(conds ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemRoleDo) Where(conds ...gen.Condition) IEbSystemRoleDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemRoleDo) Order(conds ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemRoleDo) Distinct(cols ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemRoleDo) Omit(cols ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemRoleDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemRoleDo) Group(cols ...field.Expr) IEbSystemRoleDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemRoleDo) Having(conds ...gen.Condition) IEbSystemRoleDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemRoleDo) Limit(limit int) IEbSystemRoleDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemRoleDo) Offset(offset int) IEbSystemRoleDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemRoleDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemRoleDo) Unscoped() IEbSystemRoleDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemRoleDo) Create(values ...*model.EbSystemRole) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemRoleDo) CreateInBatches(values []*model.EbSystemRole, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemRoleDo) Save(values ...*model.EbSystemRole) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemRoleDo) First() (*model.EbSystemRole, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemRole), nil
	}
}

func (e ebSystemRoleDo) Take() (*model.EbSystemRole, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemRole), nil
	}
}

func (e ebSystemRoleDo) Last() (*model.EbSystemRole, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemRole), nil
	}
}

func (e ebSystemRoleDo) Find() ([]*model.EbSystemRole, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemRole), err
}

func (e ebSystemRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemRole, err error) {
	buf := make([]*model.EbSystemRole, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemRoleDo) FindInBatches(result *[]*model.EbSystemRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemRoleDo) Attrs(attrs ...field.AssignExpr) IEbSystemRoleDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemRoleDo) Assign(attrs ...field.AssignExpr) IEbSystemRoleDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemRoleDo) Joins(fields ...field.RelationField) IEbSystemRoleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemRoleDo) Preload(fields ...field.RelationField) IEbSystemRoleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemRoleDo) FirstOrInit() (*model.EbSystemRole, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemRole), nil
	}
}

func (e ebSystemRoleDo) FirstOrCreate() (*model.EbSystemRole, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemRole), nil
	}
}

func (e ebSystemRoleDo) FindByPage(offset int, limit int) (result []*model.EbSystemRole, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemRoleDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemRoleDo) Delete(models ...*model.EbSystemRole) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemRoleDo) withDO(do gen.Dao) *ebSystemRoleDo {
	e.DO = *do.(*gen.DO)
	return e
}
