// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbUserRecharge(db *gorm.DB, opts ...gen.DOOption) ebUserRecharge {
	_ebUserRecharge := ebUserRecharge{}

	_ebUserRecharge.ebUserRechargeDo.UseDB(db, opts...)
	_ebUserRecharge.ebUserRechargeDo.UseModel(&model.EbUserRecharge{})

	tableName := _ebUserRecharge.ebUserRechargeDo.TableName()
	_ebUserRecharge.ALL = field.NewAsterisk(tableName)
	_ebUserRecharge.ID = field.NewInt32(tableName, "id")
	_ebUserRecharge.UID = field.NewInt32(tableName, "uid")
	_ebUserRecharge.OrderID = field.NewString(tableName, "order_id")
	_ebUserRecharge.Price = field.NewFloat64(tableName, "price")
	_ebUserRecharge.GivePrice = field.NewFloat64(tableName, "give_price")
	_ebUserRecharge.RechargeType = field.NewString(tableName, "recharge_type")
	_ebUserRecharge.Paid = field.NewBool(tableName, "paid")
	_ebUserRecharge.PayTime = field.NewTime(tableName, "pay_time")
	_ebUserRecharge.CreateTime = field.NewTime(tableName, "create_time")
	_ebUserRecharge.RefundPrice = field.NewFloat64(tableName, "refund_price")

	_ebUserRecharge.fillFieldMap()

	return _ebUserRecharge
}

// ebUserRecharge 用户充值表
type ebUserRecharge struct {
	ebUserRechargeDo ebUserRechargeDo

	ALL          field.Asterisk
	ID           field.Int32
	UID          field.Int32   // 充值用户UID
	OrderID      field.String  // 订单号
	Price        field.Float64 // 充值金额
	GivePrice    field.Float64 // 购买赠送金额
	RechargeType field.String  // 充值类型
	Paid         field.Bool    // 是否充值
	PayTime      field.Time    // 充值支付时间
	CreateTime   field.Time    // 充值时间
	RefundPrice  field.Float64 // 退款金额

	fieldMap map[string]field.Expr
}

func (e ebUserRecharge) Table(newTableName string) *ebUserRecharge {
	e.ebUserRechargeDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebUserRecharge) As(alias string) *ebUserRecharge {
	e.ebUserRechargeDo.DO = *(e.ebUserRechargeDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebUserRecharge) updateTableName(table string) *ebUserRecharge {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.UID = field.NewInt32(table, "uid")
	e.OrderID = field.NewString(table, "order_id")
	e.Price = field.NewFloat64(table, "price")
	e.GivePrice = field.NewFloat64(table, "give_price")
	e.RechargeType = field.NewString(table, "recharge_type")
	e.Paid = field.NewBool(table, "paid")
	e.PayTime = field.NewTime(table, "pay_time")
	e.CreateTime = field.NewTime(table, "create_time")
	e.RefundPrice = field.NewFloat64(table, "refund_price")

	e.fillFieldMap()

	return e
}

func (e *ebUserRecharge) WithContext(ctx context.Context) IEbUserRechargeDo {
	return e.ebUserRechargeDo.WithContext(ctx)
}

func (e ebUserRecharge) TableName() string { return e.ebUserRechargeDo.TableName() }

func (e ebUserRecharge) Alias() string { return e.ebUserRechargeDo.Alias() }

func (e ebUserRecharge) Columns(cols ...field.Expr) gen.Columns {
	return e.ebUserRechargeDo.Columns(cols...)
}

func (e *ebUserRecharge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebUserRecharge) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["order_id"] = e.OrderID
	e.fieldMap["price"] = e.Price
	e.fieldMap["give_price"] = e.GivePrice
	e.fieldMap["recharge_type"] = e.RechargeType
	e.fieldMap["paid"] = e.Paid
	e.fieldMap["pay_time"] = e.PayTime
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["refund_price"] = e.RefundPrice
}

func (e ebUserRecharge) clone(db *gorm.DB) ebUserRecharge {
	e.ebUserRechargeDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebUserRecharge) replaceDB(db *gorm.DB) ebUserRecharge {
	e.ebUserRechargeDo.ReplaceDB(db)
	return e
}

type ebUserRechargeDo struct{ gen.DO }

type IEbUserRechargeDo interface {
	gen.SubQuery
	Debug() IEbUserRechargeDo
	WithContext(ctx context.Context) IEbUserRechargeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbUserRechargeDo
	WriteDB() IEbUserRechargeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbUserRechargeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbUserRechargeDo
	Not(conds ...gen.Condition) IEbUserRechargeDo
	Or(conds ...gen.Condition) IEbUserRechargeDo
	Select(conds ...field.Expr) IEbUserRechargeDo
	Where(conds ...gen.Condition) IEbUserRechargeDo
	Order(conds ...field.Expr) IEbUserRechargeDo
	Distinct(cols ...field.Expr) IEbUserRechargeDo
	Omit(cols ...field.Expr) IEbUserRechargeDo
	Join(table schema.Tabler, on ...field.Expr) IEbUserRechargeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserRechargeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbUserRechargeDo
	Group(cols ...field.Expr) IEbUserRechargeDo
	Having(conds ...gen.Condition) IEbUserRechargeDo
	Limit(limit int) IEbUserRechargeDo
	Offset(offset int) IEbUserRechargeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserRechargeDo
	Unscoped() IEbUserRechargeDo
	Create(values ...*model.EbUserRecharge) error
	CreateInBatches(values []*model.EbUserRecharge, batchSize int) error
	Save(values ...*model.EbUserRecharge) error
	First() (*model.EbUserRecharge, error)
	Take() (*model.EbUserRecharge, error)
	Last() (*model.EbUserRecharge, error)
	Find() ([]*model.EbUserRecharge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserRecharge, err error)
	FindInBatches(result *[]*model.EbUserRecharge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbUserRecharge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbUserRechargeDo
	Assign(attrs ...field.AssignExpr) IEbUserRechargeDo
	Joins(fields ...field.RelationField) IEbUserRechargeDo
	Preload(fields ...field.RelationField) IEbUserRechargeDo
	FirstOrInit() (*model.EbUserRecharge, error)
	FirstOrCreate() (*model.EbUserRecharge, error)
	FindByPage(offset int, limit int) (result []*model.EbUserRecharge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbUserRechargeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebUserRechargeDo) Debug() IEbUserRechargeDo {
	return e.withDO(e.DO.Debug())
}

func (e ebUserRechargeDo) WithContext(ctx context.Context) IEbUserRechargeDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebUserRechargeDo) ReadDB() IEbUserRechargeDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebUserRechargeDo) WriteDB() IEbUserRechargeDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebUserRechargeDo) Session(config *gorm.Session) IEbUserRechargeDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebUserRechargeDo) Clauses(conds ...clause.Expression) IEbUserRechargeDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebUserRechargeDo) Returning(value interface{}, columns ...string) IEbUserRechargeDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebUserRechargeDo) Not(conds ...gen.Condition) IEbUserRechargeDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebUserRechargeDo) Or(conds ...gen.Condition) IEbUserRechargeDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebUserRechargeDo) Select(conds ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebUserRechargeDo) Where(conds ...gen.Condition) IEbUserRechargeDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebUserRechargeDo) Order(conds ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebUserRechargeDo) Distinct(cols ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebUserRechargeDo) Omit(cols ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebUserRechargeDo) Join(table schema.Tabler, on ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebUserRechargeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebUserRechargeDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebUserRechargeDo) Group(cols ...field.Expr) IEbUserRechargeDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebUserRechargeDo) Having(conds ...gen.Condition) IEbUserRechargeDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebUserRechargeDo) Limit(limit int) IEbUserRechargeDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebUserRechargeDo) Offset(offset int) IEbUserRechargeDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebUserRechargeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbUserRechargeDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebUserRechargeDo) Unscoped() IEbUserRechargeDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebUserRechargeDo) Create(values ...*model.EbUserRecharge) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebUserRechargeDo) CreateInBatches(values []*model.EbUserRecharge, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebUserRechargeDo) Save(values ...*model.EbUserRecharge) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebUserRechargeDo) First() (*model.EbUserRecharge, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserRecharge), nil
	}
}

func (e ebUserRechargeDo) Take() (*model.EbUserRecharge, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserRecharge), nil
	}
}

func (e ebUserRechargeDo) Last() (*model.EbUserRecharge, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserRecharge), nil
	}
}

func (e ebUserRechargeDo) Find() ([]*model.EbUserRecharge, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbUserRecharge), err
}

func (e ebUserRechargeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbUserRecharge, err error) {
	buf := make([]*model.EbUserRecharge, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebUserRechargeDo) FindInBatches(result *[]*model.EbUserRecharge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebUserRechargeDo) Attrs(attrs ...field.AssignExpr) IEbUserRechargeDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebUserRechargeDo) Assign(attrs ...field.AssignExpr) IEbUserRechargeDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebUserRechargeDo) Joins(fields ...field.RelationField) IEbUserRechargeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebUserRechargeDo) Preload(fields ...field.RelationField) IEbUserRechargeDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebUserRechargeDo) FirstOrInit() (*model.EbUserRecharge, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserRecharge), nil
	}
}

func (e ebUserRechargeDo) FirstOrCreate() (*model.EbUserRecharge, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbUserRecharge), nil
	}
}

func (e ebUserRechargeDo) FindByPage(offset int, limit int) (result []*model.EbUserRecharge, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebUserRechargeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebUserRechargeDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebUserRechargeDo) Delete(models ...*model.EbUserRecharge) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebUserRechargeDo) withDO(do gen.Dao) *ebUserRechargeDo {
	e.DO = *do.(*gen.DO)
	return e
}
