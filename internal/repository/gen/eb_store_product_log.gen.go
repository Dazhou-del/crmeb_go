// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbStoreProductLog(db *gorm.DB, opts ...gen.DOOption) ebStoreProductLog {
	_ebStoreProductLog := ebStoreProductLog{}

	_ebStoreProductLog.ebStoreProductLogDo.UseDB(db, opts...)
	_ebStoreProductLog.ebStoreProductLogDo.UseModel(&model.EbStoreProductLog{})

	tableName := _ebStoreProductLog.ebStoreProductLogDo.TableName()
	_ebStoreProductLog.ALL = field.NewAsterisk(tableName)
	_ebStoreProductLog.ID = field.NewInt32(tableName, "id")
	_ebStoreProductLog.Type = field.NewString(tableName, "type")
	_ebStoreProductLog.ProductID = field.NewInt32(tableName, "product_id")
	_ebStoreProductLog.UID = field.NewInt32(tableName, "uid")
	_ebStoreProductLog.VisitNum = field.NewBool(tableName, "visit_num")
	_ebStoreProductLog.CartNum = field.NewInt32(tableName, "cart_num")
	_ebStoreProductLog.OrderNum = field.NewInt32(tableName, "order_num")
	_ebStoreProductLog.PayNum = field.NewInt32(tableName, "pay_num")
	_ebStoreProductLog.PayPrice = field.NewFloat64(tableName, "pay_price")
	_ebStoreProductLog.CostPrice = field.NewFloat64(tableName, "cost_price")
	_ebStoreProductLog.PayUID = field.NewInt32(tableName, "pay_uid")
	_ebStoreProductLog.RefundNum = field.NewInt32(tableName, "refund_num")
	_ebStoreProductLog.RefundPrice = field.NewFloat64(tableName, "refund_price")
	_ebStoreProductLog.CollectNum = field.NewBool(tableName, "collect_num")
	_ebStoreProductLog.AddTime = field.NewInt64(tableName, "add_time")

	_ebStoreProductLog.fillFieldMap()

	return _ebStoreProductLog
}

// ebStoreProductLog 商品日志表
type ebStoreProductLog struct {
	ebStoreProductLogDo ebStoreProductLogDo

	ALL         field.Asterisk
	ID          field.Int32   // 统计ID
	Type        field.String  // 类型visit,cart,order,pay,collect,refund
	ProductID   field.Int32   // 商品ID
	UID         field.Int32   // 用户ID
	VisitNum    field.Bool    // 是否浏览
	CartNum     field.Int32   // 加入购物车数量
	OrderNum    field.Int32   // 下单数量
	PayNum      field.Int32   // 支付数量
	PayPrice    field.Float64 // 支付金额
	CostPrice   field.Float64 // 商品成本价
	PayUID      field.Int32   // 支付用户ID
	RefundNum   field.Int32   // 退款数量
	RefundPrice field.Float64 // 退款金额
	CollectNum  field.Bool    // 收藏
	AddTime     field.Int64   // 添加时间

	fieldMap map[string]field.Expr
}

func (e ebStoreProductLog) Table(newTableName string) *ebStoreProductLog {
	e.ebStoreProductLogDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebStoreProductLog) As(alias string) *ebStoreProductLog {
	e.ebStoreProductLogDo.DO = *(e.ebStoreProductLogDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebStoreProductLog) updateTableName(table string) *ebStoreProductLog {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Type = field.NewString(table, "type")
	e.ProductID = field.NewInt32(table, "product_id")
	e.UID = field.NewInt32(table, "uid")
	e.VisitNum = field.NewBool(table, "visit_num")
	e.CartNum = field.NewInt32(table, "cart_num")
	e.OrderNum = field.NewInt32(table, "order_num")
	e.PayNum = field.NewInt32(table, "pay_num")
	e.PayPrice = field.NewFloat64(table, "pay_price")
	e.CostPrice = field.NewFloat64(table, "cost_price")
	e.PayUID = field.NewInt32(table, "pay_uid")
	e.RefundNum = field.NewInt32(table, "refund_num")
	e.RefundPrice = field.NewFloat64(table, "refund_price")
	e.CollectNum = field.NewBool(table, "collect_num")
	e.AddTime = field.NewInt64(table, "add_time")

	e.fillFieldMap()

	return e
}

func (e *ebStoreProductLog) WithContext(ctx context.Context) IEbStoreProductLogDo {
	return e.ebStoreProductLogDo.WithContext(ctx)
}

func (e ebStoreProductLog) TableName() string { return e.ebStoreProductLogDo.TableName() }

func (e ebStoreProductLog) Alias() string { return e.ebStoreProductLogDo.Alias() }

func (e ebStoreProductLog) Columns(cols ...field.Expr) gen.Columns {
	return e.ebStoreProductLogDo.Columns(cols...)
}

func (e *ebStoreProductLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebStoreProductLog) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 15)
	e.fieldMap["id"] = e.ID
	e.fieldMap["type"] = e.Type
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["uid"] = e.UID
	e.fieldMap["visit_num"] = e.VisitNum
	e.fieldMap["cart_num"] = e.CartNum
	e.fieldMap["order_num"] = e.OrderNum
	e.fieldMap["pay_num"] = e.PayNum
	e.fieldMap["pay_price"] = e.PayPrice
	e.fieldMap["cost_price"] = e.CostPrice
	e.fieldMap["pay_uid"] = e.PayUID
	e.fieldMap["refund_num"] = e.RefundNum
	e.fieldMap["refund_price"] = e.RefundPrice
	e.fieldMap["collect_num"] = e.CollectNum
	e.fieldMap["add_time"] = e.AddTime
}

func (e ebStoreProductLog) clone(db *gorm.DB) ebStoreProductLog {
	e.ebStoreProductLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebStoreProductLog) replaceDB(db *gorm.DB) ebStoreProductLog {
	e.ebStoreProductLogDo.ReplaceDB(db)
	return e
}

type ebStoreProductLogDo struct{ gen.DO }

type IEbStoreProductLogDo interface {
	gen.SubQuery
	Debug() IEbStoreProductLogDo
	WithContext(ctx context.Context) IEbStoreProductLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbStoreProductLogDo
	WriteDB() IEbStoreProductLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbStoreProductLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbStoreProductLogDo
	Not(conds ...gen.Condition) IEbStoreProductLogDo
	Or(conds ...gen.Condition) IEbStoreProductLogDo
	Select(conds ...field.Expr) IEbStoreProductLogDo
	Where(conds ...gen.Condition) IEbStoreProductLogDo
	Order(conds ...field.Expr) IEbStoreProductLogDo
	Distinct(cols ...field.Expr) IEbStoreProductLogDo
	Omit(cols ...field.Expr) IEbStoreProductLogDo
	Join(table schema.Tabler, on ...field.Expr) IEbStoreProductLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductLogDo
	Group(cols ...field.Expr) IEbStoreProductLogDo
	Having(conds ...gen.Condition) IEbStoreProductLogDo
	Limit(limit int) IEbStoreProductLogDo
	Offset(offset int) IEbStoreProductLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductLogDo
	Unscoped() IEbStoreProductLogDo
	Create(values ...*model.EbStoreProductLog) error
	CreateInBatches(values []*model.EbStoreProductLog, batchSize int) error
	Save(values ...*model.EbStoreProductLog) error
	First() (*model.EbStoreProductLog, error)
	Take() (*model.EbStoreProductLog, error)
	Last() (*model.EbStoreProductLog, error)
	Find() ([]*model.EbStoreProductLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductLog, err error)
	FindInBatches(result *[]*model.EbStoreProductLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbStoreProductLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbStoreProductLogDo
	Assign(attrs ...field.AssignExpr) IEbStoreProductLogDo
	Joins(fields ...field.RelationField) IEbStoreProductLogDo
	Preload(fields ...field.RelationField) IEbStoreProductLogDo
	FirstOrInit() (*model.EbStoreProductLog, error)
	FirstOrCreate() (*model.EbStoreProductLog, error)
	FindByPage(offset int, limit int) (result []*model.EbStoreProductLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbStoreProductLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebStoreProductLogDo) Debug() IEbStoreProductLogDo {
	return e.withDO(e.DO.Debug())
}

func (e ebStoreProductLogDo) WithContext(ctx context.Context) IEbStoreProductLogDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebStoreProductLogDo) ReadDB() IEbStoreProductLogDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebStoreProductLogDo) WriteDB() IEbStoreProductLogDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebStoreProductLogDo) Session(config *gorm.Session) IEbStoreProductLogDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebStoreProductLogDo) Clauses(conds ...clause.Expression) IEbStoreProductLogDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebStoreProductLogDo) Returning(value interface{}, columns ...string) IEbStoreProductLogDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebStoreProductLogDo) Not(conds ...gen.Condition) IEbStoreProductLogDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebStoreProductLogDo) Or(conds ...gen.Condition) IEbStoreProductLogDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebStoreProductLogDo) Select(conds ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebStoreProductLogDo) Where(conds ...gen.Condition) IEbStoreProductLogDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebStoreProductLogDo) Order(conds ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebStoreProductLogDo) Distinct(cols ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebStoreProductLogDo) Omit(cols ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebStoreProductLogDo) Join(table schema.Tabler, on ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebStoreProductLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebStoreProductLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebStoreProductLogDo) Group(cols ...field.Expr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebStoreProductLogDo) Having(conds ...gen.Condition) IEbStoreProductLogDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebStoreProductLogDo) Limit(limit int) IEbStoreProductLogDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebStoreProductLogDo) Offset(offset int) IEbStoreProductLogDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebStoreProductLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbStoreProductLogDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebStoreProductLogDo) Unscoped() IEbStoreProductLogDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebStoreProductLogDo) Create(values ...*model.EbStoreProductLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebStoreProductLogDo) CreateInBatches(values []*model.EbStoreProductLog, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebStoreProductLogDo) Save(values ...*model.EbStoreProductLog) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebStoreProductLogDo) First() (*model.EbStoreProductLog, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductLog), nil
	}
}

func (e ebStoreProductLogDo) Take() (*model.EbStoreProductLog, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductLog), nil
	}
}

func (e ebStoreProductLogDo) Last() (*model.EbStoreProductLog, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductLog), nil
	}
}

func (e ebStoreProductLogDo) Find() ([]*model.EbStoreProductLog, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbStoreProductLog), err
}

func (e ebStoreProductLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbStoreProductLog, err error) {
	buf := make([]*model.EbStoreProductLog, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebStoreProductLogDo) FindInBatches(result *[]*model.EbStoreProductLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebStoreProductLogDo) Attrs(attrs ...field.AssignExpr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebStoreProductLogDo) Assign(attrs ...field.AssignExpr) IEbStoreProductLogDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebStoreProductLogDo) Joins(fields ...field.RelationField) IEbStoreProductLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebStoreProductLogDo) Preload(fields ...field.RelationField) IEbStoreProductLogDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebStoreProductLogDo) FirstOrInit() (*model.EbStoreProductLog, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductLog), nil
	}
}

func (e ebStoreProductLogDo) FirstOrCreate() (*model.EbStoreProductLog, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbStoreProductLog), nil
	}
}

func (e ebStoreProductLogDo) FindByPage(offset int, limit int) (result []*model.EbStoreProductLog, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebStoreProductLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebStoreProductLogDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebStoreProductLogDo) Delete(models ...*model.EbStoreProductLog) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebStoreProductLogDo) withDO(do gen.Dao) *ebStoreProductLogDo {
	e.DO = *do.(*gen.DO)
	return e
}
