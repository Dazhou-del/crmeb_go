// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newUserVisitRecord(db *gorm.DB, opts ...gen.DOOption) userVisitRecord {
	_userVisitRecord := userVisitRecord{}

	_userVisitRecord.userVisitRecordDo.UseDB(db, opts...)
	_userVisitRecord.userVisitRecordDo.UseModel(&model.UserVisitRecord{})

	tableName := _userVisitRecord.userVisitRecordDo.TableName()
	_userVisitRecord.ALL = field.NewAsterisk(tableName)
	_userVisitRecord.ID = field.NewInt64(tableName, "id")
	_userVisitRecord.Date = field.NewString(tableName, "date")
	_userVisitRecord.UID = field.NewInt64(tableName, "uid")
	_userVisitRecord.VisitType = field.NewInt64(tableName, "visit_type")
	_userVisitRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_userVisitRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userVisitRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_userVisitRecord.fillFieldMap()

	return _userVisitRecord
}

// userVisitRecord 用户访问记录表
type userVisitRecord struct {
	userVisitRecordDo userVisitRecordDo

	ALL       field.Asterisk
	ID        field.Int64
	Date      field.String // 日期
	UID       field.Int64  // 用户uid
	VisitType field.Int64  // 访问类型
	CreatedAt field.Int64
	UpdatedAt field.Int64
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (u userVisitRecord) Table(newTableName string) *userVisitRecord {
	u.userVisitRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userVisitRecord) As(alias string) *userVisitRecord {
	u.userVisitRecordDo.DO = *(u.userVisitRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userVisitRecord) updateTableName(table string) *userVisitRecord {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Date = field.NewString(table, "date")
	u.UID = field.NewInt64(table, "uid")
	u.VisitType = field.NewInt64(table, "visit_type")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userVisitRecord) WithContext(ctx context.Context) IUserVisitRecordDo {
	return u.userVisitRecordDo.WithContext(ctx)
}

func (u userVisitRecord) TableName() string { return u.userVisitRecordDo.TableName() }

func (u userVisitRecord) Alias() string { return u.userVisitRecordDo.Alias() }

func (u userVisitRecord) Columns(cols ...field.Expr) gen.Columns {
	return u.userVisitRecordDo.Columns(cols...)
}

func (u *userVisitRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userVisitRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["date"] = u.Date
	u.fieldMap["uid"] = u.UID
	u.fieldMap["visit_type"] = u.VisitType
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userVisitRecord) clone(db *gorm.DB) userVisitRecord {
	u.userVisitRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userVisitRecord) replaceDB(db *gorm.DB) userVisitRecord {
	u.userVisitRecordDo.ReplaceDB(db)
	return u
}

type userVisitRecordDo struct{ gen.DO }

type IUserVisitRecordDo interface {
	gen.SubQuery
	Debug() IUserVisitRecordDo
	WithContext(ctx context.Context) IUserVisitRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserVisitRecordDo
	WriteDB() IUserVisitRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserVisitRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserVisitRecordDo
	Not(conds ...gen.Condition) IUserVisitRecordDo
	Or(conds ...gen.Condition) IUserVisitRecordDo
	Select(conds ...field.Expr) IUserVisitRecordDo
	Where(conds ...gen.Condition) IUserVisitRecordDo
	Order(conds ...field.Expr) IUserVisitRecordDo
	Distinct(cols ...field.Expr) IUserVisitRecordDo
	Omit(cols ...field.Expr) IUserVisitRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserVisitRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserVisitRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserVisitRecordDo
	Group(cols ...field.Expr) IUserVisitRecordDo
	Having(conds ...gen.Condition) IUserVisitRecordDo
	Limit(limit int) IUserVisitRecordDo
	Offset(offset int) IUserVisitRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserVisitRecordDo
	Unscoped() IUserVisitRecordDo
	Create(values ...*model.UserVisitRecord) error
	CreateInBatches(values []*model.UserVisitRecord, batchSize int) error
	Save(values ...*model.UserVisitRecord) error
	First() (*model.UserVisitRecord, error)
	Take() (*model.UserVisitRecord, error)
	Last() (*model.UserVisitRecord, error)
	Find() ([]*model.UserVisitRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVisitRecord, err error)
	FindInBatches(result *[]*model.UserVisitRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserVisitRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserVisitRecordDo
	Assign(attrs ...field.AssignExpr) IUserVisitRecordDo
	Joins(fields ...field.RelationField) IUserVisitRecordDo
	Preload(fields ...field.RelationField) IUserVisitRecordDo
	FirstOrInit() (*model.UserVisitRecord, error)
	FirstOrCreate() (*model.UserVisitRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserVisitRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserVisitRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userVisitRecordDo) Debug() IUserVisitRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userVisitRecordDo) WithContext(ctx context.Context) IUserVisitRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userVisitRecordDo) ReadDB() IUserVisitRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userVisitRecordDo) WriteDB() IUserVisitRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userVisitRecordDo) Session(config *gorm.Session) IUserVisitRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userVisitRecordDo) Clauses(conds ...clause.Expression) IUserVisitRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userVisitRecordDo) Returning(value interface{}, columns ...string) IUserVisitRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userVisitRecordDo) Not(conds ...gen.Condition) IUserVisitRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userVisitRecordDo) Or(conds ...gen.Condition) IUserVisitRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userVisitRecordDo) Select(conds ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userVisitRecordDo) Where(conds ...gen.Condition) IUserVisitRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userVisitRecordDo) Order(conds ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userVisitRecordDo) Distinct(cols ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userVisitRecordDo) Omit(cols ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userVisitRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userVisitRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userVisitRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userVisitRecordDo) Group(cols ...field.Expr) IUserVisitRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userVisitRecordDo) Having(conds ...gen.Condition) IUserVisitRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userVisitRecordDo) Limit(limit int) IUserVisitRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userVisitRecordDo) Offset(offset int) IUserVisitRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userVisitRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserVisitRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userVisitRecordDo) Unscoped() IUserVisitRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userVisitRecordDo) Create(values ...*model.UserVisitRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userVisitRecordDo) CreateInBatches(values []*model.UserVisitRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userVisitRecordDo) Save(values ...*model.UserVisitRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userVisitRecordDo) First() (*model.UserVisitRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVisitRecord), nil
	}
}

func (u userVisitRecordDo) Take() (*model.UserVisitRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVisitRecord), nil
	}
}

func (u userVisitRecordDo) Last() (*model.UserVisitRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVisitRecord), nil
	}
}

func (u userVisitRecordDo) Find() ([]*model.UserVisitRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserVisitRecord), err
}

func (u userVisitRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserVisitRecord, err error) {
	buf := make([]*model.UserVisitRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userVisitRecordDo) FindInBatches(result *[]*model.UserVisitRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userVisitRecordDo) Attrs(attrs ...field.AssignExpr) IUserVisitRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userVisitRecordDo) Assign(attrs ...field.AssignExpr) IUserVisitRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userVisitRecordDo) Joins(fields ...field.RelationField) IUserVisitRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userVisitRecordDo) Preload(fields ...field.RelationField) IUserVisitRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userVisitRecordDo) FirstOrInit() (*model.UserVisitRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVisitRecord), nil
	}
}

func (u userVisitRecordDo) FirstOrCreate() (*model.UserVisitRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserVisitRecord), nil
	}
}

func (u userVisitRecordDo) FindByPage(offset int, limit int) (result []*model.UserVisitRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userVisitRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userVisitRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userVisitRecordDo) Delete(models ...*model.UserVisitRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userVisitRecordDo) withDO(do gen.Dao) *userVisitRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
