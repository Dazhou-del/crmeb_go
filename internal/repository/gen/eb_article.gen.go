// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbArticle(db *gorm.DB, opts ...gen.DOOption) ebArticle {
	_ebArticle := ebArticle{}

	_ebArticle.ebArticleDo.UseDB(db, opts...)
	_ebArticle.ebArticleDo.UseModel(&model.EbArticle{})

	tableName := _ebArticle.ebArticleDo.TableName()
	_ebArticle.ALL = field.NewAsterisk(tableName)
	_ebArticle.ID = field.NewInt32(tableName, "id")
	_ebArticle.Cid = field.NewString(tableName, "cid")
	_ebArticle.Title = field.NewString(tableName, "title")
	_ebArticle.Author = field.NewString(tableName, "author")
	_ebArticle.ImageInput = field.NewString(tableName, "image_input")
	_ebArticle.Synopsis = field.NewString(tableName, "synopsis")
	_ebArticle.ShareTitle = field.NewString(tableName, "share_title")
	_ebArticle.ShareSynopsis = field.NewString(tableName, "share_synopsis")
	_ebArticle.Visit = field.NewString(tableName, "visit")
	_ebArticle.Sort = field.NewInt32(tableName, "sort")
	_ebArticle.URL = field.NewString(tableName, "url")
	_ebArticle.MediaID = field.NewString(tableName, "media_id")
	_ebArticle.Status = field.NewInt32(tableName, "status")
	_ebArticle.Hide = field.NewInt32(tableName, "hide")
	_ebArticle.AdminID = field.NewInt32(tableName, "admin_id")
	_ebArticle.MerID = field.NewInt32(tableName, "mer_id")
	_ebArticle.ProductID = field.NewInt32(tableName, "product_id")
	_ebArticle.IsHot = field.NewInt32(tableName, "is_hot")
	_ebArticle.IsBanner = field.NewInt32(tableName, "is_banner")
	_ebArticle.Content = field.NewString(tableName, "content")
	_ebArticle.CreateTime = field.NewTime(tableName, "create_time")
	_ebArticle.UpdateTime = field.NewTime(tableName, "update_time")

	_ebArticle.fillFieldMap()

	return _ebArticle
}

// ebArticle 文章管理表
type ebArticle struct {
	ebArticleDo ebArticleDo

	ALL           field.Asterisk
	ID            field.Int32  // 文章管理ID
	Cid           field.String // 分类id
	Title         field.String // 文章标题
	Author        field.String // 文章作者
	ImageInput    field.String // 文章图片
	Synopsis      field.String // 文章简介
	ShareTitle    field.String // 文章分享标题
	ShareSynopsis field.String // 文章分享简介
	Visit         field.String // 浏览次数
	Sort          field.Int32  // 排序
	URL           field.String // 原文链接
	MediaID       field.String // 微信素材id
	Status        field.Int32  // 状态
	Hide          field.Int32  // 是否隐藏
	AdminID       field.Int32  // 管理员id
	MerID         field.Int32  // 商户id
	ProductID     field.Int32  // 商品关联id
	IsHot         field.Int32  // 是否热门(小程序)
	IsBanner      field.Int32  // 是否轮播图(小程序)
	Content       field.String // 文章内容
	CreateTime    field.Time   // 创建时间
	UpdateTime    field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebArticle) Table(newTableName string) *ebArticle {
	e.ebArticleDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebArticle) As(alias string) *ebArticle {
	e.ebArticleDo.DO = *(e.ebArticleDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebArticle) updateTableName(table string) *ebArticle {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Cid = field.NewString(table, "cid")
	e.Title = field.NewString(table, "title")
	e.Author = field.NewString(table, "author")
	e.ImageInput = field.NewString(table, "image_input")
	e.Synopsis = field.NewString(table, "synopsis")
	e.ShareTitle = field.NewString(table, "share_title")
	e.ShareSynopsis = field.NewString(table, "share_synopsis")
	e.Visit = field.NewString(table, "visit")
	e.Sort = field.NewInt32(table, "sort")
	e.URL = field.NewString(table, "url")
	e.MediaID = field.NewString(table, "media_id")
	e.Status = field.NewInt32(table, "status")
	e.Hide = field.NewInt32(table, "hide")
	e.AdminID = field.NewInt32(table, "admin_id")
	e.MerID = field.NewInt32(table, "mer_id")
	e.ProductID = field.NewInt32(table, "product_id")
	e.IsHot = field.NewInt32(table, "is_hot")
	e.IsBanner = field.NewInt32(table, "is_banner")
	e.Content = field.NewString(table, "content")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebArticle) WithContext(ctx context.Context) IEbArticleDo {
	return e.ebArticleDo.WithContext(ctx)
}

func (e ebArticle) TableName() string { return e.ebArticleDo.TableName() }

func (e ebArticle) Alias() string { return e.ebArticleDo.Alias() }

func (e ebArticle) Columns(cols ...field.Expr) gen.Columns { return e.ebArticleDo.Columns(cols...) }

func (e *ebArticle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebArticle) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 22)
	e.fieldMap["id"] = e.ID
	e.fieldMap["cid"] = e.Cid
	e.fieldMap["title"] = e.Title
	e.fieldMap["author"] = e.Author
	e.fieldMap["image_input"] = e.ImageInput
	e.fieldMap["synopsis"] = e.Synopsis
	e.fieldMap["share_title"] = e.ShareTitle
	e.fieldMap["share_synopsis"] = e.ShareSynopsis
	e.fieldMap["visit"] = e.Visit
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["url"] = e.URL
	e.fieldMap["media_id"] = e.MediaID
	e.fieldMap["status"] = e.Status
	e.fieldMap["hide"] = e.Hide
	e.fieldMap["admin_id"] = e.AdminID
	e.fieldMap["mer_id"] = e.MerID
	e.fieldMap["product_id"] = e.ProductID
	e.fieldMap["is_hot"] = e.IsHot
	e.fieldMap["is_banner"] = e.IsBanner
	e.fieldMap["content"] = e.Content
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebArticle) clone(db *gorm.DB) ebArticle {
	e.ebArticleDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebArticle) replaceDB(db *gorm.DB) ebArticle {
	e.ebArticleDo.ReplaceDB(db)
	return e
}

type ebArticleDo struct{ gen.DO }

type IEbArticleDo interface {
	gen.SubQuery
	Debug() IEbArticleDo
	WithContext(ctx context.Context) IEbArticleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbArticleDo
	WriteDB() IEbArticleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbArticleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbArticleDo
	Not(conds ...gen.Condition) IEbArticleDo
	Or(conds ...gen.Condition) IEbArticleDo
	Select(conds ...field.Expr) IEbArticleDo
	Where(conds ...gen.Condition) IEbArticleDo
	Order(conds ...field.Expr) IEbArticleDo
	Distinct(cols ...field.Expr) IEbArticleDo
	Omit(cols ...field.Expr) IEbArticleDo
	Join(table schema.Tabler, on ...field.Expr) IEbArticleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbArticleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbArticleDo
	Group(cols ...field.Expr) IEbArticleDo
	Having(conds ...gen.Condition) IEbArticleDo
	Limit(limit int) IEbArticleDo
	Offset(offset int) IEbArticleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbArticleDo
	Unscoped() IEbArticleDo
	Create(values ...*model.EbArticle) error
	CreateInBatches(values []*model.EbArticle, batchSize int) error
	Save(values ...*model.EbArticle) error
	First() (*model.EbArticle, error)
	Take() (*model.EbArticle, error)
	Last() (*model.EbArticle, error)
	Find() ([]*model.EbArticle, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbArticle, err error)
	FindInBatches(result *[]*model.EbArticle, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbArticle) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbArticleDo
	Assign(attrs ...field.AssignExpr) IEbArticleDo
	Joins(fields ...field.RelationField) IEbArticleDo
	Preload(fields ...field.RelationField) IEbArticleDo
	FirstOrInit() (*model.EbArticle, error)
	FirstOrCreate() (*model.EbArticle, error)
	FindByPage(offset int, limit int) (result []*model.EbArticle, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbArticleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebArticleDo) Debug() IEbArticleDo {
	return e.withDO(e.DO.Debug())
}

func (e ebArticleDo) WithContext(ctx context.Context) IEbArticleDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebArticleDo) ReadDB() IEbArticleDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebArticleDo) WriteDB() IEbArticleDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebArticleDo) Session(config *gorm.Session) IEbArticleDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebArticleDo) Clauses(conds ...clause.Expression) IEbArticleDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebArticleDo) Returning(value interface{}, columns ...string) IEbArticleDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebArticleDo) Not(conds ...gen.Condition) IEbArticleDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebArticleDo) Or(conds ...gen.Condition) IEbArticleDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebArticleDo) Select(conds ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebArticleDo) Where(conds ...gen.Condition) IEbArticleDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebArticleDo) Order(conds ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebArticleDo) Distinct(cols ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebArticleDo) Omit(cols ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebArticleDo) Join(table schema.Tabler, on ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebArticleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebArticleDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebArticleDo) Group(cols ...field.Expr) IEbArticleDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebArticleDo) Having(conds ...gen.Condition) IEbArticleDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebArticleDo) Limit(limit int) IEbArticleDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebArticleDo) Offset(offset int) IEbArticleDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebArticleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbArticleDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebArticleDo) Unscoped() IEbArticleDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebArticleDo) Create(values ...*model.EbArticle) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebArticleDo) CreateInBatches(values []*model.EbArticle, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebArticleDo) Save(values ...*model.EbArticle) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebArticleDo) First() (*model.EbArticle, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbArticle), nil
	}
}

func (e ebArticleDo) Take() (*model.EbArticle, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbArticle), nil
	}
}

func (e ebArticleDo) Last() (*model.EbArticle, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbArticle), nil
	}
}

func (e ebArticleDo) Find() ([]*model.EbArticle, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbArticle), err
}

func (e ebArticleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbArticle, err error) {
	buf := make([]*model.EbArticle, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebArticleDo) FindInBatches(result *[]*model.EbArticle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebArticleDo) Attrs(attrs ...field.AssignExpr) IEbArticleDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebArticleDo) Assign(attrs ...field.AssignExpr) IEbArticleDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebArticleDo) Joins(fields ...field.RelationField) IEbArticleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebArticleDo) Preload(fields ...field.RelationField) IEbArticleDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebArticleDo) FirstOrInit() (*model.EbArticle, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbArticle), nil
	}
}

func (e ebArticleDo) FirstOrCreate() (*model.EbArticle, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbArticle), nil
	}
}

func (e ebArticleDo) FindByPage(offset int, limit int) (result []*model.EbArticle, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebArticleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebArticleDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebArticleDo) Delete(models ...*model.EbArticle) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebArticleDo) withDO(do gen.Dao) *ebArticleDo {
	e.DO = *do.(*gen.DO)
	return e
}
