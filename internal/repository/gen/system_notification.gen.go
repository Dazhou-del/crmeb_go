// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSystemNotification(db *gorm.DB, opts ...gen.DOOption) systemNotification {
	_systemNotification := systemNotification{}

	_systemNotification.systemNotificationDo.UseDB(db, opts...)
	_systemNotification.systemNotificationDo.UseModel(&model.SystemNotification{})

	tableName := _systemNotification.systemNotificationDo.TableName()
	_systemNotification.ALL = field.NewAsterisk(tableName)
	_systemNotification.ID = field.NewInt64(tableName, "id")
	_systemNotification.Mark = field.NewString(tableName, "mark")
	_systemNotification.Type = field.NewString(tableName, "type")
	_systemNotification.Description = field.NewString(tableName, "description")
	_systemNotification.IsWechat = field.NewInt64(tableName, "is_wechat")
	_systemNotification.WechatID = field.NewInt64(tableName, "wechat_id")
	_systemNotification.IsRoutine = field.NewInt64(tableName, "is_routine")
	_systemNotification.RoutineID = field.NewInt64(tableName, "routine_id")
	_systemNotification.IsSms = field.NewInt64(tableName, "is_sms")
	_systemNotification.SmsID = field.NewInt64(tableName, "sms_id")
	_systemNotification.SendType = field.NewInt64(tableName, "send_type")
	_systemNotification.CreatedAt = field.NewInt64(tableName, "created_at")
	_systemNotification.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_systemNotification.DeletedAt = field.NewField(tableName, "deleted_at")

	_systemNotification.fillFieldMap()

	return _systemNotification
}

// systemNotification 通知设置表
type systemNotification struct {
	systemNotificationDo systemNotificationDo

	ALL         field.Asterisk
	ID          field.Int64  // id
	Mark        field.String // 标识
	Type        field.String // 通知类型
	Description field.String // 通知场景说明
	IsWechat    field.Int64  // 公众号模板消息（0：不存在，1：开启，2：关闭）
	WechatID    field.Int64  // 模板消息id
	IsRoutine   field.Int64  // 小程序订阅消息（0：不存在，1：开启，2：关闭）
	RoutineID   field.Int64  // 订阅消息id
	IsSms       field.Int64  // 发送短信（0：不存在，1：开启，2：关闭）
	SmsID       field.Int64  // 短信id
	SendType    field.Int64  // 发送类型（1：用户，2：管理员）
	CreatedAt   field.Int64
	UpdatedAt   field.Int64
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (s systemNotification) Table(newTableName string) *systemNotification {
	s.systemNotificationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemNotification) As(alias string) *systemNotification {
	s.systemNotificationDo.DO = *(s.systemNotificationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemNotification) updateTableName(table string) *systemNotification {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Mark = field.NewString(table, "mark")
	s.Type = field.NewString(table, "type")
	s.Description = field.NewString(table, "description")
	s.IsWechat = field.NewInt64(table, "is_wechat")
	s.WechatID = field.NewInt64(table, "wechat_id")
	s.IsRoutine = field.NewInt64(table, "is_routine")
	s.RoutineID = field.NewInt64(table, "routine_id")
	s.IsSms = field.NewInt64(table, "is_sms")
	s.SmsID = field.NewInt64(table, "sms_id")
	s.SendType = field.NewInt64(table, "send_type")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *systemNotification) WithContext(ctx context.Context) ISystemNotificationDo {
	return s.systemNotificationDo.WithContext(ctx)
}

func (s systemNotification) TableName() string { return s.systemNotificationDo.TableName() }

func (s systemNotification) Alias() string { return s.systemNotificationDo.Alias() }

func (s systemNotification) Columns(cols ...field.Expr) gen.Columns {
	return s.systemNotificationDo.Columns(cols...)
}

func (s *systemNotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemNotification) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["mark"] = s.Mark
	s.fieldMap["type"] = s.Type
	s.fieldMap["description"] = s.Description
	s.fieldMap["is_wechat"] = s.IsWechat
	s.fieldMap["wechat_id"] = s.WechatID
	s.fieldMap["is_routine"] = s.IsRoutine
	s.fieldMap["routine_id"] = s.RoutineID
	s.fieldMap["is_sms"] = s.IsSms
	s.fieldMap["sms_id"] = s.SmsID
	s.fieldMap["send_type"] = s.SendType
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s systemNotification) clone(db *gorm.DB) systemNotification {
	s.systemNotificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemNotification) replaceDB(db *gorm.DB) systemNotification {
	s.systemNotificationDo.ReplaceDB(db)
	return s
}

type systemNotificationDo struct{ gen.DO }

type ISystemNotificationDo interface {
	gen.SubQuery
	Debug() ISystemNotificationDo
	WithContext(ctx context.Context) ISystemNotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISystemNotificationDo
	WriteDB() ISystemNotificationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISystemNotificationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISystemNotificationDo
	Not(conds ...gen.Condition) ISystemNotificationDo
	Or(conds ...gen.Condition) ISystemNotificationDo
	Select(conds ...field.Expr) ISystemNotificationDo
	Where(conds ...gen.Condition) ISystemNotificationDo
	Order(conds ...field.Expr) ISystemNotificationDo
	Distinct(cols ...field.Expr) ISystemNotificationDo
	Omit(cols ...field.Expr) ISystemNotificationDo
	Join(table schema.Tabler, on ...field.Expr) ISystemNotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISystemNotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISystemNotificationDo
	Group(cols ...field.Expr) ISystemNotificationDo
	Having(conds ...gen.Condition) ISystemNotificationDo
	Limit(limit int) ISystemNotificationDo
	Offset(offset int) ISystemNotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemNotificationDo
	Unscoped() ISystemNotificationDo
	Create(values ...*model.SystemNotification) error
	CreateInBatches(values []*model.SystemNotification, batchSize int) error
	Save(values ...*model.SystemNotification) error
	First() (*model.SystemNotification, error)
	Take() (*model.SystemNotification, error)
	Last() (*model.SystemNotification, error)
	Find() ([]*model.SystemNotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemNotification, err error)
	FindInBatches(result *[]*model.SystemNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SystemNotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISystemNotificationDo
	Assign(attrs ...field.AssignExpr) ISystemNotificationDo
	Joins(fields ...field.RelationField) ISystemNotificationDo
	Preload(fields ...field.RelationField) ISystemNotificationDo
	FirstOrInit() (*model.SystemNotification, error)
	FirstOrCreate() (*model.SystemNotification, error)
	FindByPage(offset int, limit int) (result []*model.SystemNotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISystemNotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s systemNotificationDo) Debug() ISystemNotificationDo {
	return s.withDO(s.DO.Debug())
}

func (s systemNotificationDo) WithContext(ctx context.Context) ISystemNotificationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemNotificationDo) ReadDB() ISystemNotificationDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemNotificationDo) WriteDB() ISystemNotificationDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemNotificationDo) Session(config *gorm.Session) ISystemNotificationDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemNotificationDo) Clauses(conds ...clause.Expression) ISystemNotificationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemNotificationDo) Returning(value interface{}, columns ...string) ISystemNotificationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemNotificationDo) Not(conds ...gen.Condition) ISystemNotificationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemNotificationDo) Or(conds ...gen.Condition) ISystemNotificationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemNotificationDo) Select(conds ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemNotificationDo) Where(conds ...gen.Condition) ISystemNotificationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemNotificationDo) Order(conds ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemNotificationDo) Distinct(cols ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemNotificationDo) Omit(cols ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemNotificationDo) Join(table schema.Tabler, on ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemNotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemNotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemNotificationDo) Group(cols ...field.Expr) ISystemNotificationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemNotificationDo) Having(conds ...gen.Condition) ISystemNotificationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemNotificationDo) Limit(limit int) ISystemNotificationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemNotificationDo) Offset(offset int) ISystemNotificationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemNotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISystemNotificationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemNotificationDo) Unscoped() ISystemNotificationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemNotificationDo) Create(values ...*model.SystemNotification) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemNotificationDo) CreateInBatches(values []*model.SystemNotification, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemNotificationDo) Save(values ...*model.SystemNotification) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemNotificationDo) First() (*model.SystemNotification, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotification), nil
	}
}

func (s systemNotificationDo) Take() (*model.SystemNotification, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotification), nil
	}
}

func (s systemNotificationDo) Last() (*model.SystemNotification, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotification), nil
	}
}

func (s systemNotificationDo) Find() ([]*model.SystemNotification, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemNotification), err
}

func (s systemNotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemNotification, err error) {
	buf := make([]*model.SystemNotification, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemNotificationDo) FindInBatches(result *[]*model.SystemNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemNotificationDo) Attrs(attrs ...field.AssignExpr) ISystemNotificationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemNotificationDo) Assign(attrs ...field.AssignExpr) ISystemNotificationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemNotificationDo) Joins(fields ...field.RelationField) ISystemNotificationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemNotificationDo) Preload(fields ...field.RelationField) ISystemNotificationDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemNotificationDo) FirstOrInit() (*model.SystemNotification, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotification), nil
	}
}

func (s systemNotificationDo) FirstOrCreate() (*model.SystemNotification, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemNotification), nil
	}
}

func (s systemNotificationDo) FindByPage(offset int, limit int) (result []*model.SystemNotification, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemNotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemNotificationDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemNotificationDo) Delete(models ...*model.SystemNotification) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemNotificationDo) withDO(do gen.Dao) *systemNotificationDo {
	s.DO = *do.(*gen.DO)
	return s
}
