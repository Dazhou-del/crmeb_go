// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newStoreProductCate(db *gorm.DB, opts ...gen.DOOption) storeProductCate {
	_storeProductCate := storeProductCate{}

	_storeProductCate.storeProductCateDo.UseDB(db, opts...)
	_storeProductCate.storeProductCateDo.UseModel(&model.StoreProductCate{})

	tableName := _storeProductCate.storeProductCateDo.TableName()
	_storeProductCate.ALL = field.NewAsterisk(tableName)
	_storeProductCate.ID = field.NewInt64(tableName, "id")
	_storeProductCate.ProductID = field.NewInt64(tableName, "product_id")
	_storeProductCate.CateID = field.NewInt64(tableName, "cate_id")
	_storeProductCate.AddTime = field.NewInt64(tableName, "add_time")
	_storeProductCate.CreatedAt = field.NewInt64(tableName, "created_at")
	_storeProductCate.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_storeProductCate.DeletedAt = field.NewField(tableName, "deleted_at")

	_storeProductCate.fillFieldMap()

	return _storeProductCate
}

// storeProductCate 商品分类辅助表
type storeProductCate struct {
	storeProductCateDo storeProductCateDo

	ALL       field.Asterisk
	ID        field.Int64
	ProductID field.Int64 // 商品id
	CateID    field.Int64 // 分类id
	AddTime   field.Int64 // 添加时间
	CreatedAt field.Int64 // 创建时间
	UpdatedAt field.Int64 // 修改时间
	DeletedAt field.Field // 是否删除

	fieldMap map[string]field.Expr
}

func (s storeProductCate) Table(newTableName string) *storeProductCate {
	s.storeProductCateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storeProductCate) As(alias string) *storeProductCate {
	s.storeProductCateDo.DO = *(s.storeProductCateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storeProductCate) updateTableName(table string) *storeProductCate {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.ProductID = field.NewInt64(table, "product_id")
	s.CateID = field.NewInt64(table, "cate_id")
	s.AddTime = field.NewInt64(table, "add_time")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *storeProductCate) WithContext(ctx context.Context) IStoreProductCateDo {
	return s.storeProductCateDo.WithContext(ctx)
}

func (s storeProductCate) TableName() string { return s.storeProductCateDo.TableName() }

func (s storeProductCate) Alias() string { return s.storeProductCateDo.Alias() }

func (s storeProductCate) Columns(cols ...field.Expr) gen.Columns {
	return s.storeProductCateDo.Columns(cols...)
}

func (s *storeProductCate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storeProductCate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["product_id"] = s.ProductID
	s.fieldMap["cate_id"] = s.CateID
	s.fieldMap["add_time"] = s.AddTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s storeProductCate) clone(db *gorm.DB) storeProductCate {
	s.storeProductCateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storeProductCate) replaceDB(db *gorm.DB) storeProductCate {
	s.storeProductCateDo.ReplaceDB(db)
	return s
}

type storeProductCateDo struct{ gen.DO }

type IStoreProductCateDo interface {
	gen.SubQuery
	Debug() IStoreProductCateDo
	WithContext(ctx context.Context) IStoreProductCateDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStoreProductCateDo
	WriteDB() IStoreProductCateDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStoreProductCateDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStoreProductCateDo
	Not(conds ...gen.Condition) IStoreProductCateDo
	Or(conds ...gen.Condition) IStoreProductCateDo
	Select(conds ...field.Expr) IStoreProductCateDo
	Where(conds ...gen.Condition) IStoreProductCateDo
	Order(conds ...field.Expr) IStoreProductCateDo
	Distinct(cols ...field.Expr) IStoreProductCateDo
	Omit(cols ...field.Expr) IStoreProductCateDo
	Join(table schema.Tabler, on ...field.Expr) IStoreProductCateDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStoreProductCateDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStoreProductCateDo
	Group(cols ...field.Expr) IStoreProductCateDo
	Having(conds ...gen.Condition) IStoreProductCateDo
	Limit(limit int) IStoreProductCateDo
	Offset(offset int) IStoreProductCateDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreProductCateDo
	Unscoped() IStoreProductCateDo
	Create(values ...*model.StoreProductCate) error
	CreateInBatches(values []*model.StoreProductCate, batchSize int) error
	Save(values ...*model.StoreProductCate) error
	First() (*model.StoreProductCate, error)
	Take() (*model.StoreProductCate, error)
	Last() (*model.StoreProductCate, error)
	Find() ([]*model.StoreProductCate, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreProductCate, err error)
	FindInBatches(result *[]*model.StoreProductCate, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StoreProductCate) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStoreProductCateDo
	Assign(attrs ...field.AssignExpr) IStoreProductCateDo
	Joins(fields ...field.RelationField) IStoreProductCateDo
	Preload(fields ...field.RelationField) IStoreProductCateDo
	FirstOrInit() (*model.StoreProductCate, error)
	FirstOrCreate() (*model.StoreProductCate, error)
	FindByPage(offset int, limit int) (result []*model.StoreProductCate, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStoreProductCateDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storeProductCateDo) Debug() IStoreProductCateDo {
	return s.withDO(s.DO.Debug())
}

func (s storeProductCateDo) WithContext(ctx context.Context) IStoreProductCateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storeProductCateDo) ReadDB() IStoreProductCateDo {
	return s.Clauses(dbresolver.Read)
}

func (s storeProductCateDo) WriteDB() IStoreProductCateDo {
	return s.Clauses(dbresolver.Write)
}

func (s storeProductCateDo) Session(config *gorm.Session) IStoreProductCateDo {
	return s.withDO(s.DO.Session(config))
}

func (s storeProductCateDo) Clauses(conds ...clause.Expression) IStoreProductCateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storeProductCateDo) Returning(value interface{}, columns ...string) IStoreProductCateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storeProductCateDo) Not(conds ...gen.Condition) IStoreProductCateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storeProductCateDo) Or(conds ...gen.Condition) IStoreProductCateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storeProductCateDo) Select(conds ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storeProductCateDo) Where(conds ...gen.Condition) IStoreProductCateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storeProductCateDo) Order(conds ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storeProductCateDo) Distinct(cols ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storeProductCateDo) Omit(cols ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storeProductCateDo) Join(table schema.Tabler, on ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storeProductCateDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storeProductCateDo) RightJoin(table schema.Tabler, on ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storeProductCateDo) Group(cols ...field.Expr) IStoreProductCateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storeProductCateDo) Having(conds ...gen.Condition) IStoreProductCateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storeProductCateDo) Limit(limit int) IStoreProductCateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storeProductCateDo) Offset(offset int) IStoreProductCateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storeProductCateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStoreProductCateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storeProductCateDo) Unscoped() IStoreProductCateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storeProductCateDo) Create(values ...*model.StoreProductCate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storeProductCateDo) CreateInBatches(values []*model.StoreProductCate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storeProductCateDo) Save(values ...*model.StoreProductCate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storeProductCateDo) First() (*model.StoreProductCate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCate), nil
	}
}

func (s storeProductCateDo) Take() (*model.StoreProductCate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCate), nil
	}
}

func (s storeProductCateDo) Last() (*model.StoreProductCate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCate), nil
	}
}

func (s storeProductCateDo) Find() ([]*model.StoreProductCate, error) {
	result, err := s.DO.Find()
	return result.([]*model.StoreProductCate), err
}

func (s storeProductCateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StoreProductCate, err error) {
	buf := make([]*model.StoreProductCate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storeProductCateDo) FindInBatches(result *[]*model.StoreProductCate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storeProductCateDo) Attrs(attrs ...field.AssignExpr) IStoreProductCateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storeProductCateDo) Assign(attrs ...field.AssignExpr) IStoreProductCateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storeProductCateDo) Joins(fields ...field.RelationField) IStoreProductCateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storeProductCateDo) Preload(fields ...field.RelationField) IStoreProductCateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storeProductCateDo) FirstOrInit() (*model.StoreProductCate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCate), nil
	}
}

func (s storeProductCateDo) FirstOrCreate() (*model.StoreProductCate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StoreProductCate), nil
	}
}

func (s storeProductCateDo) FindByPage(offset int, limit int) (result []*model.StoreProductCate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storeProductCateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storeProductCateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storeProductCateDo) Delete(models ...*model.StoreProductCate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storeProductCateDo) withDO(do gen.Dao) *storeProductCateDo {
	s.DO = *do.(*gen.DO)
	return s
}
