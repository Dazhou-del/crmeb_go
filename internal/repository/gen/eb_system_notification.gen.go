// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemNotification(db *gorm.DB, opts ...gen.DOOption) ebSystemNotification {
	_ebSystemNotification := ebSystemNotification{}

	_ebSystemNotification.ebSystemNotificationDo.UseDB(db, opts...)
	_ebSystemNotification.ebSystemNotificationDo.UseModel(&model.EbSystemNotification{})

	tableName := _ebSystemNotification.ebSystemNotificationDo.TableName()
	_ebSystemNotification.ALL = field.NewAsterisk(tableName)
	_ebSystemNotification.ID = field.NewInt32(tableName, "id")
	_ebSystemNotification.Mark = field.NewString(tableName, "mark")
	_ebSystemNotification.Type = field.NewString(tableName, "type")
	_ebSystemNotification.Description = field.NewString(tableName, "description")
	_ebSystemNotification.IsWechat = field.NewInt32(tableName, "is_wechat")
	_ebSystemNotification.WechatID = field.NewInt32(tableName, "wechat_id")
	_ebSystemNotification.IsRoutine = field.NewInt32(tableName, "is_routine")
	_ebSystemNotification.RoutineID = field.NewInt32(tableName, "routine_id")
	_ebSystemNotification.IsSms = field.NewInt32(tableName, "is_sms")
	_ebSystemNotification.SmsID = field.NewInt32(tableName, "sms_id")
	_ebSystemNotification.SendType = field.NewInt32(tableName, "send_type")
	_ebSystemNotification.CreateTime = field.NewTime(tableName, "create_time")

	_ebSystemNotification.fillFieldMap()

	return _ebSystemNotification
}

// ebSystemNotification 通知设置表
type ebSystemNotification struct {
	ebSystemNotificationDo ebSystemNotificationDo

	ALL         field.Asterisk
	ID          field.Int32  // id
	Mark        field.String // 标识
	Type        field.String // 通知类型
	Description field.String // 通知场景说明
	IsWechat    field.Int32  // 公众号模板消息（0：不存在，1：开启，2：关闭）
	WechatID    field.Int32  // 模板消息id
	IsRoutine   field.Int32  // 小程序订阅消息（0：不存在，1：开启，2：关闭）
	RoutineID   field.Int32  // 订阅消息id
	IsSms       field.Int32  // 发送短信（0：不存在，1：开启，2：关闭）
	SmsID       field.Int32  // 短信id
	SendType    field.Int32  // 发送类型（1：用户，2：管理员）
	CreateTime  field.Time   // 创建时间

	fieldMap map[string]field.Expr
}

func (e ebSystemNotification) Table(newTableName string) *ebSystemNotification {
	e.ebSystemNotificationDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemNotification) As(alias string) *ebSystemNotification {
	e.ebSystemNotificationDo.DO = *(e.ebSystemNotificationDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemNotification) updateTableName(table string) *ebSystemNotification {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.Mark = field.NewString(table, "mark")
	e.Type = field.NewString(table, "type")
	e.Description = field.NewString(table, "description")
	e.IsWechat = field.NewInt32(table, "is_wechat")
	e.WechatID = field.NewInt32(table, "wechat_id")
	e.IsRoutine = field.NewInt32(table, "is_routine")
	e.RoutineID = field.NewInt32(table, "routine_id")
	e.IsSms = field.NewInt32(table, "is_sms")
	e.SmsID = field.NewInt32(table, "sms_id")
	e.SendType = field.NewInt32(table, "send_type")
	e.CreateTime = field.NewTime(table, "create_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemNotification) WithContext(ctx context.Context) IEbSystemNotificationDo {
	return e.ebSystemNotificationDo.WithContext(ctx)
}

func (e ebSystemNotification) TableName() string { return e.ebSystemNotificationDo.TableName() }

func (e ebSystemNotification) Alias() string { return e.ebSystemNotificationDo.Alias() }

func (e ebSystemNotification) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemNotificationDo.Columns(cols...)
}

func (e *ebSystemNotification) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemNotification) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["mark"] = e.Mark
	e.fieldMap["type"] = e.Type
	e.fieldMap["description"] = e.Description
	e.fieldMap["is_wechat"] = e.IsWechat
	e.fieldMap["wechat_id"] = e.WechatID
	e.fieldMap["is_routine"] = e.IsRoutine
	e.fieldMap["routine_id"] = e.RoutineID
	e.fieldMap["is_sms"] = e.IsSms
	e.fieldMap["sms_id"] = e.SmsID
	e.fieldMap["send_type"] = e.SendType
	e.fieldMap["create_time"] = e.CreateTime
}

func (e ebSystemNotification) clone(db *gorm.DB) ebSystemNotification {
	e.ebSystemNotificationDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemNotification) replaceDB(db *gorm.DB) ebSystemNotification {
	e.ebSystemNotificationDo.ReplaceDB(db)
	return e
}

type ebSystemNotificationDo struct{ gen.DO }

type IEbSystemNotificationDo interface {
	gen.SubQuery
	Debug() IEbSystemNotificationDo
	WithContext(ctx context.Context) IEbSystemNotificationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemNotificationDo
	WriteDB() IEbSystemNotificationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemNotificationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemNotificationDo
	Not(conds ...gen.Condition) IEbSystemNotificationDo
	Or(conds ...gen.Condition) IEbSystemNotificationDo
	Select(conds ...field.Expr) IEbSystemNotificationDo
	Where(conds ...gen.Condition) IEbSystemNotificationDo
	Order(conds ...field.Expr) IEbSystemNotificationDo
	Distinct(cols ...field.Expr) IEbSystemNotificationDo
	Omit(cols ...field.Expr) IEbSystemNotificationDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemNotificationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemNotificationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemNotificationDo
	Group(cols ...field.Expr) IEbSystemNotificationDo
	Having(conds ...gen.Condition) IEbSystemNotificationDo
	Limit(limit int) IEbSystemNotificationDo
	Offset(offset int) IEbSystemNotificationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemNotificationDo
	Unscoped() IEbSystemNotificationDo
	Create(values ...*model.EbSystemNotification) error
	CreateInBatches(values []*model.EbSystemNotification, batchSize int) error
	Save(values ...*model.EbSystemNotification) error
	First() (*model.EbSystemNotification, error)
	Take() (*model.EbSystemNotification, error)
	Last() (*model.EbSystemNotification, error)
	Find() ([]*model.EbSystemNotification, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemNotification, err error)
	FindInBatches(result *[]*model.EbSystemNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemNotification) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemNotificationDo
	Assign(attrs ...field.AssignExpr) IEbSystemNotificationDo
	Joins(fields ...field.RelationField) IEbSystemNotificationDo
	Preload(fields ...field.RelationField) IEbSystemNotificationDo
	FirstOrInit() (*model.EbSystemNotification, error)
	FirstOrCreate() (*model.EbSystemNotification, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemNotification, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemNotificationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemNotificationDo) Debug() IEbSystemNotificationDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemNotificationDo) WithContext(ctx context.Context) IEbSystemNotificationDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemNotificationDo) ReadDB() IEbSystemNotificationDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemNotificationDo) WriteDB() IEbSystemNotificationDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemNotificationDo) Session(config *gorm.Session) IEbSystemNotificationDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemNotificationDo) Clauses(conds ...clause.Expression) IEbSystemNotificationDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemNotificationDo) Returning(value interface{}, columns ...string) IEbSystemNotificationDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemNotificationDo) Not(conds ...gen.Condition) IEbSystemNotificationDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemNotificationDo) Or(conds ...gen.Condition) IEbSystemNotificationDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemNotificationDo) Select(conds ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemNotificationDo) Where(conds ...gen.Condition) IEbSystemNotificationDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemNotificationDo) Order(conds ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemNotificationDo) Distinct(cols ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemNotificationDo) Omit(cols ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemNotificationDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemNotificationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemNotificationDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemNotificationDo) Group(cols ...field.Expr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemNotificationDo) Having(conds ...gen.Condition) IEbSystemNotificationDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemNotificationDo) Limit(limit int) IEbSystemNotificationDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemNotificationDo) Offset(offset int) IEbSystemNotificationDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemNotificationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemNotificationDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemNotificationDo) Unscoped() IEbSystemNotificationDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemNotificationDo) Create(values ...*model.EbSystemNotification) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemNotificationDo) CreateInBatches(values []*model.EbSystemNotification, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemNotificationDo) Save(values ...*model.EbSystemNotification) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemNotificationDo) First() (*model.EbSystemNotification, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemNotification), nil
	}
}

func (e ebSystemNotificationDo) Take() (*model.EbSystemNotification, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemNotification), nil
	}
}

func (e ebSystemNotificationDo) Last() (*model.EbSystemNotification, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemNotification), nil
	}
}

func (e ebSystemNotificationDo) Find() ([]*model.EbSystemNotification, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemNotification), err
}

func (e ebSystemNotificationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemNotification, err error) {
	buf := make([]*model.EbSystemNotification, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemNotificationDo) FindInBatches(result *[]*model.EbSystemNotification, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemNotificationDo) Attrs(attrs ...field.AssignExpr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemNotificationDo) Assign(attrs ...field.AssignExpr) IEbSystemNotificationDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemNotificationDo) Joins(fields ...field.RelationField) IEbSystemNotificationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemNotificationDo) Preload(fields ...field.RelationField) IEbSystemNotificationDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemNotificationDo) FirstOrInit() (*model.EbSystemNotification, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemNotification), nil
	}
}

func (e ebSystemNotificationDo) FirstOrCreate() (*model.EbSystemNotification, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemNotification), nil
	}
}

func (e ebSystemNotificationDo) FindByPage(offset int, limit int) (result []*model.EbSystemNotification, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemNotificationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemNotificationDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemNotificationDo) Delete(models ...*model.EbSystemNotification) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemNotificationDo) withDO(do gen.Dao) *ebSystemNotificationDo {
	e.DO = *do.(*gen.DO)
	return e
}
