// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemCity(db *gorm.DB, opts ...gen.DOOption) ebSystemCity {
	_ebSystemCity := ebSystemCity{}

	_ebSystemCity.ebSystemCityDo.UseDB(db, opts...)
	_ebSystemCity.ebSystemCityDo.UseModel(&model.EbSystemCity{})

	tableName := _ebSystemCity.ebSystemCityDo.TableName()
	_ebSystemCity.ALL = field.NewAsterisk(tableName)
	_ebSystemCity.ID = field.NewInt32(tableName, "id")
	_ebSystemCity.CityID = field.NewInt32(tableName, "city_id")
	_ebSystemCity.Level = field.NewInt32(tableName, "level")
	_ebSystemCity.ParentID = field.NewInt32(tableName, "parent_id")
	_ebSystemCity.AreaCode = field.NewString(tableName, "area_code")
	_ebSystemCity.Name = field.NewString(tableName, "name")
	_ebSystemCity.MergerName = field.NewString(tableName, "merger_name")
	_ebSystemCity.Lng = field.NewString(tableName, "lng")
	_ebSystemCity.Lat = field.NewString(tableName, "lat")
	_ebSystemCity.IsShow = field.NewBool(tableName, "is_show")
	_ebSystemCity.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemCity.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemCity.fillFieldMap()

	return _ebSystemCity
}

// ebSystemCity 城市表
type ebSystemCity struct {
	ebSystemCityDo ebSystemCityDo

	ALL        field.Asterisk
	ID         field.Int32
	CityID     field.Int32  // 城市id
	Level      field.Int32  // 省市级别
	ParentID   field.Int32  // 父级id
	AreaCode   field.String // 区号
	Name       field.String // 名称
	MergerName field.String // 合并名称
	Lng        field.String // 经度
	Lat        field.String // 纬度
	IsShow     field.Bool   // 是否展示
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemCity) Table(newTableName string) *ebSystemCity {
	e.ebSystemCityDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemCity) As(alias string) *ebSystemCity {
	e.ebSystemCityDo.DO = *(e.ebSystemCityDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemCity) updateTableName(table string) *ebSystemCity {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "id")
	e.CityID = field.NewInt32(table, "city_id")
	e.Level = field.NewInt32(table, "level")
	e.ParentID = field.NewInt32(table, "parent_id")
	e.AreaCode = field.NewString(table, "area_code")
	e.Name = field.NewString(table, "name")
	e.MergerName = field.NewString(table, "merger_name")
	e.Lng = field.NewString(table, "lng")
	e.Lat = field.NewString(table, "lat")
	e.IsShow = field.NewBool(table, "is_show")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemCity) WithContext(ctx context.Context) IEbSystemCityDo {
	return e.ebSystemCityDo.WithContext(ctx)
}

func (e ebSystemCity) TableName() string { return e.ebSystemCityDo.TableName() }

func (e ebSystemCity) Alias() string { return e.ebSystemCityDo.Alias() }

func (e ebSystemCity) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemCityDo.Columns(cols...)
}

func (e *ebSystemCity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemCity) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["city_id"] = e.CityID
	e.fieldMap["level"] = e.Level
	e.fieldMap["parent_id"] = e.ParentID
	e.fieldMap["area_code"] = e.AreaCode
	e.fieldMap["name"] = e.Name
	e.fieldMap["merger_name"] = e.MergerName
	e.fieldMap["lng"] = e.Lng
	e.fieldMap["lat"] = e.Lat
	e.fieldMap["is_show"] = e.IsShow
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemCity) clone(db *gorm.DB) ebSystemCity {
	e.ebSystemCityDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemCity) replaceDB(db *gorm.DB) ebSystemCity {
	e.ebSystemCityDo.ReplaceDB(db)
	return e
}

type ebSystemCityDo struct{ gen.DO }

type IEbSystemCityDo interface {
	gen.SubQuery
	Debug() IEbSystemCityDo
	WithContext(ctx context.Context) IEbSystemCityDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemCityDo
	WriteDB() IEbSystemCityDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemCityDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemCityDo
	Not(conds ...gen.Condition) IEbSystemCityDo
	Or(conds ...gen.Condition) IEbSystemCityDo
	Select(conds ...field.Expr) IEbSystemCityDo
	Where(conds ...gen.Condition) IEbSystemCityDo
	Order(conds ...field.Expr) IEbSystemCityDo
	Distinct(cols ...field.Expr) IEbSystemCityDo
	Omit(cols ...field.Expr) IEbSystemCityDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemCityDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemCityDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemCityDo
	Group(cols ...field.Expr) IEbSystemCityDo
	Having(conds ...gen.Condition) IEbSystemCityDo
	Limit(limit int) IEbSystemCityDo
	Offset(offset int) IEbSystemCityDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemCityDo
	Unscoped() IEbSystemCityDo
	Create(values ...*model.EbSystemCity) error
	CreateInBatches(values []*model.EbSystemCity, batchSize int) error
	Save(values ...*model.EbSystemCity) error
	First() (*model.EbSystemCity, error)
	Take() (*model.EbSystemCity, error)
	Last() (*model.EbSystemCity, error)
	Find() ([]*model.EbSystemCity, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemCity, err error)
	FindInBatches(result *[]*model.EbSystemCity, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemCity) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemCityDo
	Assign(attrs ...field.AssignExpr) IEbSystemCityDo
	Joins(fields ...field.RelationField) IEbSystemCityDo
	Preload(fields ...field.RelationField) IEbSystemCityDo
	FirstOrInit() (*model.EbSystemCity, error)
	FirstOrCreate() (*model.EbSystemCity, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemCity, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemCityDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemCityDo) Debug() IEbSystemCityDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemCityDo) WithContext(ctx context.Context) IEbSystemCityDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemCityDo) ReadDB() IEbSystemCityDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemCityDo) WriteDB() IEbSystemCityDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemCityDo) Session(config *gorm.Session) IEbSystemCityDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemCityDo) Clauses(conds ...clause.Expression) IEbSystemCityDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemCityDo) Returning(value interface{}, columns ...string) IEbSystemCityDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemCityDo) Not(conds ...gen.Condition) IEbSystemCityDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemCityDo) Or(conds ...gen.Condition) IEbSystemCityDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemCityDo) Select(conds ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemCityDo) Where(conds ...gen.Condition) IEbSystemCityDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemCityDo) Order(conds ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemCityDo) Distinct(cols ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemCityDo) Omit(cols ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemCityDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemCityDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemCityDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemCityDo) Group(cols ...field.Expr) IEbSystemCityDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemCityDo) Having(conds ...gen.Condition) IEbSystemCityDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemCityDo) Limit(limit int) IEbSystemCityDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemCityDo) Offset(offset int) IEbSystemCityDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemCityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemCityDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemCityDo) Unscoped() IEbSystemCityDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemCityDo) Create(values ...*model.EbSystemCity) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemCityDo) CreateInBatches(values []*model.EbSystemCity, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemCityDo) Save(values ...*model.EbSystemCity) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemCityDo) First() (*model.EbSystemCity, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemCity), nil
	}
}

func (e ebSystemCityDo) Take() (*model.EbSystemCity, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemCity), nil
	}
}

func (e ebSystemCityDo) Last() (*model.EbSystemCity, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemCity), nil
	}
}

func (e ebSystemCityDo) Find() ([]*model.EbSystemCity, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemCity), err
}

func (e ebSystemCityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemCity, err error) {
	buf := make([]*model.EbSystemCity, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemCityDo) FindInBatches(result *[]*model.EbSystemCity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemCityDo) Attrs(attrs ...field.AssignExpr) IEbSystemCityDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemCityDo) Assign(attrs ...field.AssignExpr) IEbSystemCityDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemCityDo) Joins(fields ...field.RelationField) IEbSystemCityDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemCityDo) Preload(fields ...field.RelationField) IEbSystemCityDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemCityDo) FirstOrInit() (*model.EbSystemCity, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemCity), nil
	}
}

func (e ebSystemCityDo) FirstOrCreate() (*model.EbSystemCity, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemCity), nil
	}
}

func (e ebSystemCityDo) FindByPage(offset int, limit int) (result []*model.EbSystemCity, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemCityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemCityDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemCityDo) Delete(models ...*model.EbSystemCity) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemCityDo) withDO(do gen.Dao) *ebSystemCityDo {
	e.DO = *do.(*gen.DO)
	return e
}
