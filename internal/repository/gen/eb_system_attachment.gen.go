// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newEbSystemAttachment(db *gorm.DB, opts ...gen.DOOption) ebSystemAttachment {
	_ebSystemAttachment := ebSystemAttachment{}

	_ebSystemAttachment.ebSystemAttachmentDo.UseDB(db, opts...)
	_ebSystemAttachment.ebSystemAttachmentDo.UseModel(&model.EbSystemAttachment{})

	tableName := _ebSystemAttachment.ebSystemAttachmentDo.TableName()
	_ebSystemAttachment.ALL = field.NewAsterisk(tableName)
	_ebSystemAttachment.AttID = field.NewInt32(tableName, "att_id")
	_ebSystemAttachment.Name = field.NewString(tableName, "name")
	_ebSystemAttachment.AttDir = field.NewString(tableName, "att_dir")
	_ebSystemAttachment.SattDir = field.NewString(tableName, "satt_dir")
	_ebSystemAttachment.AttSize = field.NewString(tableName, "att_size")
	_ebSystemAttachment.AttType = field.NewString(tableName, "att_type")
	_ebSystemAttachment.Pid = field.NewInt32(tableName, "pid")
	_ebSystemAttachment.ImageType = field.NewInt32(tableName, "image_type")
	_ebSystemAttachment.CreateTime = field.NewTime(tableName, "create_time")
	_ebSystemAttachment.UpdateTime = field.NewTime(tableName, "update_time")

	_ebSystemAttachment.fillFieldMap()

	return _ebSystemAttachment
}

// ebSystemAttachment 附件管理表
type ebSystemAttachment struct {
	ebSystemAttachmentDo ebSystemAttachmentDo

	ALL        field.Asterisk
	AttID      field.Int32
	Name       field.String // 附件名称
	AttDir     field.String // 附件路径
	SattDir    field.String // 压缩图片路径
	AttSize    field.String // 附件大小
	AttType    field.String // 附件类型
	Pid        field.Int32  // 分类ID0编辑器,1商品图片,2拼团图片,3砍价图片,4秒杀图片,5文章图片,6组合数据图， 7前台用户
	ImageType  field.Int32  // 图片上传类型 1本地 2七牛云 3OSS 4COS
	CreateTime field.Time   // 创建时间
	UpdateTime field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (e ebSystemAttachment) Table(newTableName string) *ebSystemAttachment {
	e.ebSystemAttachmentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e ebSystemAttachment) As(alias string) *ebSystemAttachment {
	e.ebSystemAttachmentDo.DO = *(e.ebSystemAttachmentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *ebSystemAttachment) updateTableName(table string) *ebSystemAttachment {
	e.ALL = field.NewAsterisk(table)
	e.AttID = field.NewInt32(table, "att_id")
	e.Name = field.NewString(table, "name")
	e.AttDir = field.NewString(table, "att_dir")
	e.SattDir = field.NewString(table, "satt_dir")
	e.AttSize = field.NewString(table, "att_size")
	e.AttType = field.NewString(table, "att_type")
	e.Pid = field.NewInt32(table, "pid")
	e.ImageType = field.NewInt32(table, "image_type")
	e.CreateTime = field.NewTime(table, "create_time")
	e.UpdateTime = field.NewTime(table, "update_time")

	e.fillFieldMap()

	return e
}

func (e *ebSystemAttachment) WithContext(ctx context.Context) IEbSystemAttachmentDo {
	return e.ebSystemAttachmentDo.WithContext(ctx)
}

func (e ebSystemAttachment) TableName() string { return e.ebSystemAttachmentDo.TableName() }

func (e ebSystemAttachment) Alias() string { return e.ebSystemAttachmentDo.Alias() }

func (e ebSystemAttachment) Columns(cols ...field.Expr) gen.Columns {
	return e.ebSystemAttachmentDo.Columns(cols...)
}

func (e *ebSystemAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *ebSystemAttachment) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["att_id"] = e.AttID
	e.fieldMap["name"] = e.Name
	e.fieldMap["att_dir"] = e.AttDir
	e.fieldMap["satt_dir"] = e.SattDir
	e.fieldMap["att_size"] = e.AttSize
	e.fieldMap["att_type"] = e.AttType
	e.fieldMap["pid"] = e.Pid
	e.fieldMap["image_type"] = e.ImageType
	e.fieldMap["create_time"] = e.CreateTime
	e.fieldMap["update_time"] = e.UpdateTime
}

func (e ebSystemAttachment) clone(db *gorm.DB) ebSystemAttachment {
	e.ebSystemAttachmentDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e ebSystemAttachment) replaceDB(db *gorm.DB) ebSystemAttachment {
	e.ebSystemAttachmentDo.ReplaceDB(db)
	return e
}

type ebSystemAttachmentDo struct{ gen.DO }

type IEbSystemAttachmentDo interface {
	gen.SubQuery
	Debug() IEbSystemAttachmentDo
	WithContext(ctx context.Context) IEbSystemAttachmentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEbSystemAttachmentDo
	WriteDB() IEbSystemAttachmentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEbSystemAttachmentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEbSystemAttachmentDo
	Not(conds ...gen.Condition) IEbSystemAttachmentDo
	Or(conds ...gen.Condition) IEbSystemAttachmentDo
	Select(conds ...field.Expr) IEbSystemAttachmentDo
	Where(conds ...gen.Condition) IEbSystemAttachmentDo
	Order(conds ...field.Expr) IEbSystemAttachmentDo
	Distinct(cols ...field.Expr) IEbSystemAttachmentDo
	Omit(cols ...field.Expr) IEbSystemAttachmentDo
	Join(table schema.Tabler, on ...field.Expr) IEbSystemAttachmentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemAttachmentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemAttachmentDo
	Group(cols ...field.Expr) IEbSystemAttachmentDo
	Having(conds ...gen.Condition) IEbSystemAttachmentDo
	Limit(limit int) IEbSystemAttachmentDo
	Offset(offset int) IEbSystemAttachmentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemAttachmentDo
	Unscoped() IEbSystemAttachmentDo
	Create(values ...*model.EbSystemAttachment) error
	CreateInBatches(values []*model.EbSystemAttachment, batchSize int) error
	Save(values ...*model.EbSystemAttachment) error
	First() (*model.EbSystemAttachment, error)
	Take() (*model.EbSystemAttachment, error)
	Last() (*model.EbSystemAttachment, error)
	Find() ([]*model.EbSystemAttachment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemAttachment, err error)
	FindInBatches(result *[]*model.EbSystemAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EbSystemAttachment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEbSystemAttachmentDo
	Assign(attrs ...field.AssignExpr) IEbSystemAttachmentDo
	Joins(fields ...field.RelationField) IEbSystemAttachmentDo
	Preload(fields ...field.RelationField) IEbSystemAttachmentDo
	FirstOrInit() (*model.EbSystemAttachment, error)
	FirstOrCreate() (*model.EbSystemAttachment, error)
	FindByPage(offset int, limit int) (result []*model.EbSystemAttachment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEbSystemAttachmentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e ebSystemAttachmentDo) Debug() IEbSystemAttachmentDo {
	return e.withDO(e.DO.Debug())
}

func (e ebSystemAttachmentDo) WithContext(ctx context.Context) IEbSystemAttachmentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e ebSystemAttachmentDo) ReadDB() IEbSystemAttachmentDo {
	return e.Clauses(dbresolver.Read)
}

func (e ebSystemAttachmentDo) WriteDB() IEbSystemAttachmentDo {
	return e.Clauses(dbresolver.Write)
}

func (e ebSystemAttachmentDo) Session(config *gorm.Session) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Session(config))
}

func (e ebSystemAttachmentDo) Clauses(conds ...clause.Expression) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e ebSystemAttachmentDo) Returning(value interface{}, columns ...string) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e ebSystemAttachmentDo) Not(conds ...gen.Condition) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e ebSystemAttachmentDo) Or(conds ...gen.Condition) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e ebSystemAttachmentDo) Select(conds ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e ebSystemAttachmentDo) Where(conds ...gen.Condition) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e ebSystemAttachmentDo) Order(conds ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e ebSystemAttachmentDo) Distinct(cols ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e ebSystemAttachmentDo) Omit(cols ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e ebSystemAttachmentDo) Join(table schema.Tabler, on ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e ebSystemAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e ebSystemAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e ebSystemAttachmentDo) Group(cols ...field.Expr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e ebSystemAttachmentDo) Having(conds ...gen.Condition) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e ebSystemAttachmentDo) Limit(limit int) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e ebSystemAttachmentDo) Offset(offset int) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e ebSystemAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e ebSystemAttachmentDo) Unscoped() IEbSystemAttachmentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e ebSystemAttachmentDo) Create(values ...*model.EbSystemAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e ebSystemAttachmentDo) CreateInBatches(values []*model.EbSystemAttachment, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e ebSystemAttachmentDo) Save(values ...*model.EbSystemAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e ebSystemAttachmentDo) First() (*model.EbSystemAttachment, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAttachment), nil
	}
}

func (e ebSystemAttachmentDo) Take() (*model.EbSystemAttachment, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAttachment), nil
	}
}

func (e ebSystemAttachmentDo) Last() (*model.EbSystemAttachment, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAttachment), nil
	}
}

func (e ebSystemAttachmentDo) Find() ([]*model.EbSystemAttachment, error) {
	result, err := e.DO.Find()
	return result.([]*model.EbSystemAttachment), err
}

func (e ebSystemAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EbSystemAttachment, err error) {
	buf := make([]*model.EbSystemAttachment, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e ebSystemAttachmentDo) FindInBatches(result *[]*model.EbSystemAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e ebSystemAttachmentDo) Attrs(attrs ...field.AssignExpr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e ebSystemAttachmentDo) Assign(attrs ...field.AssignExpr) IEbSystemAttachmentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e ebSystemAttachmentDo) Joins(fields ...field.RelationField) IEbSystemAttachmentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e ebSystemAttachmentDo) Preload(fields ...field.RelationField) IEbSystemAttachmentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e ebSystemAttachmentDo) FirstOrInit() (*model.EbSystemAttachment, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAttachment), nil
	}
}

func (e ebSystemAttachmentDo) FirstOrCreate() (*model.EbSystemAttachment, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EbSystemAttachment), nil
	}
}

func (e ebSystemAttachmentDo) FindByPage(offset int, limit int) (result []*model.EbSystemAttachment, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e ebSystemAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e ebSystemAttachmentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e ebSystemAttachmentDo) Delete(models ...*model.EbSystemAttachment) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *ebSystemAttachmentDo) withDO(do gen.Dao) *ebSystemAttachmentDo {
	e.DO = *do.(*gen.DO)
	return e
}
